/* Generated by Cython 3.0.6 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "NOMINMAX",
                null
            ]
        ],
        "depends": [
            "vxlapi.h"
        ],
        "language": "c++",
        "libraries": [
            "vxlapi64"
        ],
        "name": "vxlapi",
        "sources": [
            "vxlapi.pyx"
        ]
    },
    "module_name": "vxlapi"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_6" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030006F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info; // borrowed
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11; // we don't yet need to distinguish between versions > 11
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);  // we don't have access to __pyx_empty_bytes here
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__vxlapi
#define __PYX_HAVE_API__vxlapi
/* Early includes */
#include <windows.h>
#include "vxlapi.h"
#include <string.h>
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else  // Py < 3.12
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "vxlapi.pyx",
  "<stringsource>",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/

/* "vxlapi.pyx":458
 * 
 * 
 * cdef enum e_XLevent_type:             # <<<<<<<<<<<<<<
 *     XL_NO_COMMAND               =  0
 *     XL_RECEIVE_MSG              =  1
 */
enum __pyx_t_6vxlapi_e_XLevent_type {
  __pyx_e_6vxlapi_XL_NO_COMMAND = 0,
  __pyx_e_6vxlapi_XL_RECEIVE_MSG = 1,
  __pyx_e_6vxlapi_XL_CHIP_STATE = 4,
  __pyx_e_6vxlapi_XL_TRANSCEIVER = 6,
  __pyx_e_6vxlapi_XL_TIMER = 8,
  __pyx_e_6vxlapi_XL_TRANSMIT_MSG = 10,
  __pyx_e_6vxlapi_XL_SYNC_PULSE = 11,
  __pyx_e_6vxlapi_XL_APPLICATION_NOTIFICATION = 15,
  __pyx_e_6vxlapi_XL_LIN_MSG = 20,
  __pyx_e_6vxlapi_XL_LIN_ERRMSG = 21,
  __pyx_e_6vxlapi_XL_LIN_SYNCERR = 22,
  __pyx_e_6vxlapi_XL_LIN_NOANS = 23,
  __pyx_e_6vxlapi_XL_LIN_WAKEUP = 24,
  __pyx_e_6vxlapi_XL_LIN_SLEEP = 25,
  __pyx_e_6vxlapi_XL_LIN_CRCINFO = 26,
  __pyx_e_6vxlapi_XL_RECEIVE_DAIO_DATA = 32,
  __pyx_e_6vxlapi_XL_RECEIVE_DAIO_PIGGY = 34
};
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg // no-op
    #define __Pyx_Arg_XDECREF_VARARGS(arg) // no-op - arg is borrowed
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg // no-op, __Pyx_Arg_FASTCALL is direct and this needs
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)  // no-op - arg was returned from array
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_MultiplyCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

static PyObject* __pyx_convert__to_py_XLcanFdConf(XLcanFdConf s);
static PyObject* __pyx_convert__to_py_XLfrClusterConfig(XLfrClusterConfig s);
static PyObject* __pyx_convert__to_py_XLfrChannelConfig(XLfrChannelConfig s);
static PyObject* __pyx_convert__to_py_XLfrMode(XLfrMode s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_start_cycle(struct s_xl_fr_start_cycle s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_rx_frame(struct s_xl_fr_rx_frame s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_tx_frame(struct s_xl_fr_tx_frame s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_wakeup(struct s_xl_fr_wakeup s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_symbol_window(struct s_xl_fr_symbol_window s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error_poc_mode(struct s_xl_fr_error_poc_mode s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error_sync_frames(struct s_xl_fr_error_sync_frames s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error_clock_corr_failure(struct s_xl_fr_error_clock_corr_failure s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error_nit_failure(struct s_xl_fr_error_nit_failure s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error_cc_error(struct s_xl_fr_error_cc_error s);
static PyObject* __pyx_convert__to_py_union__s_xl_fr_error_info(union s_xl_fr_error_info s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error(struct s_xl_fr_error s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_status(struct s_xl_fr_status s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_nm_vector(struct s_xl_fr_nm_vector s);
static PyObject* __pyx_convert__to_py_struct__s_xl_sync_pulse_ev(struct s_xl_sync_pulse_ev s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_spy_frame(struct s_xl_fr_spy_frame s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_spy_symbol(struct s_xl_fr_spy_symbol s);
static PyObject* __pyx_convert__to_py_struct__s_xl_application_notification(struct s_xl_application_notification s);
static PyObject* __pyx_convert__to_py_union__s_xl_fr_tag_data(union s_xl_fr_tag_data s);
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_event(struct s_xl_fr_event s);
static PyObject* __pyx_convert__to_py_XLfrAcceptanceFilter(XLfrAcceptanceFilter s);
/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE XLuint64 __Pyx_PyInt_As_XLuint64(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE XLportHandle __Pyx_PyInt_As_XLportHandle(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE XLstatus __Pyx_PyInt_As_XLstatus(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XLstatus(XLstatus value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XLuint64(XLuint64 value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XLportHandle(XLportHandle value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned short __Pyx_PyInt_As_unsigned_short(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XLeventTag(XLeventTag value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* CIntFromPy.proto */
static CYTHON_INLINE XLfrEventTag __Pyx_PyInt_As_XLfrEventTag(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XLfrEventTag(XLfrEventTag value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "vxlapi" */
static PyObject *__pyx_f_6vxlapi_GetEventBufferFromDict(XLfrEvent *, PyObject *); /*proto*/
static XLchipParams __pyx_convert__from_py_XLchipParams(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_py_unsigned_int(unsigned int *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_unsigned_int(unsigned int *, Py_ssize_t); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "vxlapi"
extern int __pyx_module_is_main_vxlapi;
int __pyx_module_is_main_vxlapi = 0;

/* Implementation of "vxlapi" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_ValueError;
/* #### Code section: string_decls ### */
static const char __pyx_k_b[] = "b";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_ch[] = "ch";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_tx[] = "tx";
static const char __pyx_k_can[] = "can";
static const char __pyx_k_dir[] = "dir";
static const char __pyx_k_dlc[] = "dlc";
static const char __pyx_k_err[] = "err";
static const char __pyx_k_msg[] = "msg";
static const char __pyx_k_phy[] = "phy";
static const char __pyx_k_raw[] = "raw";
static const char __pyx_k_sam[] = "sam";
static const char __pyx_k_sjw[] = "sjw";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k__104[] = "?";
static const char __pyx_k_a429[] = "a429";
static const char __pyx_k_btr0[] = "btr0";
static const char __pyx_k_btr1[] = "btr1";
static const char __pyx_k_code[] = "code";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_link[] = "link";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mask[] = "mask";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_most[] = "most";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_res1[] = "res1";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_txrq[] = "txrq";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_canFD[] = "canFD";
static const char __pyx_k_canId[] = "canId";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_gdNIT[] = "gdNIT";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_pTime[] = "pTime";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_speed[] = "speed";
static const char __pyx_k_tseg1[] = "tseg1";
static const char __pyx_k_tseg2[] = "tseg2";
static const char __pyx_k_bypass[] = "bypass";
static const char __pyx_k_frMode[] = "frMode";
static const char __pyx_k_hwType[] = "hwType";
static const char __pyx_k_minGap[] = "minGap";
static const char __pyx_k_msgCnt[] = "msgCnt";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_parity[] = "parity";
static const char __pyx_k_plevel[] = "plevel";
static const char __pyx_k_raw_24[] = "raw[24]";
static const char __pyx_k_raw_28[] = "raw[28]";
static const char __pyx_k_resNet[] = "resNet";
static const char __pyx_k_samAbr[] = "samAbr";
static const char __pyx_k_sjwAbr[] = "sjwAbr";
static const char __pyx_k_sjwDbr[] = "sjwDbr";
static const char __pyx_k_slotID[] = "slotID";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_symbol[] = "symbol";
static const char __pyx_k_txMode[] = "txMode";
static const char __pyx_k_vxlapi[] = "vxlapi";
static const char __pyx_k_Receive[] = "Receive";
static const char __pyx_k_appName[] = "appName";
static const char __pyx_k_bitRate[] = "bitRate";
static const char __pyx_k_bitrate[] = "bitrate";
static const char __pyx_k_boxMask[] = "boxMask";
static const char __pyx_k_busType[] = "busType";
static const char __pyx_k_ccError[] = "ccError";
static const char __pyx_k_cfgMode[] = "cfgMode";
static const char __pyx_k_channel[] = "channel";
static const char __pyx_k_flexray[] = "flexray";
static const char __pyx_k_frError[] = "frError";
static const char __pyx_k_hwIndex[] = "hwIndex";
static const char __pyx_k_idRange[] = "idRange";
static const char __pyx_k_isOnBus[] = "isOnBus";
static const char __pyx_k_last_id[] = "last_id";
static const char __pyx_k_licInfo[] = "licInfo";
static const char __pyx_k_licName[] = "licName";
static const char __pyx_k_options[] = "options";
static const char __pyx_k_pHwType[] = "pHwType";
static const char __pyx_k_tagData[] = "tagData";
static const char __pyx_k_transId[] = "transId";
static const char __pyx_k_xlEvent[] = "xlEvent";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_OpenPort[] = "OpenPort";
static const char __pyx_k_XL_ERROR[] = "XL_ERROR";
static const char __pyx_k_XLstatus[] = "XLstatus";
static const char __pyx_k_baudrate[] = "baudrate";
static const char __pyx_k_boxCount[] = "boxCount";
static const char __pyx_k_boxIndex[] = "boxIndex";
static const char __pyx_k_callSign[] = "callSign";
static const char __pyx_k_doNotUse[] = "_doNotUse";
static const char __pyx_k_ethernet[] = "ethernet";
static const char __pyx_k_first_id[] = "first_id";
static const char __pyx_k_frStatus[] = "frStatus";
static const char __pyx_k_frWakeup[] = "frWakeup";
static const char __pyx_k_frameCRC[] = "frameCRC";
static const char __pyx_k_lineMode[] = "lineMode";
static const char __pyx_k_msgFlags[] = "msgFlags";
static const char __pyx_k_newValue[] = "newValue";
static const char __pyx_k_nmVector[] = "nmVector";
static const char __pyx_k_pBoxMask[] = "pBoxMask";
static const char __pyx_k_pHwIndex[] = "pHwIndex";
static const char __pyx_k_pLicInfo[] = "pLicInfo";
static const char __pyx_k_pMessage[] = "pMessage";
static const char __pyx_k_pxlEvent[] = "pxlEvent";
static const char __pyx_k_reserved[] = "reserved";
static const char __pyx_k_retEvent[] = "retEvent";
static const char __pyx_k_tseg1Abr[] = "tseg1Abr";
static const char __pyx_k_tseg1Dbr[] = "tseg1Dbr";
static const char __pyx_k_tseg2Abr[] = "tseg2Abr";
static const char __pyx_k_tseg2Dbr[] = "tseg2Dbr";
static const char __pyx_k_xlHandle[] = "xlHandle";
static const char __pyx_k_xlstring[] = "xlstring";
static const char __pyx_k_ChipState[] = "ChipState";
static const char __pyx_k_ClosePort[] = "ClosePort";
static const char __pyx_k_FrReceive[] = "FrReceive";
static const char __pyx_k_FrSetMode[] = "FrSetMode";
static const char __pyx_k_boxSerial[] = "boxSerial";
static const char __pyx_k_busParams[] = "busParams";
static const char __pyx_k_canFdConf[] = "canFdConf";
static const char __pyx_k_canOpMode[] = "canOpMode";
static const char __pyx_k_chanIndex[] = "chanIndex";
static const char __pyx_k_clockMode[] = "clockMode";
static const char __pyx_k_connector[] = "connector";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_errorInfo[] = "errorInfo";
static const char __pyx_k_errorMode[] = "errorMode";
static const char __pyx_k_flagsChip[] = "flagsChip";
static const char __pyx_k_frCCError[] = "frCCError";
static const char __pyx_k_frChannel[] = "frChannel";
static const char __pyx_k_frPocMode[] = "frPocMode";
static const char __pyx_k_frRxFrame[] = "frRxFrame";
static const char __pyx_k_frTxFrame[] = "frTxFrame";
static const char __pyx_k_gChannels[] = "gChannels";
static const char __pyx_k_headerCRC[] = "headerCRC";
static const char __pyx_k_hwChannel[] = "hwChannel";
static const char __pyx_k_lowLength[] = "lowLength";
static const char __pyx_k_macAddr_6[] = "macAddr[6]";
static const char __pyx_k_pBoxCount[] = "pBoxCount";
static const char __pyx_k_pChannels[] = "pChannels";
static const char __pyx_k_pLatestTx[] = "pLatestTx";
static const char __pyx_k_pXlHandle[] = "pXlHandle";
static const char __pyx_k_reserved0[] = "reserved0";
static const char __pyx_k_reserved1[] = "reserved1";
static const char __pyx_k_reserved2[] = "reserved2";
static const char __pyx_k_timeStamp[] = "timeStamp";
static const char __pyx_k_timerRate[] = "timerRate";
static const char __pyx_k_tssLength[] = "tssLength";
static const char __pyx_k_ErrorFrame[] = "ErrorFrame";
static const char __pyx_k_FrTransmit[] = "FrTransmit";
static const char __pyx_k_OpenDriver[] = "OpenDriver";
static const char __pyx_k_ResetClock[] = "ResetClock";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_XL_PENDING[] = "XL_PENDING";
static const char __pyx_k_XL_SUCCESS[] = "XL_SUCCESS";
static const char __pyx_k_accessMask[] = "accessMask";
static const char __pyx_k_appChannel[] = "appChannel";
static const char __pyx_k_bAvailable[] = "bAvailable";
static const char __pyx_k_chipParams[] = "chipParams";
static const char __pyx_k_cycleCount[] = "cycleCount";
static const char __pyx_k_dllVersion[] = "dllVersion";
static const char __pyx_k_eventCount[] = "eventCount";
static const char __pyx_k_frNmVector[] = "frNmVector";
static const char __pyx_k_frSpyFrame[] = "frSpyFrame";
static const char __pyx_k_frameError[] = "frameError";
static const char __pyx_k_gdMinislot[] = "gdMinislot";
static const char __pyx_k_maxBitrate[] = "maxBitrate";
static const char __pyx_k_minBitrate[] = "minBitrate";
static const char __pyx_k_msgCntSent[] = "msgCntSent";
static const char __pyx_k_outputMode[] = "outputMode";
static const char __pyx_k_pBoxSerial[] = "pBoxSerial";
static const char __pyx_k_pCanFdConf[] = "pCanFdConf";
static const char __pyx_k_pEventList[] = "pEventList";
static const char __pyx_k_pHwChannel[] = "pHwChannel";
static const char __pyx_k_pdMaxDrift[] = "pdMaxDrift";
static const char __pyx_k_portHandle[] = "portHandle";
static const char __pyx_k_ptimerRate[] = "ptimerRate";
static const char __pyx_k_queueLevel[] = "queueLevel";
static const char __pyx_k_repetition[] = "repetition";
static const char __pyx_k_reserved_3[] = "reserved[3]";
static const char __pyx_k_statusType[] = "statusType";
static const char __pyx_k_userHandle[] = "userHandle";
static const char __pyx_k_vxlapi_pyx[] = "vxlapi.pyx";
static const char __pyx_k_CanTransmit[] = "CanTransmit";
static const char __pyx_k_CloseDriver[] = "CloseDriver";
static const char __pyx_k_GetSyncTime[] = "GetSyncTime";
static const char __pyx_k_XL_FR_ERROR[] = "XL_FR_ERROR";
static const char __pyx_k_breakOffset[] = "breakOffset";
static const char __pyx_k_channelMask[] = "channelMask";
static const char __pyx_k_channelTime[] = "channelTime";
static const char __pyx_k_configError[] = "configError";
static const char __pyx_k_dataBitRate[] = "dataBitRate";
static const char __pyx_k_eventBuffer[] = "eventBuffer";
static const char __pyx_k_frSpySymbol[] = "frSpySymbol";
static const char __pyx_k_frSyncPulse[] = "frSyncPulse";
static const char __pyx_k_frameLength[] = "frameLength";
static const char __pyx_k_gdMacrotick[] = "gdMacrotick";
static const char __pyx_k_headerFlags[] = "headerFlags";
static const char __pyx_k_pChipParams[] = "pChipParams";
static const char __pyx_k_pEventCount[] = "pEventCount";
static const char __pyx_k_pMsgCntSent[] = "pMsgCntSent";
static const char __pyx_k_pXlCanTxEvt[] = "pXlCanTxEvt";
static const char __pyx_k_pdMicrotick[] = "pdMicrotick";
static const char __pyx_k_port_handle[] = "port_handle";
static const char __pyx_k_raw_data_10[] = "raw_data[10]";
static const char __pyx_k_reserved1_7[] = "reserved1[7]";
static const char __pyx_k_reserved_10[] = "reserved[10]";
static const char __pyx_k_rxQueueSize[] = "rxQueueSize";
static const char __pyx_k_SetTimerRate[] = "SetTimerRate";
static const char __pyx_k_XL_FR_STATUS[] = "XL_FR_STATUS";
static const char __pyx_k_XL_FR_WAKEUP[] = "XL_FR_WAKEUP";
static const char __pyx_k_autoBaudrate[] = "autoBaudrate";
static const char __pyx_k_channelCount[] = "channelCount";
static const char __pyx_k_channelIndex[] = "channelIndex";
static const char __pyx_k_driverConfig[] = "driverConfig";
static const char __pyx_k_filterStatus[] = "filterStatus";
static const char __pyx_k_frNitFailure[] = "frNitFailure";
static const char __pyx_k_frStartCycle[] = "frStartCycle";
static const char __pyx_k_gListenNoise[] = "gListenNoise";
static const char __pyx_k_gSyncNodeMax[] = "gSyncNodeMax";
static const char __pyx_k_gdStaticSlot[] = "gdStaticSlot";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_licInfoArray[] = "licInfoArray";
static const char __pyx_k_messageCount[] = "messageCount";
static const char __pyx_k_notifyReason[] = "notifyReason";
static const char __pyx_k_pChannelTime[] = "pChannelTime";
static const char __pyx_k_pChannelsMTS[] = "pChannelsMTS";
static const char __pyx_k_pEventBuffer[] = "pEventBuffer";
static const char __pyx_k_pEventString[] = "pEventString";
static const char __pyx_k_serialNumber[] = "serialNumber";
static const char __pyx_k_symbolWindow[] = "symbolWindow";
static const char __pyx_k_wakeupStatus[] = "wakeupStatus";
static const char __pyx_k_CanTransmitEx[] = "CanTransmitEx";
static const char __pyx_k_FrActivateSpy[] = "FrActivateSpy";
static const char __pyx_k_GetApplConfig[] = "GetApplConfig";
static const char __pyx_k_GetKeymanInfo[] = "GetKeymanInfo";
static const char __pyx_k_PopupHwConfig[] = "PopupHwConfig";
static const char __pyx_k_SetApplConfig[] = "SetApplConfig";
static const char __pyx_k_XL_MAX_HWTYPE[] = "XL_MAX_HWTYPE";
static const char __pyx_k_articleNumber[] = "articleNumber";
static const char __pyx_k_channelConfig[] = "channelConfig";
static const char __pyx_k_clusterConfig[] = "clusterConfig";
static const char __pyx_k_driverVersion[] = "driverVersion";
static const char __pyx_k_gdCASRxLowMax[] = "gdCASRxLowMax";
static const char __pyx_k_incrementSize[] = "incrementSize";
static const char __pyx_k_inicFwVersion[] = "inicFwVersion";
static const char __pyx_k_message_count[] = "message_count";
static const char __pyx_k_pDriverConfig[] = "pDriverConfig";
static const char __pyx_k_pLicInfoArray[] = "pLicInfoArray";
static const char __pyx_k_payloadLength[] = "payloadLength";
static const char __pyx_k_previousValue[] = "previousValue";
static const char __pyx_k_timeStampSync[] = "timeStampSync";
static const char __pyx_k_triggerSource[] = "triggerSource";
static const char __pyx_k_waitForFinish[] = "waitForFinish";
static const char __pyx_k_GetChannelMask[] = "GetChannelMask";
static const char __pyx_k_GetChannelTime[] = "GetChannelTime";
static const char __pyx_k_GetErrorString[] = "GetErrorString";
static const char __pyx_k_GetKeymanBoxes[] = "GetKeymanBoxes";
static const char __pyx_k_GetLicenseInfo[] = "GetLicenseInfo";
static const char __pyx_k_XL_ERR_EDL_RTR[] = "XL_ERR_EDL_RTR";
static const char __pyx_k_XL_FR_RX_FRAME[] = "XL_FR_RX_FRAME";
static const char __pyx_k_XL_FR_TX_FRAME[] = "XL_FR_TX_FRAME";
static const char __pyx_k_XL_HWTYPE_NONE[] = "XL_HWTYPE_NONE";
static const char __pyx_k_connectionInfo[] = "connectionInfo";
static const char __pyx_k_filterLastSlot[] = "filterLastSlot";
static const char __pyx_k_filterTypeMask[] = "filterTypeMask";
static const char __pyx_k_frSymbolWindow[] = "frSymbolWindow";
static const char __pyx_k_gMacroPerCycle[] = "gMacroPerCycle";
static const char __pyx_k_gdSymbolWindow[] = "gdSymbolWindow";
static const char __pyx_k_oddSyncFramesA[] = "oddSyncFramesA";
static const char __pyx_k_oddSyncFramesB[] = "oddSyncFramesB";
static const char __pyx_k_pMicroPerCycle[] = "pMicroPerCycle";
static const char __pyx_k_pPreviousValue[] = "pPreviousValue";
static const char __pyx_k_pWakeupChannel[] = "pWakeupChannel";
static const char __pyx_k_pWakeupPattern[] = "pWakeupPattern";
static const char __pyx_k_pXLcanTxEvents[] = "pXLcanTxEvents";
static const char __pyx_k_permissionMask[] = "permissionMask";
static const char __pyx_k_ActivateChannel[] = "ActivateChannel";
static const char __pyx_k_GetChannelIndex[] = "GetChannelIndex";
static const char __pyx_k_GetDriverConfig[] = "GetDriverConfig";
static const char __pyx_k_SetNotification[] = "SetNotification";
static const char __pyx_k_XL_BUS_TYPE_CAN[] = "XL_BUS_TYPE_CAN";
static const char __pyx_k_XL_BUS_TYPE_LIN[] = "XL_BUS_TYPE_LIN";
static const char __pyx_k_XL_FR_CC_COLD_A[] = "XL_FR_CC_COLD_A";
static const char __pyx_k_XL_FR_CC_COLD_B[] = "XL_FR_CC_COLD_B";
static const char __pyx_k_XL_FR_CHANNEL_A[] = "XL_FR_CHANNEL_A";
static const char __pyx_k_XL_FR_CHANNEL_B[] = "XL_FR_CHANNEL_B";
static const char __pyx_k_XL_FR_MODE_NONE[] = "XL_FR_MODE_NONE";
static const char __pyx_k_XL_FR_NM_VECTOR[] = "XL_FR_NM_VECTOR";
static const char __pyx_k_XL_FR_SPY_FRAME[] = "XL_FR_SPY_FRAME";
static const char __pyx_k_busGuardianTick[] = "busGuardianTick";
static const char __pyx_k_delimiterOffset[] = "delimiterOffset";
static const char __pyx_k_dominantTimeout[] = "dominantTimeout";
static const char __pyx_k_evenSyncFramesA[] = "evenSyncFramesA";
static const char __pyx_k_evenSyncFramesB[] = "evenSyncFramesB";
static const char __pyx_k_filterFirstSlot[] = "filterFirstSlot";
static const char __pyx_k_incrementOffset[] = "incrementOffset";
static const char __pyx_k_maximalBaudrate[] = "maximalBaudrate";
static const char __pyx_k_pdListenTimeout[] = "pdListenTimeout";
static const char __pyx_k_permission_mask[] = "permission_mask";
static const char __pyx_k_specialCabFlags[] = "specialCabFlags";
static const char __pyx_k_transceiverName[] = "transceiverName";
static const char __pyx_k_transceiverType[] = "transceiverType";
static const char __pyx_k_vRateCorrection[] = "vRateCorrection";
static const char __pyx_k_XL_ACTIVATE_NONE[] = "XL_ACTIVATE_NONE";
static const char __pyx_k_XL_BUS_TYPE_A429[] = "XL_BUS_TYPE_A429";
static const char __pyx_k_XL_BUS_TYPE_AFDX[] = "XL_BUS_TYPE_AFDX";
static const char __pyx_k_XL_BUS_TYPE_DAIO[] = "XL_BUS_TYPE_DAIO";
static const char __pyx_k_XL_BUS_TYPE_MOST[] = "XL_BUS_TYPE_MOST";
static const char __pyx_k_XL_BUS_TYPE_NONE[] = "XL_BUS_TYPE_NONE";
static const char __pyx_k_XL_ERR_ERROR_CRC[] = "XL_ERR_ERROR_CRC";
static const char __pyx_k_XL_ERR_NOT_FOUND[] = "XL_ERR_NOT_FOUND";
static const char __pyx_k_XL_FR_CHANNEL_AB[] = "XL_FR_CHANNEL_AB";
static const char __pyx_k_XL_FR_SPY_SYMBOL[] = "XL_FR_SPY_SYMBOL";
static const char __pyx_k_XL_FR_SYMBOL_CAS[] = "XL_FR_SYMBOL_CAS";
static const char __pyx_k_XL_FR_SYMBOL_MTS[] = "XL_FR_SYMBOL_MTS";
static const char __pyx_k_XL_HWTYPE_CSMCAN[] = "XL_HWTYPE_CSMCAN";
static const char __pyx_k_XL_HWTYPE_VN0601[] = "XL_HWTYPE_VN0601";
static const char __pyx_k_XL_HWTYPE_VN1610[] = "XL_HWTYPE_VN1610";
static const char __pyx_k_XL_HWTYPE_VN1611[] = "XL_HWTYPE_VN1611";
static const char __pyx_k_XL_HWTYPE_VN1630[] = "XL_HWTYPE_VN1630";
static const char __pyx_k_XL_HWTYPE_VN1640[] = "XL_HWTYPE_VN1640";
static const char __pyx_k_XL_HWTYPE_VN2600[] = "XL_HWTYPE_VN2600";
static const char __pyx_k_XL_HWTYPE_VN2610[] = "XL_HWTYPE_VN2610";
static const char __pyx_k_XL_HWTYPE_VN2640[] = "XL_HWTYPE_VN2640";
static const char __pyx_k_XL_HWTYPE_VN3300[] = "XL_HWTYPE_VN3300";
static const char __pyx_k_XL_HWTYPE_VN3600[] = "XL_HWTYPE_VN3600";
static const char __pyx_k_XL_HWTYPE_VN5610[] = "XL_HWTYPE_VN5610";
static const char __pyx_k_XL_HWTYPE_VN7570[] = "XL_HWTYPE_VN7570";
static const char __pyx_k_XL_HWTYPE_VN7572[] = "XL_HWTYPE_VN7572";
static const char __pyx_k_XL_HWTYPE_VN7600[] = "XL_HWTYPE_VN7600";
static const char __pyx_k_XL_HWTYPE_VN7610[] = "XL_HWTYPE_VN7610";
static const char __pyx_k_XL_HWTYPE_VN7640[] = "XL_HWTYPE_VN7640";
static const char __pyx_k_XL_HWTYPE_VN8800[] = "XL_HWTYPE_VN8800";
static const char __pyx_k_XL_HWTYPE_VN8900[] = "XL_HWTYPE_VN8900";
static const char __pyx_k_XL_HWTYPE_VN8950[] = "XL_HWTYPE_VN8950";
static const char __pyx_k_XL_HWTYPE_VN8970[] = "XL_HWTYPE_VN8970";
static const char __pyx_k_XL_HWTYPE_VN8972[] = "XL_HWTYPE_VN8972";
static const char __pyx_k_XL_HWTYPE_VT6204[] = "XL_HWTYPE_VT6204";
static const char __pyx_k_XL_HWTYPE_VX0312[] = "XL_HWTYPE_VX0312";
static const char __pyx_k_XL_HWTYPE_VX1121[] = "XL_HWTYPE_VX1121";
static const char __pyx_k_XL_HWTYPE_VX1131[] = "XL_HWTYPE_VX1131";
static const char __pyx_k_acceptanceFilter[] = "acceptanceFilter";
static const char __pyx_k_activeSpeedGrade[] = "activeSpeedGrade";
static const char __pyx_k_channelDirection[] = "channelDirection";
static const char __pyx_k_connectedBusType[] = "connectedBusType";
static const char __pyx_k_gdTSSTransmitter[] = "gdTSSTransmitter";
static const char __pyx_k_interfaceVersion[] = "interfaceVersion";
static const char __pyx_k_licInfoArraySize[] = "licInfoArraySize";
static const char __pyx_k_pxlClusterConfig[] = "pxlClusterConfig";
static const char __pyx_k_symbolWindowMask[] = "symbolWindowMask";
static const char __pyx_k_timerChannelMask[] = "timerChannelMask";
static const char __pyx_k_transceiverState[] = "transceiverState";
static const char __pyx_k_CanSetChannelMode[] = "CanSetChannelMode";
static const char __pyx_k_CanSetReceiveMode[] = "CanSetReceiveMode";
static const char __pyx_k_DeactivateChannel[] = "DeactivateChannel";
static const char __pyx_k_FlushReceiveQueue[] = "FlushReceiveQueue";
static const char __pyx_k_GenerateSyncPulse[] = "GenerateSyncPulse";
static const char __pyx_k_SetGlobalTimeSync[] = "SetGlobalTimeSync";
static const char __pyx_k_XL_BUS_TYPE_J1708[] = "XL_BUS_TYPE_J1708";
static const char __pyx_k_XL_CAN_EXT_MSG_ID[] = "XL_CAN_EXT_MSG_ID";
static const char __pyx_k_XL_ERR_NO_LICENSE[] = "XL_ERR_NO_LICENSE";
static const char __pyx_k_XL_FR_FILTER_PASS[] = "XL_FR_FILTER_PASS";
static const char __pyx_k_XL_FR_MODE_NORMAL[] = "XL_FR_MODE_NORMAL";
static const char __pyx_k_XL_FR_MODE_WAKEUP[] = "XL_FR_MODE_WAKEUP";
static const char __pyx_k_XL_FR_START_CYCLE[] = "XL_FR_START_CYCLE";
static const char __pyx_k_XL_FR_STATUS_HALT[] = "XL_FR_STATUS_HALT";
static const char __pyx_k_XL_HWTYPE_VIRTUAL[] = "XL_HWTYPE_VIRTUAL";
static const char __pyx_k_XL_HWTYPE_VN5610A[] = "XL_HWTYPE_VN5610A";
static const char __pyx_k_XL_LIN_MSGFLAG_TX[] = "XL_LIN_MSGFLAG_TX";
static const char __pyx_k_busGuardianEnable[] = "busGuardianEnable";
static const char __pyx_k_filterChannelMask[] = "filterChannelMask";
static const char __pyx_k_pAcceptanceFilter[] = "pAcceptanceFilter";
static const char __pyx_k_pMicroPerMacroNom[] = "pMicroPerMacroNom";
static const char __pyx_k_ptimerChannelMask[] = "ptimerChannelMask";
static const char __pyx_k_vOffsetCorrection[] = "vOffsetCorrection";
static const char __pyx_k_xlFrClusterConfig[] = "xlFrClusterConfig";
static const char __pyx_k_CanResetAcceptance[] = "CanResetAcceptance";
static const char __pyx_k_FrSendSymbolWindow[] = "FrSendSymbolWindow";
static const char __pyx_k_FrSetConfiguration[] = "FrSetConfiguration";
static const char __pyx_k_XL_ERR_CMD_TIMEOUT[] = "XL_ERR_CMD_TIMEOUT";
static const char __pyx_k_XL_ERR_EDL_NOT_SET[] = "XL_ERR_EDL_NOT_SET";
static const char __pyx_k_XL_ERR_INVALID_DLC[] = "XL_ERR_INVALID_DLC";
static const char __pyx_k_XL_ERR_INVALID_TAG[] = "XL_ERR_INVALID_TAG";
static const char __pyx_k_XL_FR_ERROR_CC_EDA[] = "XL_FR_ERROR_CC_EDA";
static const char __pyx_k_XL_FR_ERROR_CC_EDB[] = "XL_FR_ERROR_CC_EDB";
static const char __pyx_k_XL_FR_ERROR_CC_MHF[] = "XL_FR_ERROR_CC_MHF";
static const char __pyx_k_XL_FR_FILTER_BLOCK[] = "XL_FR_FILTER_BLOCK";
static const char __pyx_k_XL_FR_STATUS_READY[] = "XL_FR_STATUS_READY";
static const char __pyx_k_XL_FR_TX_MODE_NONE[] = "XL_FR_TX_MODE_NONE";
static const char __pyx_k_XL_HWTYPE_CANCARDX[] = "XL_HWTYPE_CANCARDX";
static const char __pyx_k_XL_HWTYPE_CANCARDY[] = "XL_HWTYPE_CANCARDY";
static const char __pyx_k_XL_HWTYPE_IPCL8800[] = "XL_HWTYPE_IPCL8800";
static const char __pyx_k_XL_HWTYPE_IPCLIENT[] = "XL_HWTYPE_IPCLIENT";
static const char __pyx_k_XL_HWTYPE_IPSERVER[] = "XL_HWTYPE_IPSERVER";
static const char __pyx_k_XL_SET_TIMESYNC_ON[] = "XL_SET_TIMESYNC_ON";
static const char __pyx_k_arbitrationBitRate[] = "arbitrationBitRate";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_gColdStartAttempts[] = "gColdStartAttempts";
static const char __pyx_k_gNumberOfMinislots[] = "gNumberOfMinislots";
static const char __pyx_k_pRateCorrectionOut[] = "pRateCorrectionOut";
static const char __pyx_k_pSingleSlotEnabled[] = "pSingleSlotEnabled";
static const char __pyx_k_pxlFrChannelConfig[] = "pxlFrChannelConfig";
static const char __pyx_k_vExternRateControl[] = "vExternRateControl";
static const char __pyx_k_xlInterfaceVersion[] = "xlInterfaceVersion";
static const char __pyx_k_CanRequestChipState[] = "CanRequestChipState";
static const char __pyx_k_CanSetChannelOutput[] = "CanSetChannelOutput";
static const char __pyx_k_CanSetChannelParams[] = "CanSetChannelParams";
static const char __pyx_k_FrSetupSymbolWindow[] = "FrSetupSymbolWindow";
static const char __pyx_k_XL_A429_MSG_GAP_MAX[] = "XL_A429_MSG_GAP_MAX";
static const char __pyx_k_XL_BUS_TYPE_FLEXRAY[] = "XL_BUS_TYPE_FLEXRAY";
static const char __pyx_k_XL_ERR_CMD_HANDLING[] = "XL_ERR_CMD_HANDLING";
static const char __pyx_k_XL_ERR_HW_NOT_READY[] = "XL_ERR_HW_NOT_READY";
static const char __pyx_k_XL_ERR_INVALID_PORT[] = "XL_ERR_INVALID_PORT";
static const char __pyx_k_XL_ERR_INVALID_SIZE[] = "XL_ERR_INVALID_SIZE";
static const char __pyx_k_XL_ERR_NO_RESOURCES[] = "XL_ERR_NO_RESOURCES";
static const char __pyx_k_XL_ERR_UNKNOWN_FLAG[] = "XL_ERR_UNKNOWN_FLAG";
static const char __pyx_k_XL_FR_ERROR_CC_IIBA[] = "XL_FR_ERROR_CC_IIBA";
static const char __pyx_k_XL_FR_ERROR_CC_IOBA[] = "XL_FR_ERROR_CC_IOBA";
static const char __pyx_k_XL_FR_ERROR_CC_LTVA[] = "XL_FR_ERROR_CC_LTVA";
static const char __pyx_k_XL_FR_ERROR_CC_LTVB[] = "XL_FR_ERROR_CC_LTVB";
static const char __pyx_k_XL_FR_ERROR_CC_PERR[] = "XL_FR_ERROR_CC_PERR";
static const char __pyx_k_XL_FR_ERROR_CC_TABA[] = "XL_FR_ERROR_CC_TABA";
static const char __pyx_k_XL_FR_ERROR_CC_TABB[] = "XL_FR_ERROR_CC_TABB";
static const char __pyx_k_XL_FR_SPY_CHANNEL_A[] = "XL_FR_SPY_CHANNEL_A";
static const char __pyx_k_XL_FR_SPY_CHANNEL_B[] = "XL_FR_SPY_CHANNEL_B";
static const char __pyx_k_XL_FR_STATUS_CONFIG[] = "XL_FR_STATUS_CONFIG";
static const char __pyx_k_XL_FR_SYMBOL_WINDOW[] = "XL_FR_SYMBOL_WINDOW";
static const char __pyx_k_XL_HWTYPE_CANAC2PCI[] = "XL_HWTYPE_CANAC2PCI";
static const char __pyx_k_XL_HWTYPE_CANCARDXL[] = "XL_HWTYPE_CANCARDXL";
static const char __pyx_k_XL_HWTYPE_CANCASEXL[] = "XL_HWTYPE_CANCASEXL";
static const char __pyx_k_XL_HWTYPE_IPSRV8800[] = "XL_HWTYPE_IPSRV8800";
static const char __pyx_k_XL_SET_TIMESYNC_OFF[] = "XL_SET_TIMESYNC_OFF";
static const char __pyx_k_channelCapabilities[] = "channelCapabilities";
static const char __pyx_k_frStartupAttributes[] = "frStartupAttributes";
static const char __pyx_k_gdActionPointOffset[] = "gdActionPointOffset";
static const char __pyx_k_gdWakeupSymbolRxLow[] = "gdWakeupSymbolRxLow";
static const char __pyx_k_gdWakeupSymbolTxLow[] = "gdWakeupSymbolTxLow";
static const char __pyx_k_pDecodingCorrection[] = "pDecodingCorrection";
static const char __pyx_k_pDelayCompensationA[] = "pDelayCompensationA";
static const char __pyx_k_pDelayCompensationB[] = "pDelayCompensationB";
static const char __pyx_k_pKeySlotUsedForSync[] = "pKeySlotUsedForSync";
static const char __pyx_k_specialDeviceStatus[] = "specialDeviceStatus";
static const char __pyx_k_CanSetChannelBitrate[] = "CanSetChannelBitrate";
static const char __pyx_k_FrInitStartupAndSync[] = "FrInitStartupAndSync";
static const char __pyx_k_FrSetTransceiverMode[] = "FrSetTransceiverMode";
static const char __pyx_k_GetReceiveQueueLevel[] = "GetReceiveQueueLevel";
static const char __pyx_k_XL_A429_MSG_GAP_4BIT[] = "XL_A429_MSG_GAP_4BIT";
static const char __pyx_k_XL_BUS_TYPE_ETHERNET[] = "XL_BUS_TYPE_ETHERNET";
static const char __pyx_k_XL_CAN_EV_TAG_TX_MSG[] = "XL_CAN_EV_TAG_TX_MSG";
static const char __pyx_k_XL_CAN_MSG_FLAG_NERR[] = "XL_CAN_MSG_FLAG_NERR";
static const char __pyx_k_XL_ERR_DLL_NOT_FOUND[] = "XL_ERR_DLL_NOT_FOUND";
static const char __pyx_k_XL_ERR_INVALID_CANID[] = "XL_ERR_INVALID_CANID";
static const char __pyx_k_XL_ERR_INVALID_LEVEL[] = "XL_ERR_INVALID_LEVEL";
static const char __pyx_k_XL_ERR_NOT_SUPPORTED[] = "XL_ERR_NOT_SUPPORTED";
static const char __pyx_k_XL_ERR_QUEUE_IS_FULL[] = "XL_ERR_QUEUE_IS_FULL";
static const char __pyx_k_XL_ERR_QUEUE_OVERRUN[] = "XL_ERR_QUEUE_OVERRUN";
static const char __pyx_k_XL_ERR_REQ_NOT_ACCEP[] = "XL_ERR_REQ_NOT_ACCEP";
static const char __pyx_k_XL_ERR_UNEXP_NET_ERR[] = "XL_ERR_UNEXP_NET_ERR";
static const char __pyx_k_XL_ERR_WRONG_COMMAND[] = "XL_ERR_WRONG_COMMAND";
static const char __pyx_k_XL_FR_ERROR_CC_ERROR[] = "XL_FR_ERROR_CC_ERROR";
static const char __pyx_k_XL_FR_ERROR_NIT_SBNA[] = "XL_FR_ERROR_NIT_SBNA";
static const char __pyx_k_XL_FR_ERROR_NIT_SBNB[] = "XL_FR_ERROR_NIT_SBNB";
static const char __pyx_k_XL_FR_ERROR_NIT_SENA[] = "XL_FR_ERROR_NIT_SENA";
static const char __pyx_k_XL_FR_ERROR_NIT_SENB[] = "XL_FR_ERROR_NIT_SENB";
static const char __pyx_k_XL_FR_ERROR_POC_MODE[] = "XL_FR_ERROR_POC_MODE";
static const char __pyx_k_XL_FR_FILTER_TYPE_NF[] = "XL_FR_FILTER_TYPE_NF";
static const char __pyx_k_XL_FR_FRAMEFLAG_SYNC[] = "XL_FR_FRAMEFLAG_SYNC";
static const char __pyx_k_XL_FR_QUEUE_OVERFLOW[] = "XL_FR_QUEUE_OVERFLOW";
static const char __pyx_k_XL_FR_TX_MODE_CYCLIC[] = "XL_FR_TX_MODE_CYCLIC";
static const char __pyx_k_XL_HWTYPE_CANBOARDXL[] = "XL_HWTYPE_CANBOARDXL";
static const char __pyx_k_XL_HWTYPE_CANCARDXLE[] = "XL_HWTYPE_CANCARDXLE";
static const char __pyx_k_XL_HWTYPE_VN1630_LOG[] = "XL_HWTYPE_VN1630_LOG";
static const char __pyx_k_XL_INTERFACE_VERSION[] = "XL_INTERFACE_VERSION";
static const char __pyx_k_compatibleSpeedGrade[] = "compatibleSpeedGrade";
static const char __pyx_k_fpgaCoreCapabilities[] = "fpgaCoreCapabilities";
static const char __pyx_k_frSyncFramesBelowMin[] = "frSyncFramesBelowMin";
static const char __pyx_k_frSyncFramesOverload[] = "frSyncFramesOverload";
static const char __pyx_k_gNumberOfStaticSlots[] = "gNumberOfStaticSlots";
static const char __pyx_k_gPayloadLengthStatic[] = "gPayloadLengthStatic";
static const char __pyx_k_gdWakeupSymbolRxIdle[] = "gdWakeupSymbolRxIdle";
static const char __pyx_k_gdWakeupSymbolTxIdle[] = "gdWakeupSymbolTxIdle";
static const char __pyx_k_maximalSupplyVoltage[] = "maximalSupplyVoltage";
static const char __pyx_k_minimalSupplyVoltage[] = "minimalSupplyVoltage";
static const char __pyx_k_pAllowHaltDueToClock[] = "pAllowHaltDueToClock";
static const char __pyx_k_pClusterDriftDamping[] = "pClusterDriftDamping";
static const char __pyx_k_pMacroInitialOffsetA[] = "pMacroInitialOffsetA";
static const char __pyx_k_pMacroInitialOffsetB[] = "pMacroInitialOffsetB";
static const char __pyx_k_pMicroInitialOffsetA[] = "pMicroInitialOffsetA";
static const char __pyx_k_pMicroInitialOffsetB[] = "pMicroInitialOffsetB";
static const char __pyx_k_pOffsetCorrectionOut[] = "pOffsetCorrectionOut";
static const char __pyx_k_pSamplesPerMicrotick[] = "pSamplesPerMicrotick";
static const char __pyx_k_vAllowPassivToActive[] = "vAllowPassivToActive";
static const char __pyx_k_vExternOffsetControl[] = "vExternOffsetControl";
static const char __pyx_k_CanAddAcceptanceRange[] = "CanAddAcceptanceRange";
static const char __pyx_k_CanFdSetConfiguration[] = "CanFdSetConfiguration";
static const char __pyx_k_CanFlushTransmitQueue[] = "CanFlushTransmitQueue";
static const char __pyx_k_FrSetAcceptanceFilter[] = "FrSetAcceptanceFilter";
static const char __pyx_k_GetRemoteDriverConfig[] = "GetRemoteDriverConfig";
static const char __pyx_k_XL_A429_MSG_CYCLE_MAX[] = "XL_A429_MSG_CYCLE_MAX";
static const char __pyx_k_XL_CAN_TXMSG_FLAG_BRS[] = "XL_CAN_TXMSG_FLAG_BRS";
static const char __pyx_k_XL_CAN_TXMSG_FLAG_EDL[] = "XL_CAN_TXMSG_FLAG_EDL";
static const char __pyx_k_XL_CAN_TXMSG_FLAG_RTR[] = "XL_CAN_TXMSG_FLAG_RTR";
static const char __pyx_k_XL_ERR_BAD_EXE_FORMAT[] = "XL_ERR_BAD_EXE_FORMAT";
static const char __pyx_k_XL_ERR_CHAN_IS_ONLINE[] = "XL_ERR_CHAN_IS_ONLINE";
static const char __pyx_k_XL_ERR_HW_NOT_PRESENT[] = "XL_ERR_HW_NOT_PRESENT";
static const char __pyx_k_XL_ERR_INTERNAL_ERROR[] = "XL_ERR_INTERNAL_ERROR";
static const char __pyx_k_XL_ERR_INVALID_ACCESS[] = "XL_ERR_INVALID_ACCESS";
static const char __pyx_k_XL_ERR_INVALID_HANDLE[] = "XL_ERR_INVALID_HANDLE";
static const char __pyx_k_XL_ERR_QUEUE_IS_EMPTY[] = "XL_ERR_QUEUE_IS_EMPTY";
static const char __pyx_k_XL_ERR_TWICE_REGISTER[] = "XL_ERR_TWICE_REGISTER";
static const char __pyx_k_XL_ERR_WRONG_BUS_TYPE[] = "XL_ERR_WRONG_BUS_TYPE";
static const char __pyx_k_XL_EVENT_FLAG_OVERRUN[] = "XL_EVENT_FLAG_OVERRUN";
static const char __pyx_k_XL_FR_WAKEUP_RESERVED[] = "XL_FR_WAKEUP_RESERVED";
static const char __pyx_k_XL_INVALID_PORTHANDLE[] = "XL_INVALID_PORTHANDLE";
static const char __pyx_k_pAllowPassiveToActive[] = "pAllowPassiveToActive";
static const char __pyx_k_pExternRateCorrection[] = "pExternRateCorrection";
static const char __pyx_k_SetTimerRateAndChannel[] = "SetTimerRateAndChannel";
static const char __pyx_k_XL_A429_MSG_PARITY_ODD[] = "XL_A429_MSG_PARITY_ODD";
static const char __pyx_k_XL_A429_QUEUE_OVERFLOW[] = "XL_A429_QUEUE_OVERFLOW";
static const char __pyx_k_XL_CAN_MSG_FLAG_WAKEUP[] = "XL_CAN_MSG_FLAG_WAKEUP";
static const char __pyx_k_XL_ERR_INVALID_ADDRESS[] = "XL_ERR_INVALID_ADDRESS";
static const char __pyx_k_XL_ERR_NOT_IMPLEMENTED[] = "XL_ERR_NOT_IMPLEMENTED";
static const char __pyx_k_XL_ERR_PORT_IS_OFFLINE[] = "XL_ERR_PORT_IS_OFFLINE";
static const char __pyx_k_XL_ERR_TX_NOT_POSSIBLE[] = "XL_ERR_TX_NOT_POSSIBLE";
static const char __pyx_k_XL_ERR_WRONG_CHIP_TYPE[] = "XL_ERR_WRONG_CHIP_TYPE";
static const char __pyx_k_XL_ERR_WRONG_PARAMETER[] = "XL_ERR_WRONG_PARAMETER";
static const char __pyx_k_XL_FR_ERROR_POC_ACTIVE[] = "XL_FR_ERROR_POC_ACTIVE";
static const char __pyx_k_XL_FR_FILTER_CHANNEL_A[] = "XL_FR_FILTER_CHANNEL_A";
static const char __pyx_k_XL_FR_FILTER_CHANNEL_B[] = "XL_FR_FILTER_CHANNEL_B";
static const char __pyx_k_XL_FR_FILTER_TYPE_DATA[] = "XL_FR_FILTER_TYPE_DATA";
static const char __pyx_k_XL_FR_MODE_COLD_NORMAL[] = "XL_FR_MODE_COLD_NORMAL";
static const char __pyx_k_XL_FR_WAKEUP_UNDEFINED[] = "XL_FR_WAKEUP_UNDEFINED";
static const char __pyx_k_channelBusCapabilities[] = "channelBusCapabilities";
static const char __pyx_k_clockCorrFailedCounter[] = "clockCorrFailedCounter";
static const char __pyx_k_dominantRecessiveDelay[] = "dominantRecessiveDelay";
static const char __pyx_k_gOffsetCorrectionStart[] = "gOffsetCorrectionStart";
static const char __pyx_k_gdDynamicSlotIdlePhase[] = "gdDynamicSlotIdlePhase";
static const char __pyx_k_gdWakeupSymbolRxWindow[] = "gdWakeupSymbolRxWindow";
static const char __pyx_k_pKeySlotUsedForStartup[] = "pKeySlotUsedForStartup";
static const char __pyx_k_pdAcceptedStartupRange[] = "pdAcceptedStartupRange";
static const char __pyx_k_recessiveDominantDelay[] = "recessiveDominantDelay";
static const char __pyx_k_vClockCorrectionFailed[] = "vClockCorrectionFailed";
static const char __pyx_k_CanSetChannelAcceptance[] = "CanSetChannelAcceptance";
static const char __pyx_k_CanSetChannelParamsC200[] = "CanSetChannelParamsC200";
static const char __pyx_k_XL_A429_MSG_FLAG_CYCLIC[] = "XL_A429_MSG_FLAG_CYCLIC";
static const char __pyx_k_XL_A429_MSG_GAP_DEFAULT[] = "XL_A429_MSG_GAP_DEFAULT";
static const char __pyx_k_XL_A429_MSG_PARITY_EVEN[] = "XL_A429_MSG_PARITY_EVEN";
static const char __pyx_k_XL_ACTIVATE_RESET_CLOCK[] = "XL_ACTIVATE_RESET_CLOCK";
static const char __pyx_k_XL_CAN_MSG_FLAG_OVERRUN[] = "XL_CAN_MSG_FLAG_OVERRUN";
static const char __pyx_k_XL_ERR_ETH_RESET_FAILED[] = "XL_ERR_ETH_RESET_FAILED";
static const char __pyx_k_XL_ERR_NO_DATA_DETECTED[] = "XL_ERR_NO_DATA_DETECTED";
static const char __pyx_k_XL_ERR_STREAM_NOT_FOUND[] = "XL_ERR_STREAM_NOT_FOUND";
static const char __pyx_k_XL_FR_ERROR_NIT_FAILURE[] = "XL_FR_ERROR_NIT_FAILURE";
static const char __pyx_k_XL_FR_ERROR_POC_PASSIVE[] = "XL_FR_ERROR_POC_PASSIVE";
static const char __pyx_k_XL_FR_FRAMEFLAG_STARTUP[] = "XL_FR_FRAMEFLAG_STARTUP";
static const char __pyx_k_XL_FR_TRANCEIVER_STATUS[] = "XL_FR_TRANCEIVER_STATUS";
static const char __pyx_k_XL_INTERFACE_VERSION_V2[] = "XL_INTERFACE_VERSION_V2";
static const char __pyx_k_XL_INTERFACE_VERSION_V3[] = "XL_INTERFACE_VERSION_V3";
static const char __pyx_k_XL_INTERFACE_VERSION_V4[] = "XL_INTERFACE_VERSION_V4";
static const char __pyx_k_XL_LIN_MSGFLAG_CRCERROR[] = "XL_LIN_MSGFLAG_CRCERROR";
static const char __pyx_k_applicationNotification[] = "applicationNotification";
static const char __pyx_k_pExternOffsetCorrection[] = "pExternOffsetCorrection";
static const char __pyx_k_CanRemoveAcceptanceRange[] = "CanRemoveAcceptanceRange";
static const char __pyx_k_CanSetChannelTransceiver[] = "CanSetChannelTransceiver";
static const char __pyx_k_XL_CAN_TXMSG_FLAG_WAKEUP[] = "XL_CAN_TXMSG_FLAG_WAKEUP";
static const char __pyx_k_XL_ERR_CONNECTION_BROKEN[] = "XL_ERR_CONNECTION_BROKEN";
static const char __pyx_k_XL_ERR_CONNECTION_CLOSED[] = "XL_ERR_CONNECTION_CLOSED";
static const char __pyx_k_XL_ERR_CONNECTION_FAILED[] = "XL_ERR_CONNECTION_FAILED";
static const char __pyx_k_XL_ERR_RESERVED_NOT_ZERO[] = "XL_ERR_RESERVED_NOT_ZERO";
static const char __pyx_k_XL_FR_FRAMEFLAG_TXACK_SS[] = "XL_FR_FRAMEFLAG_TXACK_SS";
static const char __pyx_k_XL_FR_STATUS_WAKEUP_SEND[] = "XL_FR_STATUS_WAKEUP_SEND";
static const char __pyx_k_XL_FR_SYMBOL_STATUS_MTSA[] = "XL_FR_SYMBOL_STATUS_MTSA";
static const char __pyx_k_XL_FR_SYMBOL_STATUS_MTSB[] = "XL_FR_SYMBOL_STATUS_MTSB";
static const char __pyx_k_XL_FR_SYMBOL_STATUS_SBSA[] = "XL_FR_SYMBOL_STATUS_SBSA";
static const char __pyx_k_XL_FR_SYMBOL_STATUS_SBSB[] = "XL_FR_SYMBOL_STATUS_SBSB";
static const char __pyx_k_XL_FR_SYMBOL_STATUS_SESA[] = "XL_FR_SYMBOL_STATUS_SESA";
static const char __pyx_k_XL_FR_SYMBOL_STATUS_SESB[] = "XL_FR_SYMBOL_STATUS_SESB";
static const char __pyx_k_XL_FR_SYMBOL_STATUS_TCSA[] = "XL_FR_SYMBOL_STATUS_TCSA";
static const char __pyx_k_XL_FR_SYMBOL_STATUS_TCSB[] = "XL_FR_SYMBOL_STATUS_TCSB";
static const char __pyx_k_XL_FR_WAKEUP_TRANSMITTED[] = "XL_FR_WAKEUP_TRANSMITTED";
static const char __pyx_k_XL_HWTYPE_CANBOARDXL_PXI[] = "XL_HWTYPE_CANBOARDXL_PXI";
static const char __pyx_k_frClockCorrectionFailure[] = "frClockCorrectionFailure";
static const char __pyx_k_pMaxPayloadLengthDynamic[] = "pMaxPayloadLengthDynamic";
static const char __pyx_k_FrGetChannelConfiguration[] = "FrGetChannelConfiguration";
static const char __pyx_k_XL_ERR_CANNOT_OPEN_DRIVER[] = "XL_ERR_CANNOT_OPEN_DRIVER";
static const char __pyx_k_XL_ERR_INVALID_CHAN_INDEX[] = "XL_ERR_INVALID_CHAN_INDEX";
static const char __pyx_k_XL_FR_ERROR_POC_COMM_HALT[] = "XL_FR_ERROR_POC_COMM_HALT";
static const char __pyx_k_XL_FR_FRAMEFLAG_NULLFRAME[] = "XL_FR_FRAMEFLAG_NULLFRAME";
static const char __pyx_k_XL_FR_FRAMEFLAG_REQ_TXACK[] = "XL_FR_FRAMEFLAG_REQ_TXACK";
static const char __pyx_k_XL_FR_STATUS_MONITOR_MODE[] = "XL_FR_STATUS_MONITOR_MODE";
static const char __pyx_k_XL_FR_TX_MODE_SINGLE_SHOT[] = "XL_FR_TX_MODE_SINGLE_SHOT";
static const char __pyx_k_XL_FR_WAKEUP_RECEIVED_WUP[] = "XL_FR_WAKEUP_RECEIVED_WUP";
static const char __pyx_k_XL_SET_TIMESYNC_NO_CHANGE[] = "XL_SET_TIMESYNC_NO_CHANGE";
static const char __pyx_k_XL_A429_EV_RX_ERROR_PARITY[] = "XL_A429_EV_RX_ERROR_PARITY";
static const char __pyx_k_XL_A429_MSG_BITRATE_RX_MAX[] = "XL_A429_MSG_BITRATE_RX_MAX";
static const char __pyx_k_XL_A429_MSG_BITRATE_RX_MIN[] = "XL_A429_MSG_BITRATE_RX_MIN";
static const char __pyx_k_XL_A429_MSG_CHANNEL_DIR_RX[] = "XL_A429_MSG_CHANNEL_DIR_RX";
static const char __pyx_k_XL_A429_MSG_CHANNEL_DIR_TX[] = "XL_A429_MSG_CHANNEL_DIR_TX";
static const char __pyx_k_XL_A429_MSG_PARITY_DEFAULT[] = "XL_A429_MSG_PARITY_DEFAULT";
static const char __pyx_k_XL_CAN_MSG_FLAG_RESERVED_1[] = "XL_CAN_MSG_FLAG_RESERVED_1";
static const char __pyx_k_XL_CAN_MSG_FLAG_TX_REQUEST[] = "XL_CAN_MSG_FLAG_TX_REQUEST";
static const char __pyx_k_XL_CAN_TXMSG_FLAG_HIGHPRIO[] = "XL_CAN_TXMSG_FLAG_HIGHPRIO";
static const char __pyx_k_XL_ERR_INIT_ACCESS_MISSING[] = "XL_ERR_INIT_ACCESS_MISSING";
static const char __pyx_k_XL_ERR_INSUFFICIENT_BUFFER[] = "XL_ERR_INSUFFICIENT_BUFFER";
static const char __pyx_k_XL_ERR_INVALID_STREAM_NAME[] = "XL_ERR_INVALID_STREAM_NAME";
static const char __pyx_k_XL_ERR_INVALID_USER_BUFFER[] = "XL_ERR_INVALID_USER_BUFFER";
static const char __pyx_k_XL_ERR_NO_SYSTEM_RESOURCES[] = "XL_ERR_NO_SYSTEM_RESOURCES";
static const char __pyx_k_XL_FR_FRAMEFLAG_EMPTY_SLOT[] = "XL_FR_FRAMEFLAG_EMPTY_SLOT";
static const char __pyx_k_XL_FR_STATUS_ABORT_STARTUP[] = "XL_FR_STATUS_ABORT_STARTUP";
static const char __pyx_k_XL_FR_STATUS_COLDSTART_GAP[] = "XL_FR_STATUS_COLDSTART_GAP";
static const char __pyx_k_XL_FR_STATUS_NORMAL_ACTIVE[] = "XL_FR_STATUS_NORMAL_ACTIVE";
static const char __pyx_k_XL_FR_STATUS_WAKEUP_DETECT[] = "XL_FR_STATUS_WAKEUP_DETECT";
static const char __pyx_k_XL_FR_STATUS_WAKEUP_LISTEN[] = "XL_FR_STATUS_WAKEUP_LISTEN";
static const char __pyx_k_XL_FR_WAKEUP_COLLISION_WUP[] = "XL_FR_WAKEUP_COLLISION_WUP";
static const char __pyx_k_XL_A429_MSG_FLAG_ON_REQUEST[] = "XL_A429_MSG_FLAG_ON_REQUEST";
static const char __pyx_k_XL_A429_MSG_PARITY_DISABLED[] = "XL_A429_MSG_PARITY_DISABLED";
static const char __pyx_k_XL_CAN_MSG_FLAG_ERROR_FRAME[] = "XL_CAN_MSG_FLAG_ERROR_FRAME";
static const char __pyx_k_XL_CAN_MSG_FLAG_SRR_BIT_DOM[] = "XL_CAN_MSG_FLAG_SRR_BIT_DOM";
static const char __pyx_k_XL_ERR_INVALID_CHANNEL_MASK[] = "XL_ERR_INVALID_CHANNEL_MASK";
static const char __pyx_k_XL_ERR_INVALID_RESERVED_FLD[] = "XL_ERR_INVALID_RESERVED_FLD";
static const char __pyx_k_XL_ERR_STREAM_NOT_CONNECTED[] = "XL_ERR_STREAM_NOT_CONNECTED";
static const char __pyx_k_XL_FR_FILTER_TYPE_FILLUP_NF[] = "XL_FR_FILTER_TYPE_FILLUP_NF";
static const char __pyx_k_XL_FR_FRAMEFLAG_FR_RESERVED[] = "XL_FR_FRAMEFLAG_FR_RESERVED";
static const char __pyx_k_XL_FR_FRAMEFLAG_NEW_DATA_TX[] = "XL_FR_FRAMEFLAG_NEW_DATA_TX";
static const char __pyx_k_XL_FR_FRAMEFLAG_TX_CONFLICT[] = "XL_FR_FRAMEFLAG_TX_CONFLICT";
static const char __pyx_k_XL_FR_STATUS_COLDSTART_JOIN[] = "XL_FR_STATUS_COLDSTART_JOIN";
static const char __pyx_k_XL_FR_STATUS_DEFAULT_CONFIG[] = "XL_FR_STATUS_DEFAULT_CONFIG";
static const char __pyx_k_XL_FR_STATUS_NORMAL_PASSIVE[] = "XL_FR_STATUS_NORMAL_PASSIVE";
static const char __pyx_k_XL_FR_STATUS_WAKEUP_STANDBY[] = "XL_FR_STATUS_WAKEUP_STANDBY";
static const char __pyx_k_externalClockCorrectionMode[] = "externalClockCorrectionMode";
static const char __pyx_k_gdMiniSlotActionPointOffset[] = "gdMiniSlotActionPointOffset";
static const char __pyx_k_XL_A429_MSG_BITRATE_FAST_MAX[] = "XL_A429_MSG_BITRATE_FAST_MAX";
static const char __pyx_k_XL_A429_MSG_BITRATE_FAST_MIN[] = "XL_A429_MSG_BITRATE_FAST_MIN";
static const char __pyx_k_XL_A429_MSG_BITRATE_SLOW_MAX[] = "XL_A429_MSG_BITRATE_SLOW_MAX";
static const char __pyx_k_XL_A429_MSG_BITRATE_SLOW_MIN[] = "XL_A429_MSG_BITRATE_SLOW_MIN";
static const char __pyx_k_XL_CAN_MSG_FLAG_REMOTE_FRAME[] = "XL_CAN_MSG_FLAG_REMOTE_FRAME";
static const char __pyx_k_XL_CAN_MSG_FLAG_TX_COMPLETED[] = "XL_CAN_MSG_FLAG_TX_COMPLETED";
static const char __pyx_k_XL_ERR_INVALID_FDFLAG_MODE20[] = "XL_ERR_INVALID_FDFLAG_MODE20";
static const char __pyx_k_XL_ERR_NOTIFY_ALREADY_ACTIVE[] = "XL_ERR_NOTIFY_ALREADY_ACTIVE";
static const char __pyx_k_XL_FR_FRAMEFLAG_SYNTAX_ERROR[] = "XL_FR_FRAMEFLAG_SYNTAX_ERROR";
static const char __pyx_k_XL_FR_MODE_COLDSTART_LEADING[] = "XL_FR_MODE_COLDSTART_LEADING";
static const char __pyx_k_XL_FR_PAYLOAD_INCREMENT_8BIT[] = "XL_FR_PAYLOAD_INCREMENT_8BIT";
static const char __pyx_k_XL_FR_PAYLOAD_INCREMENT_NONE[] = "XL_FR_PAYLOAD_INCREMENT_NONE";
static const char __pyx_k_XL_FR_STATUS_STARTUP_PREPARE[] = "XL_FR_STATUS_STARTUP_PREPARE";
static const char __pyx_k_XL_FR_STATUS_STARTUP_SUCCESS[] = "XL_FR_STATUS_STARTUP_SUCCESS";
static const char __pyx_k_XL_FR_TRANSCEIVER_MODE_SLEEP[] = "XL_FR_TRANSCEIVER_MODE_SLEEP";
static const char __pyx_k_XL_FR_WAKEUP_RECEIVED_HEADER[] = "XL_FR_WAKEUP_RECEIVED_HEADER";
static const char __pyx_k_XL_NOTIFY_REASON_PORT_CLOSED[] = "XL_NOTIFY_REASON_PORT_CLOSED";
static const char __pyx_k_channelBusActiveCapabilities[] = "channelBusActiveCapabilities";
static const char __pyx_k_currentlyAvailableTimestamps[] = "currentlyAvailableTimestamps";
static const char __pyx_k_XL_A429_EV_RX_ERROR_CODING_RZ[] = "XL_A429_EV_RX_ERROR_CODING_RZ";
static const char __pyx_k_XL_A429_EV_TX_MSG_CTRL_CYCLIC[] = "XL_A429_EV_TX_MSG_CTRL_CYCLIC";
static const char __pyx_k_XL_BUS_PARAMS_CANOPMODE_CAN20[] = "XL_BUS_PARAMS_CANOPMODE_CAN20";
static const char __pyx_k_XL_BUS_PARAMS_CANOPMODE_CANFD[] = "XL_BUS_PARAMS_CANOPMODE_CANFD";
static const char __pyx_k_XL_ERR_ETH_PHY_CONFIG_ABORTED[] = "XL_ERR_ETH_PHY_CONFIG_ABORTED";
static const char __pyx_k_XL_ERR_ETH_SET_CONFIG_DELAYED[] = "XL_ERR_ETH_SET_CONFIG_DELAYED";
static const char __pyx_k_XL_FR_FRAMEFLAG_CONTENT_ERROR[] = "XL_FR_FRAMEFLAG_CONTENT_ERROR";
static const char __pyx_k_XL_FR_FRAMEFLAG_RX_UNEXPECTED[] = "XL_FR_FRAMEFLAG_RX_UNEXPECTED";
static const char __pyx_k_XL_FR_PAYLOAD_INCREMENT_16BIT[] = "XL_FR_PAYLOAD_INCREMENT_16BIT";
static const char __pyx_k_XL_FR_PAYLOAD_INCREMENT_32BIT[] = "XL_FR_PAYLOAD_INCREMENT_32BIT";
static const char __pyx_k_XL_FR_SPY_FRAMEFLAG_BUS_ERROR[] = "XL_FR_SPY_FRAMEFLAG_BUS_ERROR";
static const char __pyx_k_XL_FR_STATUS_COLDSTART_LISTEN[] = "XL_FR_STATUS_COLDSTART_LISTEN";
static const char __pyx_k_XL_FR_TRANSCEIVER_MODE_NORMAL[] = "XL_FR_TRANSCEIVER_MODE_NORMAL";
static const char __pyx_k_XL_FR_WAKEUP_COLLISION_HEADER[] = "XL_FR_WAKEUP_COLLISION_HEADER";
static const char __pyx_k_XL_A429_MSG_FLAG_DELETE_CYCLIC[] = "XL_A429_MSG_FLAG_DELETE_CYCLIC";
static const char __pyx_k_XL_A429_RX_FIFO_QUEUE_SIZE_MAX[] = "XL_A429_RX_FIFO_QUEUE_SIZE_MAX";
static const char __pyx_k_XL_A429_RX_FIFO_QUEUE_SIZE_MIN[] = "XL_A429_RX_FIFO_QUEUE_SIZE_MIN";
static const char __pyx_k_XL_ERR_ETH_UNSUPPORTED_FEATURE[] = "XL_ERR_ETH_UNSUPPORTED_FEATURE";
static const char __pyx_k_XL_FR_ERROR_CLOCK_CORR_FAILURE[] = "XL_FR_ERROR_CLOCK_CORR_FAILURE";
static const char __pyx_k_XL_FR_MODE_COLDSTART_FOLLOWING[] = "XL_FR_MODE_COLDSTART_FOLLOWING";
static const char __pyx_k_XL_FR_TRANSCEIVER_MODE_STANDBY[] = "XL_FR_TRANSCEIVER_MODE_STANDBY";
static const char __pyx_k_XL_FR_WAKEUP_COLLISION_UNKNOWN[] = "XL_FR_WAKEUP_COLLISION_UNKNOWN";
static const char __pyx_k_gNetworkManagementVectorLength[] = "gNetworkManagementVectorLength";
static const char __pyx_k_XL_A429_EV_RX_ERROR_BITRATE_LOW[] = "XL_A429_EV_RX_ERROR_BITRATE_LOW";
static const char __pyx_k_XL_A429_EV_RX_ERROR_DUTY_FACTOR[] = "XL_A429_EV_RX_ERROR_DUTY_FACTOR";
static const char __pyx_k_XL_FR_CHANNEL_CFG_MODE_COMBINED[] = "XL_FR_CHANNEL_CFG_MODE_COMBINED";
static const char __pyx_k_XL_FR_ERROR_MAX_RATE_CORRECTION[] = "XL_FR_ERROR_MAX_RATE_CORRECTION_REACHED";
static const char __pyx_k_XL_FR_MODE_WAKEUP_AND_COLDSTART[] = "XL_FR_MODE_WAKEUP_AND_COLDSTART_LEADING";
static const char __pyx_k_XL_FR_STATUS_INTEGRATION_LISTEN[] = "XL_FR_STATUS_INTEGRATION_LISTEN";
static const char __pyx_k_gMaxWithoutClockCorrectionFatal[] = "gMaxWithoutClockCorrectionFatal";
static const char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'bitRate'";
static const char __pyx_k_XL_A429_EV_RX_ERROR_AVG_BIT_LENG[] = "XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH";
static const char __pyx_k_XL_A429_EV_RX_ERROR_BITRATE_HIGH[] = "XL_A429_EV_RX_ERROR_BITRATE_HIGH";
static const char __pyx_k_XL_A429_EV_RX_ERROR_FRAME_FORMAT[] = "XL_A429_EV_RX_ERROR_FRAME_FORMAT";
static const char __pyx_k_XL_A429_EV_RX_ERROR_GAP_VIOLATIO[] = "XL_A429_EV_RX_ERROR_GAP_VIOLATION";
static const char __pyx_k_XL_A429_EV_TX_ERROR_ACCESS_DENIE[] = "XL_A429_EV_TX_ERROR_ACCESS_DENIED";
static const char __pyx_k_XL_A429_EV_TX_ERROR_TRANSMISSION[] = "XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR";
static const char __pyx_k_XL_A429_EV_TX_MSG_CTRL_ON_REQUES[] = "XL_A429_EV_TX_MSG_CTRL_ON_REQUEST";
static const char __pyx_k_XL_A429_MSG_AUTO_BAUDRATE_DISABL[] = "XL_A429_MSG_AUTO_BAUDRATE_DISABLED";
static const char __pyx_k_XL_A429_MSG_AUTO_BAUDRATE_ENABLE[] = "XL_A429_MSG_AUTO_BAUDRATE_ENABLED";
static const char __pyx_k_XL_ERR_ETH_MAC_ACTIVATION_FAILED[] = "XL_ERR_ETH_MAC_ACTIVATION_FAILED";
static const char __pyx_k_XL_ERR_ETH_PHY_ACTIVATION_FAILED[] = "XL_ERR_ETH_PHY_ACTIVATION_FAILED";
static const char __pyx_k_XL_FR_CHANNEL_CFG_MODE_ASYNCHRON[] = "XL_FR_CHANNEL_CFG_MODE_ASYNCHRONOUS";
static const char __pyx_k_XL_FR_CHANNEL_CFG_MODE_SYNCHRONO[] = "XL_FR_CHANNEL_CFG_MODE_SYNCHRONOUS";
static const char __pyx_k_XL_FR_CHANNEL_CFG_STATUS_CHANNEL[] = "XL_FR_CHANNEL_CFG_STATUS_CHANNEL_ACTIVATED";
static const char __pyx_k_XL_FR_CHANNEL_CFG_STATUS_INIT_AP[] = "XL_FR_CHANNEL_CFG_STATUS_INIT_APP_PRESENT";
static const char __pyx_k_XL_FR_CHANNEL_CFG_STATUS_VALID_C[] = "XL_FR_CHANNEL_CFG_STATUS_VALID_CFG_MODE";
static const char __pyx_k_XL_FR_ERROR_MAX_OFFSET_CORRECTIO[] = "XL_FR_ERROR_MAX_OFFSET_CORRECTION_REACHED";
static const char __pyx_k_XL_FR_ERROR_MISSING_OFFSET_CORRE[] = "XL_FR_ERROR_MISSING_OFFSET_CORRECTION";
static const char __pyx_k_XL_FR_ERROR_MISSING_RATE_CORRECT[] = "XL_FR_ERROR_MISSING_RATE_CORRECTION";
static const char __pyx_k_XL_FR_ERROR_SYNC_FRAMES_BELOWMIN[] = "XL_FR_ERROR_SYNC_FRAMES_BELOWMIN";
static const char __pyx_k_XL_FR_ERROR_SYNC_FRAMES_OVERLOAD[] = "XL_FR_ERROR_SYNC_FRAMES_OVERLOAD";
static const char __pyx_k_XL_FR_FRAMEFLAG_DATA_UPDATE_LOST[] = "XL_FR_FRAMEFLAG_DATA_UPDATE_LOST";
static const char __pyx_k_XL_FR_FRAMEFLAG_FRAME_TRANSMITTE[] = "XL_FR_FRAMEFLAG_FRAME_TRANSMITTED";
static const char __pyx_k_XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE[] = "XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE";
static const char __pyx_k_XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VI[] = "XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION";
static const char __pyx_k_XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ER[] = "XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ERROR";
static const char __pyx_k_XL_FR_SPY_FRAMEFLAG_FRAMING_ERRO[] = "XL_FR_SPY_FRAMEFLAG_FRAMING_ERROR";
static const char __pyx_k_XL_FR_SPY_FRAMEFLAG_HEADER_CRC_E[] = "XL_FR_SPY_FRAMEFLAG_HEADER_CRC_ERROR";
static const char __pyx_k_XL_FR_STATUS_COLDSTART_COLLISION[] = "XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION";
static const char __pyx_k_XL_FR_STATUS_COLDSTART_CONSISTEN[] = "XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK";
static const char __pyx_k_XL_FR_STATUS_INITIALIZE_SCHEDULE[] = "XL_FR_STATUS_INITIALIZE_SCHEDULE";
static const char __pyx_k_XL_FR_STATUS_INTEGRATION_COLDSTA[] = "XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK";
static const char __pyx_k_XL_FR_STATUS_INTEGRATION_CONSIST[] = "XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK";
static const char __pyx_k_XL_FR_TRANSCEIVER_MODE_RECEIVE_O[] = "XL_FR_TRANSCEIVER_MODE_RECEIVE_ONLY";
static const char __pyx_k_XL_HWTYPE_CANCASEXL_LOG_OBSOLETE[] = "XL_HWTYPE_CANCASEXL_LOG_OBSOLETE";
static const char __pyx_k_XL_NOTIFY_REASON_CHANNEL_ACTIVAT[] = "XL_NOTIFY_REASON_CHANNEL_ACTIVATION";
static const char __pyx_k_XL_NOTIFY_REASON_CHANNEL_DEACTIV[] = "XL_NOTIFY_REASON_CHANNEL_DEACTIVATION";
static const char __pyx_k_gMaxWithoutClockCorrectionPassiv[] = "gMaxWithoutClockCorrectionPassive";
static const char __pyx_k_XL_FR_MODE_WAKEUP_AND_COLDSTART_2[] = "XL_FR_MODE_WAKEUP_AND_COLDSTART_FOLLOWING";
static const char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'sjw'";
static const char __pyx_k_No_value_specified_for_struct_at_3[] = "No value specified for struct attribute 'tseg1'";
static const char __pyx_k_No_value_specified_for_struct_at_4[] = "No value specified for struct attribute 'tseg2'";
static const char __pyx_k_No_value_specified_for_struct_at_5[] = "No value specified for struct attribute 'sam'";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_6vxlapi_OpenDriver(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6vxlapi_2CloseDriver(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6vxlapi_4GetChannelMask(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_hwType, int __pyx_v_hwIndex, int __pyx_v_hwChannel); /* proto */
static PyObject *__pyx_pf_6vxlapi_6GetChannelIndex(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_hwType, int __pyx_v_hwIndex, int __pyx_v_hwChannel); /* proto */
static PyObject *__pyx_pf_6vxlapi_8OpenPort(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_portHandle, char *__pyx_v_appName, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_permissionMask, unsigned int __pyx_v_rxQueueSize, unsigned int __pyx_v_xlInterfaceVersion, unsigned int __pyx_v_busType); /* proto */
static PyObject *__pyx_pf_6vxlapi_10ClosePort(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle); /* proto */
static PyObject *__pyx_pf_6vxlapi_12SetTimerRate(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, unsigned long __pyx_v_timerRate); /* proto */
static PyObject *__pyx_pf_6vxlapi_14SetTimerRateAndChannel(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, PyObject *__pyx_v_ptimerChannelMask, PyObject *__pyx_v_ptimerRate); /* proto */
static PyObject *__pyx_pf_6vxlapi_16CanSetChannelBitrate(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned long __pyx_v_bitrate); /* proto */
static PyObject *__pyx_pf_6vxlapi_18CanSetChannelParams(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pChipParams); /* proto */
static PyObject *__pyx_pf_6vxlapi_20ActivateChannel(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_busType, unsigned int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_6vxlapi_22DeactivateChannel(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask); /* proto */
static PyObject *__pyx_pf_6vxlapi_24CanTransmit(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_messageCount, PyObject *__pyx_v_pMessage); /* proto */
static PyObject *__pyx_pf_6vxlapi_26CanFlushTransmitQueue(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask); /* proto */
static PyObject *__pyx_pf_6vxlapi_28CanRequestChipState(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask); /* proto */
static PyObject *__pyx_pf_6vxlapi_30Receive(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, PyObject *__pyx_v_pEventCount, PyObject *__pyx_v_pEventList, PyObject *__pyx_v_pEventString); /* proto */
static PyObject *__pyx_pf_6vxlapi_32FlushReceiveQueue(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle); /* proto */
static PyObject *__pyx_pf_6vxlapi_34GetReceiveQueueLevel(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, PyObject *__pyx_v_plevel); /* proto */
static PyObject *__pyx_pf_6vxlapi_36SetNotification(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, PyObject *__pyx_v_pXlHandle, int __pyx_v_queueLevel); /* proto */
static PyObject *__pyx_pf_6vxlapi_38ResetClock(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle); /* proto */
static PyObject *__pyx_pf_6vxlapi_40CanSetChannelMode(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, int __pyx_v_tx, int __pyx_v_txrq); /* proto */
static PyObject *__pyx_pf_6vxlapi_42CanSetChannelOutput(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned char __pyx_v_mode); /* proto */
static PyObject *__pyx_pf_6vxlapi_44CanSetReceiveMode(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, unsigned char __pyx_v_ErrorFrame, unsigned char __pyx_v_ChipState); /* proto */
static PyObject *__pyx_pf_6vxlapi_46CanSetChannelParamsC200(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned char __pyx_v_btr0, unsigned char __pyx_v_btr1); /* proto */
static PyObject *__pyx_pf_6vxlapi_48CanSetChannelTransceiver(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, int __pyx_v_type, int __pyx_v_lineMode, int __pyx_v_resNet); /* proto */
static PyObject *__pyx_pf_6vxlapi_50CanSetChannelAcceptance(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned long __pyx_v_code, unsigned long __pyx_v_mask, unsigned int __pyx_v_idRange); /* proto */
static PyObject *__pyx_pf_6vxlapi_52CanAddAcceptanceRange(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned long __pyx_v_first_id, unsigned long __pyx_v_last_id); /* proto */
static PyObject *__pyx_pf_6vxlapi_54CanRemoveAcceptanceRange(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned long __pyx_v_first_id, unsigned long __pyx_v_last_id); /* proto */
static PyObject *__pyx_pf_6vxlapi_56CanResetAcceptance(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_idRange); /* proto */
static PyObject *__pyx_pf_6vxlapi_58SetGlobalTimeSync(CYTHON_UNUSED PyObject *__pyx_self, unsigned long __pyx_v_newValue, PyObject *__pyx_v_pPreviousValue); /* proto */
static PyObject *__pyx_pf_6vxlapi_60GetSyncTime(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, PyObject *__pyx_v_pTime); /* proto */
static PyObject *__pyx_pf_6vxlapi_62GetChannelTime(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pChannelTime); /* proto */
static PyObject *__pyx_pf_6vxlapi_64GenerateSyncPulse(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask); /* proto */
static PyObject *__pyx_pf_6vxlapi_66GetErrorString(CYTHON_UNUSED PyObject *__pyx_self, XLstatus __pyx_v_err); /* proto */
static PyObject *__pyx_pf_6vxlapi_68GetApplConfig(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_appName, unsigned int __pyx_v_appChannel, PyObject *__pyx_v_pHwType, PyObject *__pyx_v_pHwIndex, PyObject *__pyx_v_pHwChannel, unsigned int __pyx_v_busType); /* proto */
static PyObject *__pyx_pf_6vxlapi_70SetApplConfig(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_appName, unsigned int __pyx_v_appChannel, PyObject *__pyx_v_pHwType, PyObject *__pyx_v_pHwIndex, PyObject *__pyx_v_pHwChannel, unsigned int __pyx_v_busType); /* proto */
static PyObject *__pyx_pf_6vxlapi_72GetDriverConfig(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pDriverConfig); /* proto */
static PyObject *__pyx_pf_6vxlapi_74GetRemoteDriverConfig(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pDriverConfig); /* proto */
static PyObject *__pyx_pf_6vxlapi_76PopupHwConfig(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_callSign, unsigned int __pyx_v_waitForFinish); /* proto */
static PyObject *__pyx_pf_6vxlapi_78GetLicenseInfo(CYTHON_UNUSED PyObject *__pyx_self, XLaccess __pyx_v_channelMask, PyObject *__pyx_v_pLicInfoArray); /* proto */
static PyObject *__pyx_pf_6vxlapi_80GetKeymanBoxes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pBoxCount); /* proto */
static PyObject *__pyx_pf_6vxlapi_82GetKeymanInfo(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_boxIndex, PyObject *__pyx_v_pBoxMask, PyObject *__pyx_v_pBoxSerial, PyObject *__pyx_v_pLicInfo); /* proto */
static PyObject *__pyx_pf_6vxlapi_84CanFdSetConfiguration(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pCanFdConf); /* proto */
static PyObject *__pyx_pf_6vxlapi_86CanTransmitEx(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned char __pyx_v_channelIndex, unsigned int __pyx_v_msgCnt, PyObject *__pyx_v_pMsgCntSent, PyObject *__pyx_v_pXlCanTxEvt); /* proto */
static PyObject *__pyx_pf_6vxlapi_88FrSetConfiguration(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pxlClusterConfig); /* proto */
static PyObject *__pyx_pf_6vxlapi_90FrGetChannelConfiguration(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, CYTHON_UNUSED PyObject *__pyx_v_pxlFrChannelConfig); /* proto */
static PyObject *__pyx_pf_6vxlapi_92FrSetMode(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_frMode); /* proto */
static PyObject *__pyx_pf_6vxlapi_94FrInitStartupAndSync(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pEventBuffer); /* proto */
static PyObject *__pyx_pf_6vxlapi_96FrSetupSymbolWindow(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_frChannel, unsigned int __pyx_v_symbolWindowMask); /* proto */
static PyObject *__pyx_pf_6vxlapi_98FrActivateSpy(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_mode); /* proto */
static PyObject *__pyx_pf_6vxlapi_100FrReceive(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, CYTHON_UNUSED PyObject *__pyx_v_pEventBuffer); /* proto */
static PyObject *__pyx_pf_6vxlapi_102FrTransmit(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pEventBuffer); /* proto */
static PyObject *__pyx_pf_6vxlapi_104FrSetTransceiverMode(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_frChannel, unsigned int __pyx_v_mode); /* proto */
static PyObject *__pyx_pf_6vxlapi_106FrSendSymbolWindow(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_symbolWindow); /* proto */
static PyObject *__pyx_pf_6vxlapi_108FrSetAcceptanceFilter(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pAcceptanceFilter); /* proto */
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyObject *__pyx_n_s_ActivateChannel;
  PyObject *__pyx_n_s_CanAddAcceptanceRange;
  PyObject *__pyx_n_s_CanFdSetConfiguration;
  PyObject *__pyx_n_s_CanFlushTransmitQueue;
  PyObject *__pyx_n_s_CanRemoveAcceptanceRange;
  PyObject *__pyx_n_s_CanRequestChipState;
  PyObject *__pyx_n_s_CanResetAcceptance;
  PyObject *__pyx_n_s_CanSetChannelAcceptance;
  PyObject *__pyx_n_s_CanSetChannelBitrate;
  PyObject *__pyx_n_s_CanSetChannelMode;
  PyObject *__pyx_n_s_CanSetChannelOutput;
  PyObject *__pyx_n_s_CanSetChannelParams;
  PyObject *__pyx_n_s_CanSetChannelParamsC200;
  PyObject *__pyx_n_s_CanSetChannelTransceiver;
  PyObject *__pyx_n_s_CanSetReceiveMode;
  PyObject *__pyx_n_s_CanTransmit;
  PyObject *__pyx_n_s_CanTransmitEx;
  PyObject *__pyx_n_s_ChipState;
  PyObject *__pyx_n_s_CloseDriver;
  PyObject *__pyx_n_s_ClosePort;
  PyObject *__pyx_n_s_DeactivateChannel;
  PyObject *__pyx_n_s_ErrorFrame;
  PyObject *__pyx_n_s_FlushReceiveQueue;
  PyObject *__pyx_n_s_FrActivateSpy;
  PyObject *__pyx_n_s_FrGetChannelConfiguration;
  PyObject *__pyx_n_s_FrInitStartupAndSync;
  PyObject *__pyx_n_s_FrReceive;
  PyObject *__pyx_n_s_FrSendSymbolWindow;
  PyObject *__pyx_n_s_FrSetAcceptanceFilter;
  PyObject *__pyx_n_s_FrSetConfiguration;
  PyObject *__pyx_n_s_FrSetMode;
  PyObject *__pyx_n_s_FrSetTransceiverMode;
  PyObject *__pyx_n_s_FrSetupSymbolWindow;
  PyObject *__pyx_n_s_FrTransmit;
  PyObject *__pyx_n_s_GenerateSyncPulse;
  PyObject *__pyx_n_s_GetApplConfig;
  PyObject *__pyx_n_s_GetChannelIndex;
  PyObject *__pyx_n_s_GetChannelMask;
  PyObject *__pyx_n_s_GetChannelTime;
  PyObject *__pyx_n_s_GetDriverConfig;
  PyObject *__pyx_n_s_GetErrorString;
  PyObject *__pyx_n_s_GetKeymanBoxes;
  PyObject *__pyx_n_s_GetKeymanInfo;
  PyObject *__pyx_n_s_GetLicenseInfo;
  PyObject *__pyx_n_s_GetReceiveQueueLevel;
  PyObject *__pyx_n_s_GetRemoteDriverConfig;
  PyObject *__pyx_n_s_GetSyncTime;
  PyObject *__pyx_n_s_KeyError;
  PyObject *__pyx_kp_s_No_value_specified_for_struct_at;
  PyObject *__pyx_kp_s_No_value_specified_for_struct_at_2;
  PyObject *__pyx_kp_s_No_value_specified_for_struct_at_3;
  PyObject *__pyx_kp_s_No_value_specified_for_struct_at_4;
  PyObject *__pyx_kp_s_No_value_specified_for_struct_at_5;
  PyObject *__pyx_n_s_OpenDriver;
  PyObject *__pyx_n_s_OpenPort;
  PyObject *__pyx_n_s_PopupHwConfig;
  PyObject *__pyx_n_s_Receive;
  PyObject *__pyx_n_s_ResetClock;
  PyObject *__pyx_n_s_SetApplConfig;
  PyObject *__pyx_n_s_SetGlobalTimeSync;
  PyObject *__pyx_n_s_SetNotification;
  PyObject *__pyx_n_s_SetTimerRate;
  PyObject *__pyx_n_s_SetTimerRateAndChannel;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_XL_A429_EV_RX_ERROR_AVG_BIT_LENG;
  PyObject *__pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_HIGH;
  PyObject *__pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_LOW;
  PyObject *__pyx_n_s_XL_A429_EV_RX_ERROR_CODING_RZ;
  PyObject *__pyx_n_s_XL_A429_EV_RX_ERROR_DUTY_FACTOR;
  PyObject *__pyx_n_s_XL_A429_EV_RX_ERROR_FRAME_FORMAT;
  PyObject *__pyx_n_s_XL_A429_EV_RX_ERROR_GAP_VIOLATIO;
  PyObject *__pyx_n_s_XL_A429_EV_RX_ERROR_PARITY;
  PyObject *__pyx_n_s_XL_A429_EV_TX_ERROR_ACCESS_DENIE;
  PyObject *__pyx_n_s_XL_A429_EV_TX_ERROR_TRANSMISSION;
  PyObject *__pyx_n_s_XL_A429_EV_TX_MSG_CTRL_CYCLIC;
  PyObject *__pyx_n_s_XL_A429_EV_TX_MSG_CTRL_ON_REQUES;
  PyObject *__pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_DISABL;
  PyObject *__pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_ENABLE;
  PyObject *__pyx_n_s_XL_A429_MSG_BITRATE_FAST_MAX;
  PyObject *__pyx_n_s_XL_A429_MSG_BITRATE_FAST_MIN;
  PyObject *__pyx_n_s_XL_A429_MSG_BITRATE_RX_MAX;
  PyObject *__pyx_n_s_XL_A429_MSG_BITRATE_RX_MIN;
  PyObject *__pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MAX;
  PyObject *__pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MIN;
  PyObject *__pyx_n_s_XL_A429_MSG_CHANNEL_DIR_RX;
  PyObject *__pyx_n_s_XL_A429_MSG_CHANNEL_DIR_TX;
  PyObject *__pyx_n_s_XL_A429_MSG_CYCLE_MAX;
  PyObject *__pyx_n_s_XL_A429_MSG_FLAG_CYCLIC;
  PyObject *__pyx_n_s_XL_A429_MSG_FLAG_DELETE_CYCLIC;
  PyObject *__pyx_n_s_XL_A429_MSG_FLAG_ON_REQUEST;
  PyObject *__pyx_n_s_XL_A429_MSG_GAP_4BIT;
  PyObject *__pyx_n_s_XL_A429_MSG_GAP_DEFAULT;
  PyObject *__pyx_n_s_XL_A429_MSG_GAP_MAX;
  PyObject *__pyx_n_s_XL_A429_MSG_PARITY_DEFAULT;
  PyObject *__pyx_n_s_XL_A429_MSG_PARITY_DISABLED;
  PyObject *__pyx_n_s_XL_A429_MSG_PARITY_EVEN;
  PyObject *__pyx_n_s_XL_A429_MSG_PARITY_ODD;
  PyObject *__pyx_n_s_XL_A429_QUEUE_OVERFLOW;
  PyObject *__pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MAX;
  PyObject *__pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MIN;
  PyObject *__pyx_n_s_XL_ACTIVATE_NONE;
  PyObject *__pyx_n_s_XL_ACTIVATE_RESET_CLOCK;
  PyObject *__pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CAN20;
  PyObject *__pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CANFD;
  PyObject *__pyx_n_s_XL_BUS_TYPE_A429;
  PyObject *__pyx_n_s_XL_BUS_TYPE_AFDX;
  PyObject *__pyx_n_s_XL_BUS_TYPE_CAN;
  PyObject *__pyx_n_s_XL_BUS_TYPE_DAIO;
  PyObject *__pyx_n_s_XL_BUS_TYPE_ETHERNET;
  PyObject *__pyx_n_s_XL_BUS_TYPE_FLEXRAY;
  PyObject *__pyx_n_s_XL_BUS_TYPE_J1708;
  PyObject *__pyx_n_s_XL_BUS_TYPE_LIN;
  PyObject *__pyx_n_s_XL_BUS_TYPE_MOST;
  PyObject *__pyx_n_s_XL_BUS_TYPE_NONE;
  PyObject *__pyx_n_s_XL_CAN_EV_TAG_TX_MSG;
  PyObject *__pyx_n_s_XL_CAN_EXT_MSG_ID;
  PyObject *__pyx_n_s_XL_CAN_MSG_FLAG_ERROR_FRAME;
  PyObject *__pyx_n_s_XL_CAN_MSG_FLAG_NERR;
  PyObject *__pyx_n_s_XL_CAN_MSG_FLAG_OVERRUN;
  PyObject *__pyx_n_s_XL_CAN_MSG_FLAG_REMOTE_FRAME;
  PyObject *__pyx_n_s_XL_CAN_MSG_FLAG_RESERVED_1;
  PyObject *__pyx_n_s_XL_CAN_MSG_FLAG_SRR_BIT_DOM;
  PyObject *__pyx_n_s_XL_CAN_MSG_FLAG_TX_COMPLETED;
  PyObject *__pyx_n_s_XL_CAN_MSG_FLAG_TX_REQUEST;
  PyObject *__pyx_n_s_XL_CAN_MSG_FLAG_WAKEUP;
  PyObject *__pyx_n_s_XL_CAN_TXMSG_FLAG_BRS;
  PyObject *__pyx_n_s_XL_CAN_TXMSG_FLAG_EDL;
  PyObject *__pyx_n_s_XL_CAN_TXMSG_FLAG_HIGHPRIO;
  PyObject *__pyx_n_s_XL_CAN_TXMSG_FLAG_RTR;
  PyObject *__pyx_n_s_XL_CAN_TXMSG_FLAG_WAKEUP;
  PyObject *__pyx_n_s_XL_ERROR;
  PyObject *__pyx_n_s_XL_ERR_BAD_EXE_FORMAT;
  PyObject *__pyx_n_s_XL_ERR_CANNOT_OPEN_DRIVER;
  PyObject *__pyx_n_s_XL_ERR_CHAN_IS_ONLINE;
  PyObject *__pyx_n_s_XL_ERR_CMD_HANDLING;
  PyObject *__pyx_n_s_XL_ERR_CMD_TIMEOUT;
  PyObject *__pyx_n_s_XL_ERR_CONNECTION_BROKEN;
  PyObject *__pyx_n_s_XL_ERR_CONNECTION_CLOSED;
  PyObject *__pyx_n_s_XL_ERR_CONNECTION_FAILED;
  PyObject *__pyx_n_s_XL_ERR_DLL_NOT_FOUND;
  PyObject *__pyx_n_s_XL_ERR_EDL_NOT_SET;
  PyObject *__pyx_n_s_XL_ERR_EDL_RTR;
  PyObject *__pyx_n_s_XL_ERR_ERROR_CRC;
  PyObject *__pyx_n_s_XL_ERR_ETH_MAC_ACTIVATION_FAILED;
  PyObject *__pyx_n_s_XL_ERR_ETH_PHY_ACTIVATION_FAILED;
  PyObject *__pyx_n_s_XL_ERR_ETH_PHY_CONFIG_ABORTED;
  PyObject *__pyx_n_s_XL_ERR_ETH_RESET_FAILED;
  PyObject *__pyx_n_s_XL_ERR_ETH_SET_CONFIG_DELAYED;
  PyObject *__pyx_n_s_XL_ERR_ETH_UNSUPPORTED_FEATURE;
  PyObject *__pyx_n_s_XL_ERR_HW_NOT_PRESENT;
  PyObject *__pyx_n_s_XL_ERR_HW_NOT_READY;
  PyObject *__pyx_n_s_XL_ERR_INIT_ACCESS_MISSING;
  PyObject *__pyx_n_s_XL_ERR_INSUFFICIENT_BUFFER;
  PyObject *__pyx_n_s_XL_ERR_INTERNAL_ERROR;
  PyObject *__pyx_n_s_XL_ERR_INVALID_ACCESS;
  PyObject *__pyx_n_s_XL_ERR_INVALID_ADDRESS;
  PyObject *__pyx_n_s_XL_ERR_INVALID_CANID;
  PyObject *__pyx_n_s_XL_ERR_INVALID_CHANNEL_MASK;
  PyObject *__pyx_n_s_XL_ERR_INVALID_CHAN_INDEX;
  PyObject *__pyx_n_s_XL_ERR_INVALID_DLC;
  PyObject *__pyx_n_s_XL_ERR_INVALID_FDFLAG_MODE20;
  PyObject *__pyx_n_s_XL_ERR_INVALID_HANDLE;
  PyObject *__pyx_n_s_XL_ERR_INVALID_LEVEL;
  PyObject *__pyx_n_s_XL_ERR_INVALID_PORT;
  PyObject *__pyx_n_s_XL_ERR_INVALID_RESERVED_FLD;
  PyObject *__pyx_n_s_XL_ERR_INVALID_SIZE;
  PyObject *__pyx_n_s_XL_ERR_INVALID_STREAM_NAME;
  PyObject *__pyx_n_s_XL_ERR_INVALID_TAG;
  PyObject *__pyx_n_s_XL_ERR_INVALID_USER_BUFFER;
  PyObject *__pyx_n_s_XL_ERR_NOTIFY_ALREADY_ACTIVE;
  PyObject *__pyx_n_s_XL_ERR_NOT_FOUND;
  PyObject *__pyx_n_s_XL_ERR_NOT_IMPLEMENTED;
  PyObject *__pyx_n_s_XL_ERR_NOT_SUPPORTED;
  PyObject *__pyx_n_s_XL_ERR_NO_DATA_DETECTED;
  PyObject *__pyx_n_s_XL_ERR_NO_LICENSE;
  PyObject *__pyx_n_s_XL_ERR_NO_RESOURCES;
  PyObject *__pyx_n_s_XL_ERR_NO_SYSTEM_RESOURCES;
  PyObject *__pyx_n_s_XL_ERR_PORT_IS_OFFLINE;
  PyObject *__pyx_n_s_XL_ERR_QUEUE_IS_EMPTY;
  PyObject *__pyx_n_s_XL_ERR_QUEUE_IS_FULL;
  PyObject *__pyx_n_s_XL_ERR_QUEUE_OVERRUN;
  PyObject *__pyx_n_s_XL_ERR_REQ_NOT_ACCEP;
  PyObject *__pyx_n_s_XL_ERR_RESERVED_NOT_ZERO;
  PyObject *__pyx_n_s_XL_ERR_STREAM_NOT_CONNECTED;
  PyObject *__pyx_n_s_XL_ERR_STREAM_NOT_FOUND;
  PyObject *__pyx_n_s_XL_ERR_TWICE_REGISTER;
  PyObject *__pyx_n_s_XL_ERR_TX_NOT_POSSIBLE;
  PyObject *__pyx_n_s_XL_ERR_UNEXP_NET_ERR;
  PyObject *__pyx_n_s_XL_ERR_UNKNOWN_FLAG;
  PyObject *__pyx_n_s_XL_ERR_WRONG_BUS_TYPE;
  PyObject *__pyx_n_s_XL_ERR_WRONG_CHIP_TYPE;
  PyObject *__pyx_n_s_XL_ERR_WRONG_COMMAND;
  PyObject *__pyx_n_s_XL_ERR_WRONG_PARAMETER;
  PyObject *__pyx_n_s_XL_EVENT_FLAG_OVERRUN;
  PyObject *__pyx_n_s_XL_FR_CC_COLD_A;
  PyObject *__pyx_n_s_XL_FR_CC_COLD_B;
  PyObject *__pyx_n_s_XL_FR_CHANNEL_A;
  PyObject *__pyx_n_s_XL_FR_CHANNEL_AB;
  PyObject *__pyx_n_s_XL_FR_CHANNEL_B;
  PyObject *__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_ASYNCHRON;
  PyObject *__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_COMBINED;
  PyObject *__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_SYNCHRONO;
  PyObject *__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_CHANNEL;
  PyObject *__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_INIT_AP;
  PyObject *__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_VALID_C;
  PyObject *__pyx_n_s_XL_FR_ERROR;
  PyObject *__pyx_n_s_XL_FR_ERROR_CC_EDA;
  PyObject *__pyx_n_s_XL_FR_ERROR_CC_EDB;
  PyObject *__pyx_n_s_XL_FR_ERROR_CC_ERROR;
  PyObject *__pyx_n_s_XL_FR_ERROR_CC_IIBA;
  PyObject *__pyx_n_s_XL_FR_ERROR_CC_IOBA;
  PyObject *__pyx_n_s_XL_FR_ERROR_CC_LTVA;
  PyObject *__pyx_n_s_XL_FR_ERROR_CC_LTVB;
  PyObject *__pyx_n_s_XL_FR_ERROR_CC_MHF;
  PyObject *__pyx_n_s_XL_FR_ERROR_CC_PERR;
  PyObject *__pyx_n_s_XL_FR_ERROR_CC_TABA;
  PyObject *__pyx_n_s_XL_FR_ERROR_CC_TABB;
  PyObject *__pyx_n_s_XL_FR_ERROR_CLOCK_CORR_FAILURE;
  PyObject *__pyx_n_s_XL_FR_ERROR_MAX_OFFSET_CORRECTIO;
  PyObject *__pyx_n_s_XL_FR_ERROR_MAX_RATE_CORRECTION;
  PyObject *__pyx_n_s_XL_FR_ERROR_MISSING_OFFSET_CORRE;
  PyObject *__pyx_n_s_XL_FR_ERROR_MISSING_RATE_CORRECT;
  PyObject *__pyx_n_s_XL_FR_ERROR_NIT_FAILURE;
  PyObject *__pyx_n_s_XL_FR_ERROR_NIT_SBNA;
  PyObject *__pyx_n_s_XL_FR_ERROR_NIT_SBNB;
  PyObject *__pyx_n_s_XL_FR_ERROR_NIT_SENA;
  PyObject *__pyx_n_s_XL_FR_ERROR_NIT_SENB;
  PyObject *__pyx_n_s_XL_FR_ERROR_POC_ACTIVE;
  PyObject *__pyx_n_s_XL_FR_ERROR_POC_COMM_HALT;
  PyObject *__pyx_n_s_XL_FR_ERROR_POC_MODE;
  PyObject *__pyx_n_s_XL_FR_ERROR_POC_PASSIVE;
  PyObject *__pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_BELOWMIN;
  PyObject *__pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_OVERLOAD;
  PyObject *__pyx_n_s_XL_FR_FILTER_BLOCK;
  PyObject *__pyx_n_s_XL_FR_FILTER_CHANNEL_A;
  PyObject *__pyx_n_s_XL_FR_FILTER_CHANNEL_B;
  PyObject *__pyx_n_s_XL_FR_FILTER_PASS;
  PyObject *__pyx_n_s_XL_FR_FILTER_TYPE_DATA;
  PyObject *__pyx_n_s_XL_FR_FILTER_TYPE_FILLUP_NF;
  PyObject *__pyx_n_s_XL_FR_FILTER_TYPE_NF;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_CONTENT_ERROR;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_DATA_UPDATE_LOST;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_EMPTY_SLOT;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_FRAME_TRANSMITTE;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_FR_RESERVED;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_NEW_DATA_TX;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_NULLFRAME;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_REQ_TXACK;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_RX_UNEXPECTED;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VI;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_STARTUP;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_SYNC;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_SYNTAX_ERROR;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_TXACK_SS;
  PyObject *__pyx_n_s_XL_FR_FRAMEFLAG_TX_CONFLICT;
  PyObject *__pyx_n_s_XL_FR_MODE_COLDSTART_FOLLOWING;
  PyObject *__pyx_n_s_XL_FR_MODE_COLDSTART_LEADING;
  PyObject *__pyx_n_s_XL_FR_MODE_COLD_NORMAL;
  PyObject *__pyx_n_s_XL_FR_MODE_NONE;
  PyObject *__pyx_n_s_XL_FR_MODE_NORMAL;
  PyObject *__pyx_n_s_XL_FR_MODE_WAKEUP;
  PyObject *__pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART;
  PyObject *__pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART_2;
  PyObject *__pyx_n_s_XL_FR_NM_VECTOR;
  PyObject *__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_16BIT;
  PyObject *__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_32BIT;
  PyObject *__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_8BIT;
  PyObject *__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_NONE;
  PyObject *__pyx_n_s_XL_FR_QUEUE_OVERFLOW;
  PyObject *__pyx_n_s_XL_FR_RX_FRAME;
  PyObject *__pyx_n_s_XL_FR_SPY_CHANNEL_A;
  PyObject *__pyx_n_s_XL_FR_SPY_CHANNEL_B;
  PyObject *__pyx_n_s_XL_FR_SPY_FRAME;
  PyObject *__pyx_n_s_XL_FR_SPY_FRAMEFLAG_BUS_ERROR;
  PyObject *__pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ER;
  PyObject *__pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAMING_ERRO;
  PyObject *__pyx_n_s_XL_FR_SPY_FRAMEFLAG_HEADER_CRC_E;
  PyObject *__pyx_n_s_XL_FR_SPY_SYMBOL;
  PyObject *__pyx_n_s_XL_FR_START_CYCLE;
  PyObject *__pyx_n_s_XL_FR_STATUS;
  PyObject *__pyx_n_s_XL_FR_STATUS_ABORT_STARTUP;
  PyObject *__pyx_n_s_XL_FR_STATUS_COLDSTART_COLLISION;
  PyObject *__pyx_n_s_XL_FR_STATUS_COLDSTART_CONSISTEN;
  PyObject *__pyx_n_s_XL_FR_STATUS_COLDSTART_GAP;
  PyObject *__pyx_n_s_XL_FR_STATUS_COLDSTART_JOIN;
  PyObject *__pyx_n_s_XL_FR_STATUS_COLDSTART_LISTEN;
  PyObject *__pyx_n_s_XL_FR_STATUS_CONFIG;
  PyObject *__pyx_n_s_XL_FR_STATUS_DEFAULT_CONFIG;
  PyObject *__pyx_n_s_XL_FR_STATUS_HALT;
  PyObject *__pyx_n_s_XL_FR_STATUS_INITIALIZE_SCHEDULE;
  PyObject *__pyx_n_s_XL_FR_STATUS_INTEGRATION_COLDSTA;
  PyObject *__pyx_n_s_XL_FR_STATUS_INTEGRATION_CONSIST;
  PyObject *__pyx_n_s_XL_FR_STATUS_INTEGRATION_LISTEN;
  PyObject *__pyx_n_s_XL_FR_STATUS_MONITOR_MODE;
  PyObject *__pyx_n_s_XL_FR_STATUS_NORMAL_ACTIVE;
  PyObject *__pyx_n_s_XL_FR_STATUS_NORMAL_PASSIVE;
  PyObject *__pyx_n_s_XL_FR_STATUS_READY;
  PyObject *__pyx_n_s_XL_FR_STATUS_STARTUP_PREPARE;
  PyObject *__pyx_n_s_XL_FR_STATUS_STARTUP_SUCCESS;
  PyObject *__pyx_n_s_XL_FR_STATUS_WAKEUP_DETECT;
  PyObject *__pyx_n_s_XL_FR_STATUS_WAKEUP_LISTEN;
  PyObject *__pyx_n_s_XL_FR_STATUS_WAKEUP_SEND;
  PyObject *__pyx_n_s_XL_FR_STATUS_WAKEUP_STANDBY;
  PyObject *__pyx_n_s_XL_FR_SYMBOL_CAS;
  PyObject *__pyx_n_s_XL_FR_SYMBOL_MTS;
  PyObject *__pyx_n_s_XL_FR_SYMBOL_STATUS_MTSA;
  PyObject *__pyx_n_s_XL_FR_SYMBOL_STATUS_MTSB;
  PyObject *__pyx_n_s_XL_FR_SYMBOL_STATUS_SBSA;
  PyObject *__pyx_n_s_XL_FR_SYMBOL_STATUS_SBSB;
  PyObject *__pyx_n_s_XL_FR_SYMBOL_STATUS_SESA;
  PyObject *__pyx_n_s_XL_FR_SYMBOL_STATUS_SESB;
  PyObject *__pyx_n_s_XL_FR_SYMBOL_STATUS_TCSA;
  PyObject *__pyx_n_s_XL_FR_SYMBOL_STATUS_TCSB;
  PyObject *__pyx_n_s_XL_FR_SYMBOL_WINDOW;
  PyObject *__pyx_n_s_XL_FR_TRANCEIVER_STATUS;
  PyObject *__pyx_n_s_XL_FR_TRANSCEIVER_MODE_NORMAL;
  PyObject *__pyx_n_s_XL_FR_TRANSCEIVER_MODE_RECEIVE_O;
  PyObject *__pyx_n_s_XL_FR_TRANSCEIVER_MODE_SLEEP;
  PyObject *__pyx_n_s_XL_FR_TRANSCEIVER_MODE_STANDBY;
  PyObject *__pyx_n_s_XL_FR_TX_FRAME;
  PyObject *__pyx_n_s_XL_FR_TX_MODE_CYCLIC;
  PyObject *__pyx_n_s_XL_FR_TX_MODE_NONE;
  PyObject *__pyx_n_s_XL_FR_TX_MODE_SINGLE_SHOT;
  PyObject *__pyx_n_s_XL_FR_WAKEUP;
  PyObject *__pyx_n_s_XL_FR_WAKEUP_COLLISION_HEADER;
  PyObject *__pyx_n_s_XL_FR_WAKEUP_COLLISION_UNKNOWN;
  PyObject *__pyx_n_s_XL_FR_WAKEUP_COLLISION_WUP;
  PyObject *__pyx_n_s_XL_FR_WAKEUP_RECEIVED_HEADER;
  PyObject *__pyx_n_s_XL_FR_WAKEUP_RECEIVED_WUP;
  PyObject *__pyx_n_s_XL_FR_WAKEUP_RESERVED;
  PyObject *__pyx_n_s_XL_FR_WAKEUP_TRANSMITTED;
  PyObject *__pyx_n_s_XL_FR_WAKEUP_UNDEFINED;
  PyObject *__pyx_n_s_XL_HWTYPE_CANAC2PCI;
  PyObject *__pyx_n_s_XL_HWTYPE_CANBOARDXL;
  PyObject *__pyx_n_s_XL_HWTYPE_CANBOARDXL_PXI;
  PyObject *__pyx_n_s_XL_HWTYPE_CANCARDX;
  PyObject *__pyx_n_s_XL_HWTYPE_CANCARDXL;
  PyObject *__pyx_n_s_XL_HWTYPE_CANCARDXLE;
  PyObject *__pyx_n_s_XL_HWTYPE_CANCARDY;
  PyObject *__pyx_n_s_XL_HWTYPE_CANCASEXL;
  PyObject *__pyx_n_s_XL_HWTYPE_CANCASEXL_LOG_OBSOLETE;
  PyObject *__pyx_n_s_XL_HWTYPE_CSMCAN;
  PyObject *__pyx_n_s_XL_HWTYPE_IPCL8800;
  PyObject *__pyx_n_s_XL_HWTYPE_IPCLIENT;
  PyObject *__pyx_n_s_XL_HWTYPE_IPSERVER;
  PyObject *__pyx_n_s_XL_HWTYPE_IPSRV8800;
  PyObject *__pyx_n_s_XL_HWTYPE_NONE;
  PyObject *__pyx_n_s_XL_HWTYPE_VIRTUAL;
  PyObject *__pyx_n_s_XL_HWTYPE_VN0601;
  PyObject *__pyx_n_s_XL_HWTYPE_VN1610;
  PyObject *__pyx_n_s_XL_HWTYPE_VN1611;
  PyObject *__pyx_n_s_XL_HWTYPE_VN1630;
  PyObject *__pyx_n_s_XL_HWTYPE_VN1630_LOG;
  PyObject *__pyx_n_s_XL_HWTYPE_VN1640;
  PyObject *__pyx_n_s_XL_HWTYPE_VN2600;
  PyObject *__pyx_n_s_XL_HWTYPE_VN2610;
  PyObject *__pyx_n_s_XL_HWTYPE_VN2640;
  PyObject *__pyx_n_s_XL_HWTYPE_VN3300;
  PyObject *__pyx_n_s_XL_HWTYPE_VN3600;
  PyObject *__pyx_n_s_XL_HWTYPE_VN5610;
  PyObject *__pyx_n_s_XL_HWTYPE_VN5610A;
  PyObject *__pyx_n_s_XL_HWTYPE_VN7570;
  PyObject *__pyx_n_s_XL_HWTYPE_VN7572;
  PyObject *__pyx_n_s_XL_HWTYPE_VN7600;
  PyObject *__pyx_n_s_XL_HWTYPE_VN7610;
  PyObject *__pyx_n_s_XL_HWTYPE_VN7640;
  PyObject *__pyx_n_s_XL_HWTYPE_VN8800;
  PyObject *__pyx_n_s_XL_HWTYPE_VN8900;
  PyObject *__pyx_n_s_XL_HWTYPE_VN8950;
  PyObject *__pyx_n_s_XL_HWTYPE_VN8970;
  PyObject *__pyx_n_s_XL_HWTYPE_VN8972;
  PyObject *__pyx_n_s_XL_HWTYPE_VT6204;
  PyObject *__pyx_n_s_XL_HWTYPE_VX0312;
  PyObject *__pyx_n_s_XL_HWTYPE_VX1121;
  PyObject *__pyx_n_s_XL_HWTYPE_VX1131;
  PyObject *__pyx_n_s_XL_INTERFACE_VERSION;
  PyObject *__pyx_n_s_XL_INTERFACE_VERSION_V2;
  PyObject *__pyx_n_s_XL_INTERFACE_VERSION_V3;
  PyObject *__pyx_n_s_XL_INTERFACE_VERSION_V4;
  PyObject *__pyx_n_s_XL_INVALID_PORTHANDLE;
  PyObject *__pyx_n_s_XL_LIN_MSGFLAG_CRCERROR;
  PyObject *__pyx_n_s_XL_LIN_MSGFLAG_TX;
  PyObject *__pyx_n_s_XL_MAX_HWTYPE;
  PyObject *__pyx_n_s_XL_NOTIFY_REASON_CHANNEL_ACTIVAT;
  PyObject *__pyx_n_s_XL_NOTIFY_REASON_CHANNEL_DEACTIV;
  PyObject *__pyx_n_s_XL_NOTIFY_REASON_PORT_CLOSED;
  PyObject *__pyx_n_s_XL_PENDING;
  PyObject *__pyx_n_s_XL_SET_TIMESYNC_NO_CHANGE;
  PyObject *__pyx_n_s_XL_SET_TIMESYNC_OFF;
  PyObject *__pyx_n_s_XL_SET_TIMESYNC_ON;
  PyObject *__pyx_n_s_XL_SUCCESS;
  PyObject *__pyx_n_s_XLstatus;
  PyObject *__pyx_n_s__104;
  PyObject *__pyx_n_s_a429;
  PyObject *__pyx_n_s_acceptanceFilter;
  PyObject *__pyx_n_s_accessMask;
  PyObject *__pyx_n_s_activeSpeedGrade;
  PyObject *__pyx_n_s_appChannel;
  PyObject *__pyx_n_s_appName;
  PyObject *__pyx_n_s_applicationNotification;
  PyObject *__pyx_n_s_arbitrationBitRate;
  PyObject *__pyx_n_s_articleNumber;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_autoBaudrate;
  PyObject *__pyx_n_s_b;
  PyObject *__pyx_n_s_bAvailable;
  PyObject *__pyx_n_s_baudrate;
  PyObject *__pyx_n_s_bitRate;
  PyObject *__pyx_n_s_bitrate;
  PyObject *__pyx_n_s_boxCount;
  PyObject *__pyx_n_s_boxIndex;
  PyObject *__pyx_n_s_boxMask;
  PyObject *__pyx_n_s_boxSerial;
  PyObject *__pyx_n_s_breakOffset;
  PyObject *__pyx_n_s_btr0;
  PyObject *__pyx_n_s_btr1;
  PyObject *__pyx_n_s_busGuardianEnable;
  PyObject *__pyx_n_s_busGuardianTick;
  PyObject *__pyx_n_s_busParams;
  PyObject *__pyx_n_s_busType;
  PyObject *__pyx_n_s_bypass;
  PyObject *__pyx_n_s_callSign;
  PyObject *__pyx_n_s_can;
  PyObject *__pyx_n_s_canFD;
  PyObject *__pyx_n_s_canFdConf;
  PyObject *__pyx_n_s_canId;
  PyObject *__pyx_n_s_canOpMode;
  PyObject *__pyx_n_s_ccError;
  PyObject *__pyx_n_s_cfgMode;
  PyObject *__pyx_n_s_ch;
  PyObject *__pyx_n_s_chanIndex;
  PyObject *__pyx_n_s_channel;
  PyObject *__pyx_n_s_channelBusActiveCapabilities;
  PyObject *__pyx_n_s_channelBusCapabilities;
  PyObject *__pyx_n_s_channelCapabilities;
  PyObject *__pyx_n_s_channelConfig;
  PyObject *__pyx_n_s_channelCount;
  PyObject *__pyx_n_s_channelDirection;
  PyObject *__pyx_n_s_channelIndex;
  PyObject *__pyx_n_s_channelMask;
  PyObject *__pyx_n_s_channelTime;
  PyObject *__pyx_n_s_chipParams;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_clockCorrFailedCounter;
  PyObject *__pyx_n_s_clockMode;
  PyObject *__pyx_n_s_clusterConfig;
  PyObject *__pyx_n_s_code;
  PyObject *__pyx_n_s_compatibleSpeedGrade;
  PyObject *__pyx_n_s_configError;
  PyObject *__pyx_n_s_connectedBusType;
  PyObject *__pyx_n_s_connectionInfo;
  PyObject *__pyx_n_s_connector;
  PyObject *__pyx_n_s_currentlyAvailableTimestamps;
  PyObject *__pyx_n_s_cycleCount;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_dataBitRate;
  PyObject *__pyx_n_s_delimiterOffset;
  PyObject *__pyx_n_s_dir;
  PyObject *__pyx_n_s_dlc;
  PyObject *__pyx_n_s_dllVersion;
  PyObject *__pyx_n_s_doNotUse;
  PyObject *__pyx_n_s_dominantRecessiveDelay;
  PyObject *__pyx_n_s_dominantTimeout;
  PyObject *__pyx_n_s_driverConfig;
  PyObject *__pyx_n_s_driverVersion;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_err;
  PyObject *__pyx_n_s_errorInfo;
  PyObject *__pyx_n_s_errorMode;
  PyObject *__pyx_n_s_ethernet;
  PyObject *__pyx_n_s_evenSyncFramesA;
  PyObject *__pyx_n_s_evenSyncFramesB;
  PyObject *__pyx_n_s_eventBuffer;
  PyObject *__pyx_n_s_eventCount;
  PyObject *__pyx_n_s_externalClockCorrectionMode;
  PyObject *__pyx_n_s_filterChannelMask;
  PyObject *__pyx_n_s_filterFirstSlot;
  PyObject *__pyx_n_s_filterLastSlot;
  PyObject *__pyx_n_s_filterStatus;
  PyObject *__pyx_n_s_filterTypeMask;
  PyObject *__pyx_n_s_first_id;
  PyObject *__pyx_n_s_flags;
  PyObject *__pyx_n_s_flagsChip;
  PyObject *__pyx_n_s_flexray;
  PyObject *__pyx_n_s_fpgaCoreCapabilities;
  PyObject *__pyx_n_s_frCCError;
  PyObject *__pyx_n_s_frChannel;
  PyObject *__pyx_n_s_frClockCorrectionFailure;
  PyObject *__pyx_n_s_frError;
  PyObject *__pyx_n_s_frMode;
  PyObject *__pyx_n_s_frNitFailure;
  PyObject *__pyx_n_s_frNmVector;
  PyObject *__pyx_n_s_frPocMode;
  PyObject *__pyx_n_s_frRxFrame;
  PyObject *__pyx_n_s_frSpyFrame;
  PyObject *__pyx_n_s_frSpySymbol;
  PyObject *__pyx_n_s_frStartCycle;
  PyObject *__pyx_n_s_frStartupAttributes;
  PyObject *__pyx_n_s_frStatus;
  PyObject *__pyx_n_s_frSymbolWindow;
  PyObject *__pyx_n_s_frSyncFramesBelowMin;
  PyObject *__pyx_n_s_frSyncFramesOverload;
  PyObject *__pyx_n_s_frSyncPulse;
  PyObject *__pyx_n_s_frTxFrame;
  PyObject *__pyx_n_s_frWakeup;
  PyObject *__pyx_n_s_frameCRC;
  PyObject *__pyx_n_s_frameError;
  PyObject *__pyx_n_s_frameLength;
  PyObject *__pyx_n_s_gChannels;
  PyObject *__pyx_n_s_gColdStartAttempts;
  PyObject *__pyx_n_s_gListenNoise;
  PyObject *__pyx_n_s_gMacroPerCycle;
  PyObject *__pyx_n_s_gMaxWithoutClockCorrectionFatal;
  PyObject *__pyx_n_s_gMaxWithoutClockCorrectionPassiv;
  PyObject *__pyx_n_s_gNetworkManagementVectorLength;
  PyObject *__pyx_n_s_gNumberOfMinislots;
  PyObject *__pyx_n_s_gNumberOfStaticSlots;
  PyObject *__pyx_n_s_gOffsetCorrectionStart;
  PyObject *__pyx_n_s_gPayloadLengthStatic;
  PyObject *__pyx_n_s_gSyncNodeMax;
  PyObject *__pyx_n_s_gdActionPointOffset;
  PyObject *__pyx_n_s_gdCASRxLowMax;
  PyObject *__pyx_n_s_gdDynamicSlotIdlePhase;
  PyObject *__pyx_n_s_gdMacrotick;
  PyObject *__pyx_n_s_gdMiniSlotActionPointOffset;
  PyObject *__pyx_n_s_gdMinislot;
  PyObject *__pyx_n_s_gdNIT;
  PyObject *__pyx_n_s_gdStaticSlot;
  PyObject *__pyx_n_s_gdSymbolWindow;
  PyObject *__pyx_n_s_gdTSSTransmitter;
  PyObject *__pyx_n_s_gdWakeupSymbolRxIdle;
  PyObject *__pyx_n_s_gdWakeupSymbolRxLow;
  PyObject *__pyx_n_s_gdWakeupSymbolRxWindow;
  PyObject *__pyx_n_s_gdWakeupSymbolTxIdle;
  PyObject *__pyx_n_s_gdWakeupSymbolTxLow;
  PyObject *__pyx_n_s_headerCRC;
  PyObject *__pyx_n_s_headerFlags;
  PyObject *__pyx_n_s_hwChannel;
  PyObject *__pyx_n_s_hwIndex;
  PyObject *__pyx_n_s_hwType;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_id;
  PyObject *__pyx_n_s_idRange;
  PyObject *__pyx_n_s_incrementOffset;
  PyObject *__pyx_n_s_incrementSize;
  PyObject *__pyx_n_s_inicFwVersion;
  PyObject *__pyx_n_s_interfaceVersion;
  PyObject *__pyx_n_s_isOnBus;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_j;
  PyObject *__pyx_n_s_last_id;
  PyObject *__pyx_n_s_level;
  PyObject *__pyx_n_s_licInfo;
  PyObject *__pyx_n_s_licInfoArray;
  PyObject *__pyx_n_s_licInfoArraySize;
  PyObject *__pyx_n_s_licName;
  PyObject *__pyx_n_s_lineMode;
  PyObject *__pyx_n_s_link;
  PyObject *__pyx_n_s_lowLength;
  PyObject *__pyx_kp_s_macAddr_6;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_mask;
  PyObject *__pyx_n_s_maxBitrate;
  PyObject *__pyx_n_s_maximalBaudrate;
  PyObject *__pyx_n_s_maximalSupplyVoltage;
  PyObject *__pyx_n_s_messageCount;
  PyObject *__pyx_n_s_message_count;
  PyObject *__pyx_n_s_minBitrate;
  PyObject *__pyx_n_s_minGap;
  PyObject *__pyx_n_s_minimalSupplyVoltage;
  PyObject *__pyx_n_s_mode;
  PyObject *__pyx_n_s_most;
  PyObject *__pyx_n_s_msg;
  PyObject *__pyx_n_s_msgCnt;
  PyObject *__pyx_n_s_msgCntSent;
  PyObject *__pyx_n_s_msgFlags;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_newValue;
  PyObject *__pyx_n_s_nmVector;
  PyObject *__pyx_n_s_notifyReason;
  PyObject *__pyx_n_s_oddSyncFramesA;
  PyObject *__pyx_n_s_oddSyncFramesB;
  PyObject *__pyx_n_s_offset;
  PyObject *__pyx_n_s_options;
  PyObject *__pyx_n_s_outputMode;
  PyObject *__pyx_n_s_pAcceptanceFilter;
  PyObject *__pyx_n_s_pAllowHaltDueToClock;
  PyObject *__pyx_n_s_pAllowPassiveToActive;
  PyObject *__pyx_n_s_pBoxCount;
  PyObject *__pyx_n_s_pBoxMask;
  PyObject *__pyx_n_s_pBoxSerial;
  PyObject *__pyx_n_s_pCanFdConf;
  PyObject *__pyx_n_s_pChannelTime;
  PyObject *__pyx_n_s_pChannels;
  PyObject *__pyx_n_s_pChannelsMTS;
  PyObject *__pyx_n_s_pChipParams;
  PyObject *__pyx_n_s_pClusterDriftDamping;
  PyObject *__pyx_n_s_pDecodingCorrection;
  PyObject *__pyx_n_s_pDelayCompensationA;
  PyObject *__pyx_n_s_pDelayCompensationB;
  PyObject *__pyx_n_s_pDriverConfig;
  PyObject *__pyx_n_s_pEventBuffer;
  PyObject *__pyx_n_s_pEventCount;
  PyObject *__pyx_n_s_pEventList;
  PyObject *__pyx_n_s_pEventString;
  PyObject *__pyx_n_s_pExternOffsetCorrection;
  PyObject *__pyx_n_s_pExternRateCorrection;
  PyObject *__pyx_n_s_pHwChannel;
  PyObject *__pyx_n_s_pHwIndex;
  PyObject *__pyx_n_s_pHwType;
  PyObject *__pyx_n_s_pKeySlotUsedForStartup;
  PyObject *__pyx_n_s_pKeySlotUsedForSync;
  PyObject *__pyx_n_s_pLatestTx;
  PyObject *__pyx_n_s_pLicInfo;
  PyObject *__pyx_n_s_pLicInfoArray;
  PyObject *__pyx_n_s_pMacroInitialOffsetA;
  PyObject *__pyx_n_s_pMacroInitialOffsetB;
  PyObject *__pyx_n_s_pMaxPayloadLengthDynamic;
  PyObject *__pyx_n_s_pMessage;
  PyObject *__pyx_n_s_pMicroInitialOffsetA;
  PyObject *__pyx_n_s_pMicroInitialOffsetB;
  PyObject *__pyx_n_s_pMicroPerCycle;
  PyObject *__pyx_n_s_pMicroPerMacroNom;
  PyObject *__pyx_n_s_pMsgCntSent;
  PyObject *__pyx_n_s_pOffsetCorrectionOut;
  PyObject *__pyx_n_s_pPreviousValue;
  PyObject *__pyx_n_s_pRateCorrectionOut;
  PyObject *__pyx_n_s_pSamplesPerMicrotick;
  PyObject *__pyx_n_s_pSingleSlotEnabled;
  PyObject *__pyx_n_s_pTime;
  PyObject *__pyx_n_s_pWakeupChannel;
  PyObject *__pyx_n_s_pWakeupPattern;
  PyObject *__pyx_n_s_pXLcanTxEvents;
  PyObject *__pyx_n_s_pXlCanTxEvt;
  PyObject *__pyx_n_s_pXlHandle;
  PyObject *__pyx_n_s_parity;
  PyObject *__pyx_n_s_payloadLength;
  PyObject *__pyx_n_s_pdAcceptedStartupRange;
  PyObject *__pyx_n_s_pdListenTimeout;
  PyObject *__pyx_n_s_pdMaxDrift;
  PyObject *__pyx_n_s_pdMicrotick;
  PyObject *__pyx_n_s_permissionMask;
  PyObject *__pyx_n_s_permission_mask;
  PyObject *__pyx_n_s_phy;
  PyObject *__pyx_n_s_plevel;
  PyObject *__pyx_n_s_portHandle;
  PyObject *__pyx_n_s_port_handle;
  PyObject *__pyx_n_s_previousValue;
  PyObject *__pyx_n_s_print;
  PyObject *__pyx_n_s_ptimerChannelMask;
  PyObject *__pyx_n_s_ptimerRate;
  PyObject *__pyx_n_s_pxlClusterConfig;
  PyObject *__pyx_n_s_pxlEvent;
  PyObject *__pyx_n_s_pxlFrChannelConfig;
  PyObject *__pyx_n_s_queueLevel;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_raw;
  PyObject *__pyx_kp_s_raw_24;
  PyObject *__pyx_kp_s_raw_28;
  PyObject *__pyx_kp_s_raw_data_10;
  PyObject *__pyx_n_s_recessiveDominantDelay;
  PyObject *__pyx_n_s_repetition;
  PyObject *__pyx_n_s_res1;
  PyObject *__pyx_n_s_resNet;
  PyObject *__pyx_n_s_reserved;
  PyObject *__pyx_n_s_reserved0;
  PyObject *__pyx_n_s_reserved1;
  PyObject *__pyx_kp_s_reserved1_7;
  PyObject *__pyx_n_s_reserved2;
  PyObject *__pyx_kp_s_reserved_10;
  PyObject *__pyx_kp_s_reserved_3;
  PyObject *__pyx_n_s_retEvent;
  PyObject *__pyx_n_s_rxQueueSize;
  PyObject *__pyx_n_s_sam;
  PyObject *__pyx_n_s_samAbr;
  PyObject *__pyx_n_s_serialNumber;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_sjw;
  PyObject *__pyx_n_s_sjwAbr;
  PyObject *__pyx_n_s_sjwDbr;
  PyObject *__pyx_n_s_slotID;
  PyObject *__pyx_n_s_specialCabFlags;
  PyObject *__pyx_n_s_specialDeviceStatus;
  PyObject *__pyx_n_s_speed;
  PyObject *__pyx_n_s_status;
  PyObject *__pyx_n_s_statusType;
  PyObject *__pyx_n_s_symbol;
  PyObject *__pyx_n_s_symbolWindow;
  PyObject *__pyx_n_s_symbolWindowMask;
  PyObject *__pyx_n_s_tag;
  PyObject *__pyx_n_s_tagData;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_time;
  PyObject *__pyx_n_s_timeStamp;
  PyObject *__pyx_n_s_timeStampSync;
  PyObject *__pyx_n_s_timerChannelMask;
  PyObject *__pyx_n_s_timerRate;
  PyObject *__pyx_n_s_transId;
  PyObject *__pyx_n_s_transceiverName;
  PyObject *__pyx_n_s_transceiverState;
  PyObject *__pyx_n_s_transceiverType;
  PyObject *__pyx_n_s_triggerSource;
  PyObject *__pyx_n_s_tseg1;
  PyObject *__pyx_n_s_tseg1Abr;
  PyObject *__pyx_n_s_tseg1Dbr;
  PyObject *__pyx_n_s_tseg2;
  PyObject *__pyx_n_s_tseg2Abr;
  PyObject *__pyx_n_s_tseg2Dbr;
  PyObject *__pyx_n_s_tssLength;
  PyObject *__pyx_n_s_tx;
  PyObject *__pyx_n_s_txMode;
  PyObject *__pyx_n_s_txrq;
  PyObject *__pyx_n_s_type;
  PyObject *__pyx_n_s_userHandle;
  PyObject *__pyx_n_s_vAllowPassivToActive;
  PyObject *__pyx_n_s_vClockCorrectionFailed;
  PyObject *__pyx_n_s_vExternOffsetControl;
  PyObject *__pyx_n_s_vExternRateControl;
  PyObject *__pyx_n_s_vOffsetCorrection;
  PyObject *__pyx_n_s_vRateCorrection;
  PyObject *__pyx_n_s_vxlapi;
  PyObject *__pyx_kp_s_vxlapi_pyx;
  PyObject *__pyx_n_s_waitForFinish;
  PyObject *__pyx_n_s_wakeupStatus;
  PyObject *__pyx_n_s_xlEvent;
  PyObject *__pyx_n_s_xlFrClusterConfig;
  PyObject *__pyx_n_s_xlHandle;
  PyObject *__pyx_n_s_xlInterfaceVersion;
  PyObject *__pyx_n_s_xlstring;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__39;
  PyObject *__pyx_tuple__41;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__47;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__69;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__74;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__88;
  PyObject *__pyx_tuple__90;
  PyObject *__pyx_tuple__92;
  PyObject *__pyx_tuple__95;
  PyObject *__pyx_tuple__98;
  PyObject *__pyx_codeobj__6;
  PyObject *__pyx_codeobj__7;
  PyObject *__pyx_codeobj__9;
  PyObject *__pyx_tuple__100;
  PyObject *__pyx_tuple__102;
  PyObject *__pyx_codeobj__10;
  PyObject *__pyx_codeobj__12;
  PyObject *__pyx_codeobj__14;
  PyObject *__pyx_codeobj__16;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__20;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__24;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__40;
  PyObject *__pyx_codeobj__42;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__52;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__62;
  PyObject *__pyx_codeobj__64;
  PyObject *__pyx_codeobj__66;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__70;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__75;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__81;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__91;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__103;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_n_s_ActivateChannel);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanAddAcceptanceRange);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanFdSetConfiguration);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanFlushTransmitQueue);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanRemoveAcceptanceRange);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanRequestChipState);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanResetAcceptance);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanSetChannelAcceptance);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanSetChannelBitrate);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanSetChannelMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanSetChannelOutput);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanSetChannelParams);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanSetChannelParamsC200);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanSetChannelTransceiver);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanSetReceiveMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanTransmit);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanTransmitEx);
  Py_CLEAR(clear_module_state->__pyx_n_s_ChipState);
  Py_CLEAR(clear_module_state->__pyx_n_s_CloseDriver);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClosePort);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeactivateChannel);
  Py_CLEAR(clear_module_state->__pyx_n_s_ErrorFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_FlushReceiveQueue);
  Py_CLEAR(clear_module_state->__pyx_n_s_FrActivateSpy);
  Py_CLEAR(clear_module_state->__pyx_n_s_FrGetChannelConfiguration);
  Py_CLEAR(clear_module_state->__pyx_n_s_FrInitStartupAndSync);
  Py_CLEAR(clear_module_state->__pyx_n_s_FrReceive);
  Py_CLEAR(clear_module_state->__pyx_n_s_FrSendSymbolWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_FrSetAcceptanceFilter);
  Py_CLEAR(clear_module_state->__pyx_n_s_FrSetConfiguration);
  Py_CLEAR(clear_module_state->__pyx_n_s_FrSetMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_FrSetTransceiverMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_FrSetupSymbolWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_FrTransmit);
  Py_CLEAR(clear_module_state->__pyx_n_s_GenerateSyncPulse);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetApplConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetChannelIndex);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetChannelMask);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetChannelTime);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetDriverConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetErrorString);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetKeymanBoxes);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetKeymanInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetLicenseInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetReceiveQueueLevel);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetRemoteDriverConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetSyncTime);
  Py_CLEAR(clear_module_state->__pyx_n_s_KeyError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_No_value_specified_for_struct_at);
  Py_CLEAR(clear_module_state->__pyx_kp_s_No_value_specified_for_struct_at_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_No_value_specified_for_struct_at_3);
  Py_CLEAR(clear_module_state->__pyx_kp_s_No_value_specified_for_struct_at_4);
  Py_CLEAR(clear_module_state->__pyx_kp_s_No_value_specified_for_struct_at_5);
  Py_CLEAR(clear_module_state->__pyx_n_s_OpenDriver);
  Py_CLEAR(clear_module_state->__pyx_n_s_OpenPort);
  Py_CLEAR(clear_module_state->__pyx_n_s_PopupHwConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_Receive);
  Py_CLEAR(clear_module_state->__pyx_n_s_ResetClock);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetApplConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetGlobalTimeSync);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetNotification);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetTimerRate);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetTimerRateAndChannel);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_AVG_BIT_LENG);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_CODING_RZ);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_DUTY_FACTOR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_FRAME_FORMAT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_GAP_VIOLATIO);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_PARITY);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_TX_ERROR_ACCESS_DENIE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_TX_ERROR_TRANSMISSION);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_TX_MSG_CTRL_CYCLIC);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_EV_TX_MSG_CTRL_ON_REQUES);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_DISABL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_ENABLE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_FAST_MAX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_FAST_MIN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_RX_MAX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_RX_MIN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MAX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MIN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_CHANNEL_DIR_RX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_CHANNEL_DIR_TX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_CYCLE_MAX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_FLAG_CYCLIC);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_FLAG_DELETE_CYCLIC);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_FLAG_ON_REQUEST);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_GAP_4BIT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_GAP_DEFAULT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_GAP_MAX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_PARITY_DEFAULT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_PARITY_DISABLED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_PARITY_EVEN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_MSG_PARITY_ODD);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_QUEUE_OVERFLOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MAX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MIN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ACTIVATE_NONE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ACTIVATE_RESET_CLOCK);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CAN20);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CANFD);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_TYPE_A429);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_TYPE_AFDX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_TYPE_CAN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_TYPE_DAIO);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_TYPE_ETHERNET);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_TYPE_FLEXRAY);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_TYPE_J1708);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_TYPE_LIN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_TYPE_MOST);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_BUS_TYPE_NONE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_EV_TAG_TX_MSG);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_EXT_MSG_ID);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_ERROR_FRAME);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_NERR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_OVERRUN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_REMOTE_FRAME);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_RESERVED_1);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_SRR_BIT_DOM);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_TX_COMPLETED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_TX_REQUEST);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_WAKEUP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_TXMSG_FLAG_BRS);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_TXMSG_FLAG_EDL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_TXMSG_FLAG_HIGHPRIO);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_TXMSG_FLAG_RTR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_CAN_TXMSG_FLAG_WAKEUP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERROR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_BAD_EXE_FORMAT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_CANNOT_OPEN_DRIVER);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_CHAN_IS_ONLINE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_CMD_HANDLING);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_CMD_TIMEOUT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_CONNECTION_BROKEN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_CONNECTION_CLOSED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_CONNECTION_FAILED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_DLL_NOT_FOUND);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_EDL_NOT_SET);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_EDL_RTR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_ERROR_CRC);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_ETH_MAC_ACTIVATION_FAILED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_ETH_PHY_ACTIVATION_FAILED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_ETH_PHY_CONFIG_ABORTED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_ETH_RESET_FAILED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_ETH_SET_CONFIG_DELAYED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_ETH_UNSUPPORTED_FEATURE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_HW_NOT_PRESENT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_HW_NOT_READY);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INIT_ACCESS_MISSING);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INSUFFICIENT_BUFFER);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INTERNAL_ERROR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_ACCESS);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_ADDRESS);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_CANID);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_CHANNEL_MASK);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_CHAN_INDEX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_DLC);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_FDFLAG_MODE20);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_HANDLE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_LEVEL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_PORT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_RESERVED_FLD);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_SIZE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_STREAM_NAME);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_INVALID_USER_BUFFER);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_NOTIFY_ALREADY_ACTIVE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_NOT_FOUND);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_NOT_IMPLEMENTED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_NOT_SUPPORTED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_NO_DATA_DETECTED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_NO_LICENSE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_NO_RESOURCES);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_NO_SYSTEM_RESOURCES);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_PORT_IS_OFFLINE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_QUEUE_IS_EMPTY);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_QUEUE_IS_FULL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_QUEUE_OVERRUN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_REQ_NOT_ACCEP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_RESERVED_NOT_ZERO);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_STREAM_NOT_CONNECTED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_STREAM_NOT_FOUND);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_TWICE_REGISTER);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_TX_NOT_POSSIBLE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_UNEXP_NET_ERR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_UNKNOWN_FLAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_WRONG_BUS_TYPE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_WRONG_CHIP_TYPE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_WRONG_COMMAND);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_ERR_WRONG_PARAMETER);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_EVENT_FLAG_OVERRUN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_CC_COLD_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_CC_COLD_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_CHANNEL_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_CHANNEL_AB);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_CHANNEL_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_ASYNCHRON);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_COMBINED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_SYNCHRONO);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_CHANNEL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_INIT_AP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_VALID_C);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CC_EDA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CC_EDB);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CC_ERROR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CC_IIBA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CC_IOBA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CC_LTVA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CC_LTVB);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CC_MHF);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CC_PERR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CC_TABA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CC_TABB);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_CLOCK_CORR_FAILURE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_MAX_OFFSET_CORRECTIO);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_MAX_RATE_CORRECTION);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_MISSING_OFFSET_CORRE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_MISSING_RATE_CORRECT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_NIT_FAILURE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_NIT_SBNA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_NIT_SBNB);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_NIT_SENA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_NIT_SENB);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_POC_ACTIVE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_POC_COMM_HALT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_POC_MODE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_POC_PASSIVE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_BELOWMIN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_OVERLOAD);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FILTER_BLOCK);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FILTER_CHANNEL_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FILTER_CHANNEL_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FILTER_PASS);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FILTER_TYPE_DATA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FILTER_TYPE_FILLUP_NF);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FILTER_TYPE_NF);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_CONTENT_ERROR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_DATA_UPDATE_LOST);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_EMPTY_SLOT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_FRAME_TRANSMITTE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_FR_RESERVED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_NEW_DATA_TX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_NULLFRAME);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_REQ_TXACK);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_RX_UNEXPECTED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VI);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_STARTUP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_SYNC);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_SYNTAX_ERROR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_TXACK_SS);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_TX_CONFLICT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_MODE_COLDSTART_FOLLOWING);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_MODE_COLDSTART_LEADING);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_MODE_COLD_NORMAL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_MODE_NONE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_MODE_NORMAL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_MODE_WAKEUP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_NM_VECTOR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_16BIT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_32BIT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_8BIT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_NONE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_QUEUE_OVERFLOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_RX_FRAME);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SPY_CHANNEL_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SPY_CHANNEL_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SPY_FRAME);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_BUS_ERROR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ER);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAMING_ERRO);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_HEADER_CRC_E);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SPY_SYMBOL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_START_CYCLE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_ABORT_STARTUP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_COLDSTART_COLLISION);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_COLDSTART_CONSISTEN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_COLDSTART_GAP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_COLDSTART_JOIN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_COLDSTART_LISTEN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_CONFIG);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_DEFAULT_CONFIG);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_HALT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_INITIALIZE_SCHEDULE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_INTEGRATION_COLDSTA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_INTEGRATION_CONSIST);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_INTEGRATION_LISTEN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_MONITOR_MODE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_NORMAL_ACTIVE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_NORMAL_PASSIVE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_READY);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_STARTUP_PREPARE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_STARTUP_SUCCESS);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_WAKEUP_DETECT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_WAKEUP_LISTEN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_WAKEUP_SEND);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_STATUS_WAKEUP_STANDBY);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SYMBOL_CAS);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SYMBOL_MTS);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_MTSA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_MTSB);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_SBSA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_SBSB);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_SESA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_SESB);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_TCSA);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_TCSB);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_SYMBOL_WINDOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_TRANCEIVER_STATUS);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_NORMAL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_RECEIVE_O);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_SLEEP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_STANDBY);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_TX_FRAME);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_TX_MODE_CYCLIC);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_TX_MODE_NONE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_TX_MODE_SINGLE_SHOT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_WAKEUP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_WAKEUP_COLLISION_HEADER);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_WAKEUP_COLLISION_UNKNOWN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_WAKEUP_COLLISION_WUP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_WAKEUP_RECEIVED_HEADER);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_WAKEUP_RECEIVED_WUP);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_WAKEUP_RESERVED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_WAKEUP_TRANSMITTED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_FR_WAKEUP_UNDEFINED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_CANAC2PCI);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_CANBOARDXL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_CANBOARDXL_PXI);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_CANCARDX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_CANCARDXL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_CANCARDXLE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_CANCARDY);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_CANCASEXL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_CANCASEXL_LOG_OBSOLETE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_CSMCAN);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_IPCL8800);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_IPCLIENT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_IPSERVER);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_IPSRV8800);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_NONE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VIRTUAL);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN0601);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN1610);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN1611);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN1630);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN1630_LOG);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN1640);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN2600);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN2610);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN2640);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN3300);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN3600);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN5610);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN5610A);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN7570);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN7572);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN7600);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN7610);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN7640);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN8800);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN8900);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN8950);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN8970);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VN8972);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VT6204);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VX0312);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VX1121);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_HWTYPE_VX1131);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_INTERFACE_VERSION);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_INTERFACE_VERSION_V2);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_INTERFACE_VERSION_V3);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_INTERFACE_VERSION_V4);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_INVALID_PORTHANDLE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_LIN_MSGFLAG_CRCERROR);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_LIN_MSGFLAG_TX);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_MAX_HWTYPE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_NOTIFY_REASON_CHANNEL_ACTIVAT);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_NOTIFY_REASON_CHANNEL_DEACTIV);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_NOTIFY_REASON_PORT_CLOSED);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_PENDING);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_SET_TIMESYNC_NO_CHANGE);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_SET_TIMESYNC_OFF);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_SET_TIMESYNC_ON);
  Py_CLEAR(clear_module_state->__pyx_n_s_XL_SUCCESS);
  Py_CLEAR(clear_module_state->__pyx_n_s_XLstatus);
  Py_CLEAR(clear_module_state->__pyx_n_s__104);
  Py_CLEAR(clear_module_state->__pyx_n_s_a429);
  Py_CLEAR(clear_module_state->__pyx_n_s_acceptanceFilter);
  Py_CLEAR(clear_module_state->__pyx_n_s_accessMask);
  Py_CLEAR(clear_module_state->__pyx_n_s_activeSpeedGrade);
  Py_CLEAR(clear_module_state->__pyx_n_s_appChannel);
  Py_CLEAR(clear_module_state->__pyx_n_s_appName);
  Py_CLEAR(clear_module_state->__pyx_n_s_applicationNotification);
  Py_CLEAR(clear_module_state->__pyx_n_s_arbitrationBitRate);
  Py_CLEAR(clear_module_state->__pyx_n_s_articleNumber);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_autoBaudrate);
  Py_CLEAR(clear_module_state->__pyx_n_s_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_bAvailable);
  Py_CLEAR(clear_module_state->__pyx_n_s_baudrate);
  Py_CLEAR(clear_module_state->__pyx_n_s_bitRate);
  Py_CLEAR(clear_module_state->__pyx_n_s_bitrate);
  Py_CLEAR(clear_module_state->__pyx_n_s_boxCount);
  Py_CLEAR(clear_module_state->__pyx_n_s_boxIndex);
  Py_CLEAR(clear_module_state->__pyx_n_s_boxMask);
  Py_CLEAR(clear_module_state->__pyx_n_s_boxSerial);
  Py_CLEAR(clear_module_state->__pyx_n_s_breakOffset);
  Py_CLEAR(clear_module_state->__pyx_n_s_btr0);
  Py_CLEAR(clear_module_state->__pyx_n_s_btr1);
  Py_CLEAR(clear_module_state->__pyx_n_s_busGuardianEnable);
  Py_CLEAR(clear_module_state->__pyx_n_s_busGuardianTick);
  Py_CLEAR(clear_module_state->__pyx_n_s_busParams);
  Py_CLEAR(clear_module_state->__pyx_n_s_busType);
  Py_CLEAR(clear_module_state->__pyx_n_s_bypass);
  Py_CLEAR(clear_module_state->__pyx_n_s_callSign);
  Py_CLEAR(clear_module_state->__pyx_n_s_can);
  Py_CLEAR(clear_module_state->__pyx_n_s_canFD);
  Py_CLEAR(clear_module_state->__pyx_n_s_canFdConf);
  Py_CLEAR(clear_module_state->__pyx_n_s_canId);
  Py_CLEAR(clear_module_state->__pyx_n_s_canOpMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_ccError);
  Py_CLEAR(clear_module_state->__pyx_n_s_cfgMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_ch);
  Py_CLEAR(clear_module_state->__pyx_n_s_chanIndex);
  Py_CLEAR(clear_module_state->__pyx_n_s_channel);
  Py_CLEAR(clear_module_state->__pyx_n_s_channelBusActiveCapabilities);
  Py_CLEAR(clear_module_state->__pyx_n_s_channelBusCapabilities);
  Py_CLEAR(clear_module_state->__pyx_n_s_channelCapabilities);
  Py_CLEAR(clear_module_state->__pyx_n_s_channelConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_channelCount);
  Py_CLEAR(clear_module_state->__pyx_n_s_channelDirection);
  Py_CLEAR(clear_module_state->__pyx_n_s_channelIndex);
  Py_CLEAR(clear_module_state->__pyx_n_s_channelMask);
  Py_CLEAR(clear_module_state->__pyx_n_s_channelTime);
  Py_CLEAR(clear_module_state->__pyx_n_s_chipParams);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_clockCorrFailedCounter);
  Py_CLEAR(clear_module_state->__pyx_n_s_clockMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_clusterConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_code);
  Py_CLEAR(clear_module_state->__pyx_n_s_compatibleSpeedGrade);
  Py_CLEAR(clear_module_state->__pyx_n_s_configError);
  Py_CLEAR(clear_module_state->__pyx_n_s_connectedBusType);
  Py_CLEAR(clear_module_state->__pyx_n_s_connectionInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_connector);
  Py_CLEAR(clear_module_state->__pyx_n_s_currentlyAvailableTimestamps);
  Py_CLEAR(clear_module_state->__pyx_n_s_cycleCount);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_dataBitRate);
  Py_CLEAR(clear_module_state->__pyx_n_s_delimiterOffset);
  Py_CLEAR(clear_module_state->__pyx_n_s_dir);
  Py_CLEAR(clear_module_state->__pyx_n_s_dlc);
  Py_CLEAR(clear_module_state->__pyx_n_s_dllVersion);
  Py_CLEAR(clear_module_state->__pyx_n_s_doNotUse);
  Py_CLEAR(clear_module_state->__pyx_n_s_dominantRecessiveDelay);
  Py_CLEAR(clear_module_state->__pyx_n_s_dominantTimeout);
  Py_CLEAR(clear_module_state->__pyx_n_s_driverConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_driverVersion);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_err);
  Py_CLEAR(clear_module_state->__pyx_n_s_errorInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_errorMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_ethernet);
  Py_CLEAR(clear_module_state->__pyx_n_s_evenSyncFramesA);
  Py_CLEAR(clear_module_state->__pyx_n_s_evenSyncFramesB);
  Py_CLEAR(clear_module_state->__pyx_n_s_eventBuffer);
  Py_CLEAR(clear_module_state->__pyx_n_s_eventCount);
  Py_CLEAR(clear_module_state->__pyx_n_s_externalClockCorrectionMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_filterChannelMask);
  Py_CLEAR(clear_module_state->__pyx_n_s_filterFirstSlot);
  Py_CLEAR(clear_module_state->__pyx_n_s_filterLastSlot);
  Py_CLEAR(clear_module_state->__pyx_n_s_filterStatus);
  Py_CLEAR(clear_module_state->__pyx_n_s_filterTypeMask);
  Py_CLEAR(clear_module_state->__pyx_n_s_first_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_flags);
  Py_CLEAR(clear_module_state->__pyx_n_s_flagsChip);
  Py_CLEAR(clear_module_state->__pyx_n_s_flexray);
  Py_CLEAR(clear_module_state->__pyx_n_s_fpgaCoreCapabilities);
  Py_CLEAR(clear_module_state->__pyx_n_s_frCCError);
  Py_CLEAR(clear_module_state->__pyx_n_s_frChannel);
  Py_CLEAR(clear_module_state->__pyx_n_s_frClockCorrectionFailure);
  Py_CLEAR(clear_module_state->__pyx_n_s_frError);
  Py_CLEAR(clear_module_state->__pyx_n_s_frMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_frNitFailure);
  Py_CLEAR(clear_module_state->__pyx_n_s_frNmVector);
  Py_CLEAR(clear_module_state->__pyx_n_s_frPocMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_frRxFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_frSpyFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_frSpySymbol);
  Py_CLEAR(clear_module_state->__pyx_n_s_frStartCycle);
  Py_CLEAR(clear_module_state->__pyx_n_s_frStartupAttributes);
  Py_CLEAR(clear_module_state->__pyx_n_s_frStatus);
  Py_CLEAR(clear_module_state->__pyx_n_s_frSymbolWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_frSyncFramesBelowMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_frSyncFramesOverload);
  Py_CLEAR(clear_module_state->__pyx_n_s_frSyncPulse);
  Py_CLEAR(clear_module_state->__pyx_n_s_frTxFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_frWakeup);
  Py_CLEAR(clear_module_state->__pyx_n_s_frameCRC);
  Py_CLEAR(clear_module_state->__pyx_n_s_frameError);
  Py_CLEAR(clear_module_state->__pyx_n_s_frameLength);
  Py_CLEAR(clear_module_state->__pyx_n_s_gChannels);
  Py_CLEAR(clear_module_state->__pyx_n_s_gColdStartAttempts);
  Py_CLEAR(clear_module_state->__pyx_n_s_gListenNoise);
  Py_CLEAR(clear_module_state->__pyx_n_s_gMacroPerCycle);
  Py_CLEAR(clear_module_state->__pyx_n_s_gMaxWithoutClockCorrectionFatal);
  Py_CLEAR(clear_module_state->__pyx_n_s_gMaxWithoutClockCorrectionPassiv);
  Py_CLEAR(clear_module_state->__pyx_n_s_gNetworkManagementVectorLength);
  Py_CLEAR(clear_module_state->__pyx_n_s_gNumberOfMinislots);
  Py_CLEAR(clear_module_state->__pyx_n_s_gNumberOfStaticSlots);
  Py_CLEAR(clear_module_state->__pyx_n_s_gOffsetCorrectionStart);
  Py_CLEAR(clear_module_state->__pyx_n_s_gPayloadLengthStatic);
  Py_CLEAR(clear_module_state->__pyx_n_s_gSyncNodeMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdActionPointOffset);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdCASRxLowMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdDynamicSlotIdlePhase);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdMacrotick);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdMiniSlotActionPointOffset);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdMinislot);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdNIT);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdStaticSlot);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdSymbolWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdTSSTransmitter);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdWakeupSymbolRxIdle);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdWakeupSymbolRxLow);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdWakeupSymbolRxWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdWakeupSymbolTxIdle);
  Py_CLEAR(clear_module_state->__pyx_n_s_gdWakeupSymbolTxLow);
  Py_CLEAR(clear_module_state->__pyx_n_s_headerCRC);
  Py_CLEAR(clear_module_state->__pyx_n_s_headerFlags);
  Py_CLEAR(clear_module_state->__pyx_n_s_hwChannel);
  Py_CLEAR(clear_module_state->__pyx_n_s_hwIndex);
  Py_CLEAR(clear_module_state->__pyx_n_s_hwType);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_idRange);
  Py_CLEAR(clear_module_state->__pyx_n_s_incrementOffset);
  Py_CLEAR(clear_module_state->__pyx_n_s_incrementSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_inicFwVersion);
  Py_CLEAR(clear_module_state->__pyx_n_s_interfaceVersion);
  Py_CLEAR(clear_module_state->__pyx_n_s_isOnBus);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_j);
  Py_CLEAR(clear_module_state->__pyx_n_s_last_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_level);
  Py_CLEAR(clear_module_state->__pyx_n_s_licInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_licInfoArray);
  Py_CLEAR(clear_module_state->__pyx_n_s_licInfoArraySize);
  Py_CLEAR(clear_module_state->__pyx_n_s_licName);
  Py_CLEAR(clear_module_state->__pyx_n_s_lineMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_link);
  Py_CLEAR(clear_module_state->__pyx_n_s_lowLength);
  Py_CLEAR(clear_module_state->__pyx_kp_s_macAddr_6);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_mask);
  Py_CLEAR(clear_module_state->__pyx_n_s_maxBitrate);
  Py_CLEAR(clear_module_state->__pyx_n_s_maximalBaudrate);
  Py_CLEAR(clear_module_state->__pyx_n_s_maximalSupplyVoltage);
  Py_CLEAR(clear_module_state->__pyx_n_s_messageCount);
  Py_CLEAR(clear_module_state->__pyx_n_s_message_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_minBitrate);
  Py_CLEAR(clear_module_state->__pyx_n_s_minGap);
  Py_CLEAR(clear_module_state->__pyx_n_s_minimalSupplyVoltage);
  Py_CLEAR(clear_module_state->__pyx_n_s_mode);
  Py_CLEAR(clear_module_state->__pyx_n_s_most);
  Py_CLEAR(clear_module_state->__pyx_n_s_msg);
  Py_CLEAR(clear_module_state->__pyx_n_s_msgCnt);
  Py_CLEAR(clear_module_state->__pyx_n_s_msgCntSent);
  Py_CLEAR(clear_module_state->__pyx_n_s_msgFlags);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_newValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_nmVector);
  Py_CLEAR(clear_module_state->__pyx_n_s_notifyReason);
  Py_CLEAR(clear_module_state->__pyx_n_s_oddSyncFramesA);
  Py_CLEAR(clear_module_state->__pyx_n_s_oddSyncFramesB);
  Py_CLEAR(clear_module_state->__pyx_n_s_offset);
  Py_CLEAR(clear_module_state->__pyx_n_s_options);
  Py_CLEAR(clear_module_state->__pyx_n_s_outputMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_pAcceptanceFilter);
  Py_CLEAR(clear_module_state->__pyx_n_s_pAllowHaltDueToClock);
  Py_CLEAR(clear_module_state->__pyx_n_s_pAllowPassiveToActive);
  Py_CLEAR(clear_module_state->__pyx_n_s_pBoxCount);
  Py_CLEAR(clear_module_state->__pyx_n_s_pBoxMask);
  Py_CLEAR(clear_module_state->__pyx_n_s_pBoxSerial);
  Py_CLEAR(clear_module_state->__pyx_n_s_pCanFdConf);
  Py_CLEAR(clear_module_state->__pyx_n_s_pChannelTime);
  Py_CLEAR(clear_module_state->__pyx_n_s_pChannels);
  Py_CLEAR(clear_module_state->__pyx_n_s_pChannelsMTS);
  Py_CLEAR(clear_module_state->__pyx_n_s_pChipParams);
  Py_CLEAR(clear_module_state->__pyx_n_s_pClusterDriftDamping);
  Py_CLEAR(clear_module_state->__pyx_n_s_pDecodingCorrection);
  Py_CLEAR(clear_module_state->__pyx_n_s_pDelayCompensationA);
  Py_CLEAR(clear_module_state->__pyx_n_s_pDelayCompensationB);
  Py_CLEAR(clear_module_state->__pyx_n_s_pDriverConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_pEventBuffer);
  Py_CLEAR(clear_module_state->__pyx_n_s_pEventCount);
  Py_CLEAR(clear_module_state->__pyx_n_s_pEventList);
  Py_CLEAR(clear_module_state->__pyx_n_s_pEventString);
  Py_CLEAR(clear_module_state->__pyx_n_s_pExternOffsetCorrection);
  Py_CLEAR(clear_module_state->__pyx_n_s_pExternRateCorrection);
  Py_CLEAR(clear_module_state->__pyx_n_s_pHwChannel);
  Py_CLEAR(clear_module_state->__pyx_n_s_pHwIndex);
  Py_CLEAR(clear_module_state->__pyx_n_s_pHwType);
  Py_CLEAR(clear_module_state->__pyx_n_s_pKeySlotUsedForStartup);
  Py_CLEAR(clear_module_state->__pyx_n_s_pKeySlotUsedForSync);
  Py_CLEAR(clear_module_state->__pyx_n_s_pLatestTx);
  Py_CLEAR(clear_module_state->__pyx_n_s_pLicInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_pLicInfoArray);
  Py_CLEAR(clear_module_state->__pyx_n_s_pMacroInitialOffsetA);
  Py_CLEAR(clear_module_state->__pyx_n_s_pMacroInitialOffsetB);
  Py_CLEAR(clear_module_state->__pyx_n_s_pMaxPayloadLengthDynamic);
  Py_CLEAR(clear_module_state->__pyx_n_s_pMessage);
  Py_CLEAR(clear_module_state->__pyx_n_s_pMicroInitialOffsetA);
  Py_CLEAR(clear_module_state->__pyx_n_s_pMicroInitialOffsetB);
  Py_CLEAR(clear_module_state->__pyx_n_s_pMicroPerCycle);
  Py_CLEAR(clear_module_state->__pyx_n_s_pMicroPerMacroNom);
  Py_CLEAR(clear_module_state->__pyx_n_s_pMsgCntSent);
  Py_CLEAR(clear_module_state->__pyx_n_s_pOffsetCorrectionOut);
  Py_CLEAR(clear_module_state->__pyx_n_s_pPreviousValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_pRateCorrectionOut);
  Py_CLEAR(clear_module_state->__pyx_n_s_pSamplesPerMicrotick);
  Py_CLEAR(clear_module_state->__pyx_n_s_pSingleSlotEnabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_pTime);
  Py_CLEAR(clear_module_state->__pyx_n_s_pWakeupChannel);
  Py_CLEAR(clear_module_state->__pyx_n_s_pWakeupPattern);
  Py_CLEAR(clear_module_state->__pyx_n_s_pXLcanTxEvents);
  Py_CLEAR(clear_module_state->__pyx_n_s_pXlCanTxEvt);
  Py_CLEAR(clear_module_state->__pyx_n_s_pXlHandle);
  Py_CLEAR(clear_module_state->__pyx_n_s_parity);
  Py_CLEAR(clear_module_state->__pyx_n_s_payloadLength);
  Py_CLEAR(clear_module_state->__pyx_n_s_pdAcceptedStartupRange);
  Py_CLEAR(clear_module_state->__pyx_n_s_pdListenTimeout);
  Py_CLEAR(clear_module_state->__pyx_n_s_pdMaxDrift);
  Py_CLEAR(clear_module_state->__pyx_n_s_pdMicrotick);
  Py_CLEAR(clear_module_state->__pyx_n_s_permissionMask);
  Py_CLEAR(clear_module_state->__pyx_n_s_permission_mask);
  Py_CLEAR(clear_module_state->__pyx_n_s_phy);
  Py_CLEAR(clear_module_state->__pyx_n_s_plevel);
  Py_CLEAR(clear_module_state->__pyx_n_s_portHandle);
  Py_CLEAR(clear_module_state->__pyx_n_s_port_handle);
  Py_CLEAR(clear_module_state->__pyx_n_s_previousValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptimerChannelMask);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptimerRate);
  Py_CLEAR(clear_module_state->__pyx_n_s_pxlClusterConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_pxlEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_pxlFrChannelConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_queueLevel);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_raw);
  Py_CLEAR(clear_module_state->__pyx_kp_s_raw_24);
  Py_CLEAR(clear_module_state->__pyx_kp_s_raw_28);
  Py_CLEAR(clear_module_state->__pyx_kp_s_raw_data_10);
  Py_CLEAR(clear_module_state->__pyx_n_s_recessiveDominantDelay);
  Py_CLEAR(clear_module_state->__pyx_n_s_repetition);
  Py_CLEAR(clear_module_state->__pyx_n_s_res1);
  Py_CLEAR(clear_module_state->__pyx_n_s_resNet);
  Py_CLEAR(clear_module_state->__pyx_n_s_reserved);
  Py_CLEAR(clear_module_state->__pyx_n_s_reserved0);
  Py_CLEAR(clear_module_state->__pyx_n_s_reserved1);
  Py_CLEAR(clear_module_state->__pyx_kp_s_reserved1_7);
  Py_CLEAR(clear_module_state->__pyx_n_s_reserved2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_reserved_10);
  Py_CLEAR(clear_module_state->__pyx_kp_s_reserved_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_retEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_rxQueueSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_sam);
  Py_CLEAR(clear_module_state->__pyx_n_s_samAbr);
  Py_CLEAR(clear_module_state->__pyx_n_s_serialNumber);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_sjw);
  Py_CLEAR(clear_module_state->__pyx_n_s_sjwAbr);
  Py_CLEAR(clear_module_state->__pyx_n_s_sjwDbr);
  Py_CLEAR(clear_module_state->__pyx_n_s_slotID);
  Py_CLEAR(clear_module_state->__pyx_n_s_specialCabFlags);
  Py_CLEAR(clear_module_state->__pyx_n_s_specialDeviceStatus);
  Py_CLEAR(clear_module_state->__pyx_n_s_speed);
  Py_CLEAR(clear_module_state->__pyx_n_s_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_statusType);
  Py_CLEAR(clear_module_state->__pyx_n_s_symbol);
  Py_CLEAR(clear_module_state->__pyx_n_s_symbolWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_symbolWindowMask);
  Py_CLEAR(clear_module_state->__pyx_n_s_tag);
  Py_CLEAR(clear_module_state->__pyx_n_s_tagData);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_time);
  Py_CLEAR(clear_module_state->__pyx_n_s_timeStamp);
  Py_CLEAR(clear_module_state->__pyx_n_s_timeStampSync);
  Py_CLEAR(clear_module_state->__pyx_n_s_timerChannelMask);
  Py_CLEAR(clear_module_state->__pyx_n_s_timerRate);
  Py_CLEAR(clear_module_state->__pyx_n_s_transId);
  Py_CLEAR(clear_module_state->__pyx_n_s_transceiverName);
  Py_CLEAR(clear_module_state->__pyx_n_s_transceiverState);
  Py_CLEAR(clear_module_state->__pyx_n_s_transceiverType);
  Py_CLEAR(clear_module_state->__pyx_n_s_triggerSource);
  Py_CLEAR(clear_module_state->__pyx_n_s_tseg1);
  Py_CLEAR(clear_module_state->__pyx_n_s_tseg1Abr);
  Py_CLEAR(clear_module_state->__pyx_n_s_tseg1Dbr);
  Py_CLEAR(clear_module_state->__pyx_n_s_tseg2);
  Py_CLEAR(clear_module_state->__pyx_n_s_tseg2Abr);
  Py_CLEAR(clear_module_state->__pyx_n_s_tseg2Dbr);
  Py_CLEAR(clear_module_state->__pyx_n_s_tssLength);
  Py_CLEAR(clear_module_state->__pyx_n_s_tx);
  Py_CLEAR(clear_module_state->__pyx_n_s_txMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_txrq);
  Py_CLEAR(clear_module_state->__pyx_n_s_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_userHandle);
  Py_CLEAR(clear_module_state->__pyx_n_s_vAllowPassivToActive);
  Py_CLEAR(clear_module_state->__pyx_n_s_vClockCorrectionFailed);
  Py_CLEAR(clear_module_state->__pyx_n_s_vExternOffsetControl);
  Py_CLEAR(clear_module_state->__pyx_n_s_vExternRateControl);
  Py_CLEAR(clear_module_state->__pyx_n_s_vOffsetCorrection);
  Py_CLEAR(clear_module_state->__pyx_n_s_vRateCorrection);
  Py_CLEAR(clear_module_state->__pyx_n_s_vxlapi);
  Py_CLEAR(clear_module_state->__pyx_kp_s_vxlapi_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_waitForFinish);
  Py_CLEAR(clear_module_state->__pyx_n_s_wakeupStatus);
  Py_CLEAR(clear_module_state->__pyx_n_s_xlEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_xlFrClusterConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_xlHandle);
  Py_CLEAR(clear_module_state->__pyx_n_s_xlInterfaceVersion);
  Py_CLEAR(clear_module_state->__pyx_n_s_xlstring);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__39);
  Py_CLEAR(clear_module_state->__pyx_tuple__41);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__47);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__69);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__74);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__88);
  Py_CLEAR(clear_module_state->__pyx_tuple__90);
  Py_CLEAR(clear_module_state->__pyx_tuple__92);
  Py_CLEAR(clear_module_state->__pyx_tuple__95);
  Py_CLEAR(clear_module_state->__pyx_tuple__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__6);
  Py_CLEAR(clear_module_state->__pyx_codeobj__7);
  Py_CLEAR(clear_module_state->__pyx_codeobj__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__100);
  Py_CLEAR(clear_module_state->__pyx_tuple__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__10);
  Py_CLEAR(clear_module_state->__pyx_codeobj__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__14);
  Py_CLEAR(clear_module_state->__pyx_codeobj__16);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__20);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__40);
  Py_CLEAR(clear_module_state->__pyx_codeobj__42);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__52);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__62);
  Py_CLEAR(clear_module_state->__pyx_codeobj__64);
  Py_CLEAR(clear_module_state->__pyx_codeobj__66);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__70);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__75);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_n_s_ActivateChannel);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanAddAcceptanceRange);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanFdSetConfiguration);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanFlushTransmitQueue);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanRemoveAcceptanceRange);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanRequestChipState);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanResetAcceptance);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanSetChannelAcceptance);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanSetChannelBitrate);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanSetChannelMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanSetChannelOutput);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanSetChannelParams);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanSetChannelParamsC200);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanSetChannelTransceiver);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanSetReceiveMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanTransmit);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanTransmitEx);
  Py_VISIT(traverse_module_state->__pyx_n_s_ChipState);
  Py_VISIT(traverse_module_state->__pyx_n_s_CloseDriver);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClosePort);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeactivateChannel);
  Py_VISIT(traverse_module_state->__pyx_n_s_ErrorFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_FlushReceiveQueue);
  Py_VISIT(traverse_module_state->__pyx_n_s_FrActivateSpy);
  Py_VISIT(traverse_module_state->__pyx_n_s_FrGetChannelConfiguration);
  Py_VISIT(traverse_module_state->__pyx_n_s_FrInitStartupAndSync);
  Py_VISIT(traverse_module_state->__pyx_n_s_FrReceive);
  Py_VISIT(traverse_module_state->__pyx_n_s_FrSendSymbolWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_FrSetAcceptanceFilter);
  Py_VISIT(traverse_module_state->__pyx_n_s_FrSetConfiguration);
  Py_VISIT(traverse_module_state->__pyx_n_s_FrSetMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_FrSetTransceiverMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_FrSetupSymbolWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_FrTransmit);
  Py_VISIT(traverse_module_state->__pyx_n_s_GenerateSyncPulse);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetApplConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetChannelIndex);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetChannelMask);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetChannelTime);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetDriverConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetErrorString);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetKeymanBoxes);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetKeymanInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetLicenseInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetReceiveQueueLevel);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetRemoteDriverConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetSyncTime);
  Py_VISIT(traverse_module_state->__pyx_n_s_KeyError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_No_value_specified_for_struct_at);
  Py_VISIT(traverse_module_state->__pyx_kp_s_No_value_specified_for_struct_at_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_No_value_specified_for_struct_at_3);
  Py_VISIT(traverse_module_state->__pyx_kp_s_No_value_specified_for_struct_at_4);
  Py_VISIT(traverse_module_state->__pyx_kp_s_No_value_specified_for_struct_at_5);
  Py_VISIT(traverse_module_state->__pyx_n_s_OpenDriver);
  Py_VISIT(traverse_module_state->__pyx_n_s_OpenPort);
  Py_VISIT(traverse_module_state->__pyx_n_s_PopupHwConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_Receive);
  Py_VISIT(traverse_module_state->__pyx_n_s_ResetClock);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetApplConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetGlobalTimeSync);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetNotification);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetTimerRate);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetTimerRateAndChannel);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_AVG_BIT_LENG);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_CODING_RZ);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_DUTY_FACTOR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_FRAME_FORMAT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_GAP_VIOLATIO);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_RX_ERROR_PARITY);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_TX_ERROR_ACCESS_DENIE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_TX_ERROR_TRANSMISSION);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_TX_MSG_CTRL_CYCLIC);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_EV_TX_MSG_CTRL_ON_REQUES);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_DISABL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_ENABLE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_FAST_MAX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_FAST_MIN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_RX_MAX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_RX_MIN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MAX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MIN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_CHANNEL_DIR_RX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_CHANNEL_DIR_TX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_CYCLE_MAX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_FLAG_CYCLIC);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_FLAG_DELETE_CYCLIC);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_FLAG_ON_REQUEST);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_GAP_4BIT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_GAP_DEFAULT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_GAP_MAX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_PARITY_DEFAULT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_PARITY_DISABLED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_PARITY_EVEN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_MSG_PARITY_ODD);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_QUEUE_OVERFLOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MAX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MIN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ACTIVATE_NONE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ACTIVATE_RESET_CLOCK);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CAN20);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CANFD);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_TYPE_A429);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_TYPE_AFDX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_TYPE_CAN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_TYPE_DAIO);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_TYPE_ETHERNET);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_TYPE_FLEXRAY);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_TYPE_J1708);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_TYPE_LIN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_TYPE_MOST);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_BUS_TYPE_NONE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_EV_TAG_TX_MSG);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_EXT_MSG_ID);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_ERROR_FRAME);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_NERR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_OVERRUN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_REMOTE_FRAME);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_RESERVED_1);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_SRR_BIT_DOM);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_TX_COMPLETED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_TX_REQUEST);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_MSG_FLAG_WAKEUP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_TXMSG_FLAG_BRS);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_TXMSG_FLAG_EDL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_TXMSG_FLAG_HIGHPRIO);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_TXMSG_FLAG_RTR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_CAN_TXMSG_FLAG_WAKEUP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERROR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_BAD_EXE_FORMAT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_CANNOT_OPEN_DRIVER);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_CHAN_IS_ONLINE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_CMD_HANDLING);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_CMD_TIMEOUT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_CONNECTION_BROKEN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_CONNECTION_CLOSED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_CONNECTION_FAILED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_DLL_NOT_FOUND);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_EDL_NOT_SET);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_EDL_RTR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_ERROR_CRC);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_ETH_MAC_ACTIVATION_FAILED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_ETH_PHY_ACTIVATION_FAILED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_ETH_PHY_CONFIG_ABORTED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_ETH_RESET_FAILED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_ETH_SET_CONFIG_DELAYED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_ETH_UNSUPPORTED_FEATURE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_HW_NOT_PRESENT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_HW_NOT_READY);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INIT_ACCESS_MISSING);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INSUFFICIENT_BUFFER);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INTERNAL_ERROR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_ACCESS);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_ADDRESS);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_CANID);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_CHANNEL_MASK);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_CHAN_INDEX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_DLC);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_FDFLAG_MODE20);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_HANDLE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_LEVEL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_PORT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_RESERVED_FLD);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_SIZE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_STREAM_NAME);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_INVALID_USER_BUFFER);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_NOTIFY_ALREADY_ACTIVE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_NOT_FOUND);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_NOT_IMPLEMENTED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_NOT_SUPPORTED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_NO_DATA_DETECTED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_NO_LICENSE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_NO_RESOURCES);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_NO_SYSTEM_RESOURCES);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_PORT_IS_OFFLINE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_QUEUE_IS_EMPTY);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_QUEUE_IS_FULL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_QUEUE_OVERRUN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_REQ_NOT_ACCEP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_RESERVED_NOT_ZERO);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_STREAM_NOT_CONNECTED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_STREAM_NOT_FOUND);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_TWICE_REGISTER);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_TX_NOT_POSSIBLE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_UNEXP_NET_ERR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_UNKNOWN_FLAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_WRONG_BUS_TYPE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_WRONG_CHIP_TYPE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_WRONG_COMMAND);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_ERR_WRONG_PARAMETER);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_EVENT_FLAG_OVERRUN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_CC_COLD_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_CC_COLD_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_CHANNEL_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_CHANNEL_AB);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_CHANNEL_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_ASYNCHRON);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_COMBINED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_SYNCHRONO);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_CHANNEL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_INIT_AP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_VALID_C);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CC_EDA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CC_EDB);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CC_ERROR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CC_IIBA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CC_IOBA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CC_LTVA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CC_LTVB);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CC_MHF);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CC_PERR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CC_TABA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CC_TABB);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_CLOCK_CORR_FAILURE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_MAX_OFFSET_CORRECTIO);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_MAX_RATE_CORRECTION);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_MISSING_OFFSET_CORRE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_MISSING_RATE_CORRECT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_NIT_FAILURE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_NIT_SBNA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_NIT_SBNB);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_NIT_SENA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_NIT_SENB);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_POC_ACTIVE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_POC_COMM_HALT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_POC_MODE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_POC_PASSIVE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_BELOWMIN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_OVERLOAD);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FILTER_BLOCK);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FILTER_CHANNEL_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FILTER_CHANNEL_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FILTER_PASS);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FILTER_TYPE_DATA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FILTER_TYPE_FILLUP_NF);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FILTER_TYPE_NF);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_CONTENT_ERROR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_DATA_UPDATE_LOST);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_EMPTY_SLOT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_FRAME_TRANSMITTE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_FR_RESERVED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_NEW_DATA_TX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_NULLFRAME);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_REQ_TXACK);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_RX_UNEXPECTED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VI);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_STARTUP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_SYNC);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_SYNTAX_ERROR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_TXACK_SS);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_FRAMEFLAG_TX_CONFLICT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_MODE_COLDSTART_FOLLOWING);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_MODE_COLDSTART_LEADING);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_MODE_COLD_NORMAL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_MODE_NONE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_MODE_NORMAL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_MODE_WAKEUP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_NM_VECTOR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_16BIT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_32BIT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_8BIT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_NONE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_QUEUE_OVERFLOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_RX_FRAME);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SPY_CHANNEL_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SPY_CHANNEL_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SPY_FRAME);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_BUS_ERROR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ER);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAMING_ERRO);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_HEADER_CRC_E);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SPY_SYMBOL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_START_CYCLE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_ABORT_STARTUP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_COLDSTART_COLLISION);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_COLDSTART_CONSISTEN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_COLDSTART_GAP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_COLDSTART_JOIN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_COLDSTART_LISTEN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_CONFIG);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_DEFAULT_CONFIG);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_HALT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_INITIALIZE_SCHEDULE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_INTEGRATION_COLDSTA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_INTEGRATION_CONSIST);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_INTEGRATION_LISTEN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_MONITOR_MODE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_NORMAL_ACTIVE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_NORMAL_PASSIVE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_READY);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_STARTUP_PREPARE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_STARTUP_SUCCESS);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_WAKEUP_DETECT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_WAKEUP_LISTEN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_WAKEUP_SEND);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_STATUS_WAKEUP_STANDBY);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SYMBOL_CAS);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SYMBOL_MTS);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_MTSA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_MTSB);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_SBSA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_SBSB);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_SESA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_SESB);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_TCSA);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SYMBOL_STATUS_TCSB);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_SYMBOL_WINDOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_TRANCEIVER_STATUS);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_NORMAL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_RECEIVE_O);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_SLEEP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_STANDBY);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_TX_FRAME);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_TX_MODE_CYCLIC);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_TX_MODE_NONE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_TX_MODE_SINGLE_SHOT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_WAKEUP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_WAKEUP_COLLISION_HEADER);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_WAKEUP_COLLISION_UNKNOWN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_WAKEUP_COLLISION_WUP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_WAKEUP_RECEIVED_HEADER);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_WAKEUP_RECEIVED_WUP);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_WAKEUP_RESERVED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_WAKEUP_TRANSMITTED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_FR_WAKEUP_UNDEFINED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_CANAC2PCI);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_CANBOARDXL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_CANBOARDXL_PXI);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_CANCARDX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_CANCARDXL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_CANCARDXLE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_CANCARDY);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_CANCASEXL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_CANCASEXL_LOG_OBSOLETE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_CSMCAN);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_IPCL8800);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_IPCLIENT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_IPSERVER);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_IPSRV8800);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_NONE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VIRTUAL);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN0601);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN1610);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN1611);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN1630);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN1630_LOG);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN1640);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN2600);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN2610);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN2640);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN3300);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN3600);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN5610);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN5610A);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN7570);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN7572);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN7600);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN7610);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN7640);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN8800);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN8900);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN8950);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN8970);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VN8972);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VT6204);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VX0312);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VX1121);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_HWTYPE_VX1131);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_INTERFACE_VERSION);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_INTERFACE_VERSION_V2);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_INTERFACE_VERSION_V3);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_INTERFACE_VERSION_V4);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_INVALID_PORTHANDLE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_LIN_MSGFLAG_CRCERROR);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_LIN_MSGFLAG_TX);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_MAX_HWTYPE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_NOTIFY_REASON_CHANNEL_ACTIVAT);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_NOTIFY_REASON_CHANNEL_DEACTIV);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_NOTIFY_REASON_PORT_CLOSED);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_PENDING);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_SET_TIMESYNC_NO_CHANGE);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_SET_TIMESYNC_OFF);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_SET_TIMESYNC_ON);
  Py_VISIT(traverse_module_state->__pyx_n_s_XL_SUCCESS);
  Py_VISIT(traverse_module_state->__pyx_n_s_XLstatus);
  Py_VISIT(traverse_module_state->__pyx_n_s__104);
  Py_VISIT(traverse_module_state->__pyx_n_s_a429);
  Py_VISIT(traverse_module_state->__pyx_n_s_acceptanceFilter);
  Py_VISIT(traverse_module_state->__pyx_n_s_accessMask);
  Py_VISIT(traverse_module_state->__pyx_n_s_activeSpeedGrade);
  Py_VISIT(traverse_module_state->__pyx_n_s_appChannel);
  Py_VISIT(traverse_module_state->__pyx_n_s_appName);
  Py_VISIT(traverse_module_state->__pyx_n_s_applicationNotification);
  Py_VISIT(traverse_module_state->__pyx_n_s_arbitrationBitRate);
  Py_VISIT(traverse_module_state->__pyx_n_s_articleNumber);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_autoBaudrate);
  Py_VISIT(traverse_module_state->__pyx_n_s_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_bAvailable);
  Py_VISIT(traverse_module_state->__pyx_n_s_baudrate);
  Py_VISIT(traverse_module_state->__pyx_n_s_bitRate);
  Py_VISIT(traverse_module_state->__pyx_n_s_bitrate);
  Py_VISIT(traverse_module_state->__pyx_n_s_boxCount);
  Py_VISIT(traverse_module_state->__pyx_n_s_boxIndex);
  Py_VISIT(traverse_module_state->__pyx_n_s_boxMask);
  Py_VISIT(traverse_module_state->__pyx_n_s_boxSerial);
  Py_VISIT(traverse_module_state->__pyx_n_s_breakOffset);
  Py_VISIT(traverse_module_state->__pyx_n_s_btr0);
  Py_VISIT(traverse_module_state->__pyx_n_s_btr1);
  Py_VISIT(traverse_module_state->__pyx_n_s_busGuardianEnable);
  Py_VISIT(traverse_module_state->__pyx_n_s_busGuardianTick);
  Py_VISIT(traverse_module_state->__pyx_n_s_busParams);
  Py_VISIT(traverse_module_state->__pyx_n_s_busType);
  Py_VISIT(traverse_module_state->__pyx_n_s_bypass);
  Py_VISIT(traverse_module_state->__pyx_n_s_callSign);
  Py_VISIT(traverse_module_state->__pyx_n_s_can);
  Py_VISIT(traverse_module_state->__pyx_n_s_canFD);
  Py_VISIT(traverse_module_state->__pyx_n_s_canFdConf);
  Py_VISIT(traverse_module_state->__pyx_n_s_canId);
  Py_VISIT(traverse_module_state->__pyx_n_s_canOpMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_ccError);
  Py_VISIT(traverse_module_state->__pyx_n_s_cfgMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_ch);
  Py_VISIT(traverse_module_state->__pyx_n_s_chanIndex);
  Py_VISIT(traverse_module_state->__pyx_n_s_channel);
  Py_VISIT(traverse_module_state->__pyx_n_s_channelBusActiveCapabilities);
  Py_VISIT(traverse_module_state->__pyx_n_s_channelBusCapabilities);
  Py_VISIT(traverse_module_state->__pyx_n_s_channelCapabilities);
  Py_VISIT(traverse_module_state->__pyx_n_s_channelConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_channelCount);
  Py_VISIT(traverse_module_state->__pyx_n_s_channelDirection);
  Py_VISIT(traverse_module_state->__pyx_n_s_channelIndex);
  Py_VISIT(traverse_module_state->__pyx_n_s_channelMask);
  Py_VISIT(traverse_module_state->__pyx_n_s_channelTime);
  Py_VISIT(traverse_module_state->__pyx_n_s_chipParams);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_clockCorrFailedCounter);
  Py_VISIT(traverse_module_state->__pyx_n_s_clockMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_clusterConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_code);
  Py_VISIT(traverse_module_state->__pyx_n_s_compatibleSpeedGrade);
  Py_VISIT(traverse_module_state->__pyx_n_s_configError);
  Py_VISIT(traverse_module_state->__pyx_n_s_connectedBusType);
  Py_VISIT(traverse_module_state->__pyx_n_s_connectionInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_connector);
  Py_VISIT(traverse_module_state->__pyx_n_s_currentlyAvailableTimestamps);
  Py_VISIT(traverse_module_state->__pyx_n_s_cycleCount);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_dataBitRate);
  Py_VISIT(traverse_module_state->__pyx_n_s_delimiterOffset);
  Py_VISIT(traverse_module_state->__pyx_n_s_dir);
  Py_VISIT(traverse_module_state->__pyx_n_s_dlc);
  Py_VISIT(traverse_module_state->__pyx_n_s_dllVersion);
  Py_VISIT(traverse_module_state->__pyx_n_s_doNotUse);
  Py_VISIT(traverse_module_state->__pyx_n_s_dominantRecessiveDelay);
  Py_VISIT(traverse_module_state->__pyx_n_s_dominantTimeout);
  Py_VISIT(traverse_module_state->__pyx_n_s_driverConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_driverVersion);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_err);
  Py_VISIT(traverse_module_state->__pyx_n_s_errorInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_errorMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_ethernet);
  Py_VISIT(traverse_module_state->__pyx_n_s_evenSyncFramesA);
  Py_VISIT(traverse_module_state->__pyx_n_s_evenSyncFramesB);
  Py_VISIT(traverse_module_state->__pyx_n_s_eventBuffer);
  Py_VISIT(traverse_module_state->__pyx_n_s_eventCount);
  Py_VISIT(traverse_module_state->__pyx_n_s_externalClockCorrectionMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_filterChannelMask);
  Py_VISIT(traverse_module_state->__pyx_n_s_filterFirstSlot);
  Py_VISIT(traverse_module_state->__pyx_n_s_filterLastSlot);
  Py_VISIT(traverse_module_state->__pyx_n_s_filterStatus);
  Py_VISIT(traverse_module_state->__pyx_n_s_filterTypeMask);
  Py_VISIT(traverse_module_state->__pyx_n_s_first_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_flags);
  Py_VISIT(traverse_module_state->__pyx_n_s_flagsChip);
  Py_VISIT(traverse_module_state->__pyx_n_s_flexray);
  Py_VISIT(traverse_module_state->__pyx_n_s_fpgaCoreCapabilities);
  Py_VISIT(traverse_module_state->__pyx_n_s_frCCError);
  Py_VISIT(traverse_module_state->__pyx_n_s_frChannel);
  Py_VISIT(traverse_module_state->__pyx_n_s_frClockCorrectionFailure);
  Py_VISIT(traverse_module_state->__pyx_n_s_frError);
  Py_VISIT(traverse_module_state->__pyx_n_s_frMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_frNitFailure);
  Py_VISIT(traverse_module_state->__pyx_n_s_frNmVector);
  Py_VISIT(traverse_module_state->__pyx_n_s_frPocMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_frRxFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_frSpyFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_frSpySymbol);
  Py_VISIT(traverse_module_state->__pyx_n_s_frStartCycle);
  Py_VISIT(traverse_module_state->__pyx_n_s_frStartupAttributes);
  Py_VISIT(traverse_module_state->__pyx_n_s_frStatus);
  Py_VISIT(traverse_module_state->__pyx_n_s_frSymbolWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_frSyncFramesBelowMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_frSyncFramesOverload);
  Py_VISIT(traverse_module_state->__pyx_n_s_frSyncPulse);
  Py_VISIT(traverse_module_state->__pyx_n_s_frTxFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_frWakeup);
  Py_VISIT(traverse_module_state->__pyx_n_s_frameCRC);
  Py_VISIT(traverse_module_state->__pyx_n_s_frameError);
  Py_VISIT(traverse_module_state->__pyx_n_s_frameLength);
  Py_VISIT(traverse_module_state->__pyx_n_s_gChannels);
  Py_VISIT(traverse_module_state->__pyx_n_s_gColdStartAttempts);
  Py_VISIT(traverse_module_state->__pyx_n_s_gListenNoise);
  Py_VISIT(traverse_module_state->__pyx_n_s_gMacroPerCycle);
  Py_VISIT(traverse_module_state->__pyx_n_s_gMaxWithoutClockCorrectionFatal);
  Py_VISIT(traverse_module_state->__pyx_n_s_gMaxWithoutClockCorrectionPassiv);
  Py_VISIT(traverse_module_state->__pyx_n_s_gNetworkManagementVectorLength);
  Py_VISIT(traverse_module_state->__pyx_n_s_gNumberOfMinislots);
  Py_VISIT(traverse_module_state->__pyx_n_s_gNumberOfStaticSlots);
  Py_VISIT(traverse_module_state->__pyx_n_s_gOffsetCorrectionStart);
  Py_VISIT(traverse_module_state->__pyx_n_s_gPayloadLengthStatic);
  Py_VISIT(traverse_module_state->__pyx_n_s_gSyncNodeMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdActionPointOffset);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdCASRxLowMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdDynamicSlotIdlePhase);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdMacrotick);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdMiniSlotActionPointOffset);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdMinislot);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdNIT);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdStaticSlot);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdSymbolWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdTSSTransmitter);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdWakeupSymbolRxIdle);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdWakeupSymbolRxLow);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdWakeupSymbolRxWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdWakeupSymbolTxIdle);
  Py_VISIT(traverse_module_state->__pyx_n_s_gdWakeupSymbolTxLow);
  Py_VISIT(traverse_module_state->__pyx_n_s_headerCRC);
  Py_VISIT(traverse_module_state->__pyx_n_s_headerFlags);
  Py_VISIT(traverse_module_state->__pyx_n_s_hwChannel);
  Py_VISIT(traverse_module_state->__pyx_n_s_hwIndex);
  Py_VISIT(traverse_module_state->__pyx_n_s_hwType);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_idRange);
  Py_VISIT(traverse_module_state->__pyx_n_s_incrementOffset);
  Py_VISIT(traverse_module_state->__pyx_n_s_incrementSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_inicFwVersion);
  Py_VISIT(traverse_module_state->__pyx_n_s_interfaceVersion);
  Py_VISIT(traverse_module_state->__pyx_n_s_isOnBus);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_j);
  Py_VISIT(traverse_module_state->__pyx_n_s_last_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_level);
  Py_VISIT(traverse_module_state->__pyx_n_s_licInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_licInfoArray);
  Py_VISIT(traverse_module_state->__pyx_n_s_licInfoArraySize);
  Py_VISIT(traverse_module_state->__pyx_n_s_licName);
  Py_VISIT(traverse_module_state->__pyx_n_s_lineMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_link);
  Py_VISIT(traverse_module_state->__pyx_n_s_lowLength);
  Py_VISIT(traverse_module_state->__pyx_kp_s_macAddr_6);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_mask);
  Py_VISIT(traverse_module_state->__pyx_n_s_maxBitrate);
  Py_VISIT(traverse_module_state->__pyx_n_s_maximalBaudrate);
  Py_VISIT(traverse_module_state->__pyx_n_s_maximalSupplyVoltage);
  Py_VISIT(traverse_module_state->__pyx_n_s_messageCount);
  Py_VISIT(traverse_module_state->__pyx_n_s_message_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_minBitrate);
  Py_VISIT(traverse_module_state->__pyx_n_s_minGap);
  Py_VISIT(traverse_module_state->__pyx_n_s_minimalSupplyVoltage);
  Py_VISIT(traverse_module_state->__pyx_n_s_mode);
  Py_VISIT(traverse_module_state->__pyx_n_s_most);
  Py_VISIT(traverse_module_state->__pyx_n_s_msg);
  Py_VISIT(traverse_module_state->__pyx_n_s_msgCnt);
  Py_VISIT(traverse_module_state->__pyx_n_s_msgCntSent);
  Py_VISIT(traverse_module_state->__pyx_n_s_msgFlags);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_newValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_nmVector);
  Py_VISIT(traverse_module_state->__pyx_n_s_notifyReason);
  Py_VISIT(traverse_module_state->__pyx_n_s_oddSyncFramesA);
  Py_VISIT(traverse_module_state->__pyx_n_s_oddSyncFramesB);
  Py_VISIT(traverse_module_state->__pyx_n_s_offset);
  Py_VISIT(traverse_module_state->__pyx_n_s_options);
  Py_VISIT(traverse_module_state->__pyx_n_s_outputMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_pAcceptanceFilter);
  Py_VISIT(traverse_module_state->__pyx_n_s_pAllowHaltDueToClock);
  Py_VISIT(traverse_module_state->__pyx_n_s_pAllowPassiveToActive);
  Py_VISIT(traverse_module_state->__pyx_n_s_pBoxCount);
  Py_VISIT(traverse_module_state->__pyx_n_s_pBoxMask);
  Py_VISIT(traverse_module_state->__pyx_n_s_pBoxSerial);
  Py_VISIT(traverse_module_state->__pyx_n_s_pCanFdConf);
  Py_VISIT(traverse_module_state->__pyx_n_s_pChannelTime);
  Py_VISIT(traverse_module_state->__pyx_n_s_pChannels);
  Py_VISIT(traverse_module_state->__pyx_n_s_pChannelsMTS);
  Py_VISIT(traverse_module_state->__pyx_n_s_pChipParams);
  Py_VISIT(traverse_module_state->__pyx_n_s_pClusterDriftDamping);
  Py_VISIT(traverse_module_state->__pyx_n_s_pDecodingCorrection);
  Py_VISIT(traverse_module_state->__pyx_n_s_pDelayCompensationA);
  Py_VISIT(traverse_module_state->__pyx_n_s_pDelayCompensationB);
  Py_VISIT(traverse_module_state->__pyx_n_s_pDriverConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_pEventBuffer);
  Py_VISIT(traverse_module_state->__pyx_n_s_pEventCount);
  Py_VISIT(traverse_module_state->__pyx_n_s_pEventList);
  Py_VISIT(traverse_module_state->__pyx_n_s_pEventString);
  Py_VISIT(traverse_module_state->__pyx_n_s_pExternOffsetCorrection);
  Py_VISIT(traverse_module_state->__pyx_n_s_pExternRateCorrection);
  Py_VISIT(traverse_module_state->__pyx_n_s_pHwChannel);
  Py_VISIT(traverse_module_state->__pyx_n_s_pHwIndex);
  Py_VISIT(traverse_module_state->__pyx_n_s_pHwType);
  Py_VISIT(traverse_module_state->__pyx_n_s_pKeySlotUsedForStartup);
  Py_VISIT(traverse_module_state->__pyx_n_s_pKeySlotUsedForSync);
  Py_VISIT(traverse_module_state->__pyx_n_s_pLatestTx);
  Py_VISIT(traverse_module_state->__pyx_n_s_pLicInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_pLicInfoArray);
  Py_VISIT(traverse_module_state->__pyx_n_s_pMacroInitialOffsetA);
  Py_VISIT(traverse_module_state->__pyx_n_s_pMacroInitialOffsetB);
  Py_VISIT(traverse_module_state->__pyx_n_s_pMaxPayloadLengthDynamic);
  Py_VISIT(traverse_module_state->__pyx_n_s_pMessage);
  Py_VISIT(traverse_module_state->__pyx_n_s_pMicroInitialOffsetA);
  Py_VISIT(traverse_module_state->__pyx_n_s_pMicroInitialOffsetB);
  Py_VISIT(traverse_module_state->__pyx_n_s_pMicroPerCycle);
  Py_VISIT(traverse_module_state->__pyx_n_s_pMicroPerMacroNom);
  Py_VISIT(traverse_module_state->__pyx_n_s_pMsgCntSent);
  Py_VISIT(traverse_module_state->__pyx_n_s_pOffsetCorrectionOut);
  Py_VISIT(traverse_module_state->__pyx_n_s_pPreviousValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_pRateCorrectionOut);
  Py_VISIT(traverse_module_state->__pyx_n_s_pSamplesPerMicrotick);
  Py_VISIT(traverse_module_state->__pyx_n_s_pSingleSlotEnabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_pTime);
  Py_VISIT(traverse_module_state->__pyx_n_s_pWakeupChannel);
  Py_VISIT(traverse_module_state->__pyx_n_s_pWakeupPattern);
  Py_VISIT(traverse_module_state->__pyx_n_s_pXLcanTxEvents);
  Py_VISIT(traverse_module_state->__pyx_n_s_pXlCanTxEvt);
  Py_VISIT(traverse_module_state->__pyx_n_s_pXlHandle);
  Py_VISIT(traverse_module_state->__pyx_n_s_parity);
  Py_VISIT(traverse_module_state->__pyx_n_s_payloadLength);
  Py_VISIT(traverse_module_state->__pyx_n_s_pdAcceptedStartupRange);
  Py_VISIT(traverse_module_state->__pyx_n_s_pdListenTimeout);
  Py_VISIT(traverse_module_state->__pyx_n_s_pdMaxDrift);
  Py_VISIT(traverse_module_state->__pyx_n_s_pdMicrotick);
  Py_VISIT(traverse_module_state->__pyx_n_s_permissionMask);
  Py_VISIT(traverse_module_state->__pyx_n_s_permission_mask);
  Py_VISIT(traverse_module_state->__pyx_n_s_phy);
  Py_VISIT(traverse_module_state->__pyx_n_s_plevel);
  Py_VISIT(traverse_module_state->__pyx_n_s_portHandle);
  Py_VISIT(traverse_module_state->__pyx_n_s_port_handle);
  Py_VISIT(traverse_module_state->__pyx_n_s_previousValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptimerChannelMask);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptimerRate);
  Py_VISIT(traverse_module_state->__pyx_n_s_pxlClusterConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_pxlEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_pxlFrChannelConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_queueLevel);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_raw);
  Py_VISIT(traverse_module_state->__pyx_kp_s_raw_24);
  Py_VISIT(traverse_module_state->__pyx_kp_s_raw_28);
  Py_VISIT(traverse_module_state->__pyx_kp_s_raw_data_10);
  Py_VISIT(traverse_module_state->__pyx_n_s_recessiveDominantDelay);
  Py_VISIT(traverse_module_state->__pyx_n_s_repetition);
  Py_VISIT(traverse_module_state->__pyx_n_s_res1);
  Py_VISIT(traverse_module_state->__pyx_n_s_resNet);
  Py_VISIT(traverse_module_state->__pyx_n_s_reserved);
  Py_VISIT(traverse_module_state->__pyx_n_s_reserved0);
  Py_VISIT(traverse_module_state->__pyx_n_s_reserved1);
  Py_VISIT(traverse_module_state->__pyx_kp_s_reserved1_7);
  Py_VISIT(traverse_module_state->__pyx_n_s_reserved2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_reserved_10);
  Py_VISIT(traverse_module_state->__pyx_kp_s_reserved_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_retEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_rxQueueSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_sam);
  Py_VISIT(traverse_module_state->__pyx_n_s_samAbr);
  Py_VISIT(traverse_module_state->__pyx_n_s_serialNumber);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_sjw);
  Py_VISIT(traverse_module_state->__pyx_n_s_sjwAbr);
  Py_VISIT(traverse_module_state->__pyx_n_s_sjwDbr);
  Py_VISIT(traverse_module_state->__pyx_n_s_slotID);
  Py_VISIT(traverse_module_state->__pyx_n_s_specialCabFlags);
  Py_VISIT(traverse_module_state->__pyx_n_s_specialDeviceStatus);
  Py_VISIT(traverse_module_state->__pyx_n_s_speed);
  Py_VISIT(traverse_module_state->__pyx_n_s_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_statusType);
  Py_VISIT(traverse_module_state->__pyx_n_s_symbol);
  Py_VISIT(traverse_module_state->__pyx_n_s_symbolWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_symbolWindowMask);
  Py_VISIT(traverse_module_state->__pyx_n_s_tag);
  Py_VISIT(traverse_module_state->__pyx_n_s_tagData);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_time);
  Py_VISIT(traverse_module_state->__pyx_n_s_timeStamp);
  Py_VISIT(traverse_module_state->__pyx_n_s_timeStampSync);
  Py_VISIT(traverse_module_state->__pyx_n_s_timerChannelMask);
  Py_VISIT(traverse_module_state->__pyx_n_s_timerRate);
  Py_VISIT(traverse_module_state->__pyx_n_s_transId);
  Py_VISIT(traverse_module_state->__pyx_n_s_transceiverName);
  Py_VISIT(traverse_module_state->__pyx_n_s_transceiverState);
  Py_VISIT(traverse_module_state->__pyx_n_s_transceiverType);
  Py_VISIT(traverse_module_state->__pyx_n_s_triggerSource);
  Py_VISIT(traverse_module_state->__pyx_n_s_tseg1);
  Py_VISIT(traverse_module_state->__pyx_n_s_tseg1Abr);
  Py_VISIT(traverse_module_state->__pyx_n_s_tseg1Dbr);
  Py_VISIT(traverse_module_state->__pyx_n_s_tseg2);
  Py_VISIT(traverse_module_state->__pyx_n_s_tseg2Abr);
  Py_VISIT(traverse_module_state->__pyx_n_s_tseg2Dbr);
  Py_VISIT(traverse_module_state->__pyx_n_s_tssLength);
  Py_VISIT(traverse_module_state->__pyx_n_s_tx);
  Py_VISIT(traverse_module_state->__pyx_n_s_txMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_txrq);
  Py_VISIT(traverse_module_state->__pyx_n_s_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_userHandle);
  Py_VISIT(traverse_module_state->__pyx_n_s_vAllowPassivToActive);
  Py_VISIT(traverse_module_state->__pyx_n_s_vClockCorrectionFailed);
  Py_VISIT(traverse_module_state->__pyx_n_s_vExternOffsetControl);
  Py_VISIT(traverse_module_state->__pyx_n_s_vExternRateControl);
  Py_VISIT(traverse_module_state->__pyx_n_s_vOffsetCorrection);
  Py_VISIT(traverse_module_state->__pyx_n_s_vRateCorrection);
  Py_VISIT(traverse_module_state->__pyx_n_s_vxlapi);
  Py_VISIT(traverse_module_state->__pyx_kp_s_vxlapi_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_waitForFinish);
  Py_VISIT(traverse_module_state->__pyx_n_s_wakeupStatus);
  Py_VISIT(traverse_module_state->__pyx_n_s_xlEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_xlFrClusterConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_xlHandle);
  Py_VISIT(traverse_module_state->__pyx_n_s_xlInterfaceVersion);
  Py_VISIT(traverse_module_state->__pyx_n_s_xlstring);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__39);
  Py_VISIT(traverse_module_state->__pyx_tuple__41);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__47);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__69);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__74);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__88);
  Py_VISIT(traverse_module_state->__pyx_tuple__90);
  Py_VISIT(traverse_module_state->__pyx_tuple__92);
  Py_VISIT(traverse_module_state->__pyx_tuple__95);
  Py_VISIT(traverse_module_state->__pyx_tuple__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__6);
  Py_VISIT(traverse_module_state->__pyx_codeobj__7);
  Py_VISIT(traverse_module_state->__pyx_codeobj__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__100);
  Py_VISIT(traverse_module_state->__pyx_tuple__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__10);
  Py_VISIT(traverse_module_state->__pyx_codeobj__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__14);
  Py_VISIT(traverse_module_state->__pyx_codeobj__16);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__20);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__40);
  Py_VISIT(traverse_module_state->__pyx_codeobj__42);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__52);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__62);
  Py_VISIT(traverse_module_state->__pyx_codeobj__64);
  Py_VISIT(traverse_module_state->__pyx_codeobj__66);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__70);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__75);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_n_s_ActivateChannel __pyx_mstate_global->__pyx_n_s_ActivateChannel
#define __pyx_n_s_CanAddAcceptanceRange __pyx_mstate_global->__pyx_n_s_CanAddAcceptanceRange
#define __pyx_n_s_CanFdSetConfiguration __pyx_mstate_global->__pyx_n_s_CanFdSetConfiguration
#define __pyx_n_s_CanFlushTransmitQueue __pyx_mstate_global->__pyx_n_s_CanFlushTransmitQueue
#define __pyx_n_s_CanRemoveAcceptanceRange __pyx_mstate_global->__pyx_n_s_CanRemoveAcceptanceRange
#define __pyx_n_s_CanRequestChipState __pyx_mstate_global->__pyx_n_s_CanRequestChipState
#define __pyx_n_s_CanResetAcceptance __pyx_mstate_global->__pyx_n_s_CanResetAcceptance
#define __pyx_n_s_CanSetChannelAcceptance __pyx_mstate_global->__pyx_n_s_CanSetChannelAcceptance
#define __pyx_n_s_CanSetChannelBitrate __pyx_mstate_global->__pyx_n_s_CanSetChannelBitrate
#define __pyx_n_s_CanSetChannelMode __pyx_mstate_global->__pyx_n_s_CanSetChannelMode
#define __pyx_n_s_CanSetChannelOutput __pyx_mstate_global->__pyx_n_s_CanSetChannelOutput
#define __pyx_n_s_CanSetChannelParams __pyx_mstate_global->__pyx_n_s_CanSetChannelParams
#define __pyx_n_s_CanSetChannelParamsC200 __pyx_mstate_global->__pyx_n_s_CanSetChannelParamsC200
#define __pyx_n_s_CanSetChannelTransceiver __pyx_mstate_global->__pyx_n_s_CanSetChannelTransceiver
#define __pyx_n_s_CanSetReceiveMode __pyx_mstate_global->__pyx_n_s_CanSetReceiveMode
#define __pyx_n_s_CanTransmit __pyx_mstate_global->__pyx_n_s_CanTransmit
#define __pyx_n_s_CanTransmitEx __pyx_mstate_global->__pyx_n_s_CanTransmitEx
#define __pyx_n_s_ChipState __pyx_mstate_global->__pyx_n_s_ChipState
#define __pyx_n_s_CloseDriver __pyx_mstate_global->__pyx_n_s_CloseDriver
#define __pyx_n_s_ClosePort __pyx_mstate_global->__pyx_n_s_ClosePort
#define __pyx_n_s_DeactivateChannel __pyx_mstate_global->__pyx_n_s_DeactivateChannel
#define __pyx_n_s_ErrorFrame __pyx_mstate_global->__pyx_n_s_ErrorFrame
#define __pyx_n_s_FlushReceiveQueue __pyx_mstate_global->__pyx_n_s_FlushReceiveQueue
#define __pyx_n_s_FrActivateSpy __pyx_mstate_global->__pyx_n_s_FrActivateSpy
#define __pyx_n_s_FrGetChannelConfiguration __pyx_mstate_global->__pyx_n_s_FrGetChannelConfiguration
#define __pyx_n_s_FrInitStartupAndSync __pyx_mstate_global->__pyx_n_s_FrInitStartupAndSync
#define __pyx_n_s_FrReceive __pyx_mstate_global->__pyx_n_s_FrReceive
#define __pyx_n_s_FrSendSymbolWindow __pyx_mstate_global->__pyx_n_s_FrSendSymbolWindow
#define __pyx_n_s_FrSetAcceptanceFilter __pyx_mstate_global->__pyx_n_s_FrSetAcceptanceFilter
#define __pyx_n_s_FrSetConfiguration __pyx_mstate_global->__pyx_n_s_FrSetConfiguration
#define __pyx_n_s_FrSetMode __pyx_mstate_global->__pyx_n_s_FrSetMode
#define __pyx_n_s_FrSetTransceiverMode __pyx_mstate_global->__pyx_n_s_FrSetTransceiverMode
#define __pyx_n_s_FrSetupSymbolWindow __pyx_mstate_global->__pyx_n_s_FrSetupSymbolWindow
#define __pyx_n_s_FrTransmit __pyx_mstate_global->__pyx_n_s_FrTransmit
#define __pyx_n_s_GenerateSyncPulse __pyx_mstate_global->__pyx_n_s_GenerateSyncPulse
#define __pyx_n_s_GetApplConfig __pyx_mstate_global->__pyx_n_s_GetApplConfig
#define __pyx_n_s_GetChannelIndex __pyx_mstate_global->__pyx_n_s_GetChannelIndex
#define __pyx_n_s_GetChannelMask __pyx_mstate_global->__pyx_n_s_GetChannelMask
#define __pyx_n_s_GetChannelTime __pyx_mstate_global->__pyx_n_s_GetChannelTime
#define __pyx_n_s_GetDriverConfig __pyx_mstate_global->__pyx_n_s_GetDriverConfig
#define __pyx_n_s_GetErrorString __pyx_mstate_global->__pyx_n_s_GetErrorString
#define __pyx_n_s_GetKeymanBoxes __pyx_mstate_global->__pyx_n_s_GetKeymanBoxes
#define __pyx_n_s_GetKeymanInfo __pyx_mstate_global->__pyx_n_s_GetKeymanInfo
#define __pyx_n_s_GetLicenseInfo __pyx_mstate_global->__pyx_n_s_GetLicenseInfo
#define __pyx_n_s_GetReceiveQueueLevel __pyx_mstate_global->__pyx_n_s_GetReceiveQueueLevel
#define __pyx_n_s_GetRemoteDriverConfig __pyx_mstate_global->__pyx_n_s_GetRemoteDriverConfig
#define __pyx_n_s_GetSyncTime __pyx_mstate_global->__pyx_n_s_GetSyncTime
#define __pyx_n_s_KeyError __pyx_mstate_global->__pyx_n_s_KeyError
#define __pyx_kp_s_No_value_specified_for_struct_at __pyx_mstate_global->__pyx_kp_s_No_value_specified_for_struct_at
#define __pyx_kp_s_No_value_specified_for_struct_at_2 __pyx_mstate_global->__pyx_kp_s_No_value_specified_for_struct_at_2
#define __pyx_kp_s_No_value_specified_for_struct_at_3 __pyx_mstate_global->__pyx_kp_s_No_value_specified_for_struct_at_3
#define __pyx_kp_s_No_value_specified_for_struct_at_4 __pyx_mstate_global->__pyx_kp_s_No_value_specified_for_struct_at_4
#define __pyx_kp_s_No_value_specified_for_struct_at_5 __pyx_mstate_global->__pyx_kp_s_No_value_specified_for_struct_at_5
#define __pyx_n_s_OpenDriver __pyx_mstate_global->__pyx_n_s_OpenDriver
#define __pyx_n_s_OpenPort __pyx_mstate_global->__pyx_n_s_OpenPort
#define __pyx_n_s_PopupHwConfig __pyx_mstate_global->__pyx_n_s_PopupHwConfig
#define __pyx_n_s_Receive __pyx_mstate_global->__pyx_n_s_Receive
#define __pyx_n_s_ResetClock __pyx_mstate_global->__pyx_n_s_ResetClock
#define __pyx_n_s_SetApplConfig __pyx_mstate_global->__pyx_n_s_SetApplConfig
#define __pyx_n_s_SetGlobalTimeSync __pyx_mstate_global->__pyx_n_s_SetGlobalTimeSync
#define __pyx_n_s_SetNotification __pyx_mstate_global->__pyx_n_s_SetNotification
#define __pyx_n_s_SetTimerRate __pyx_mstate_global->__pyx_n_s_SetTimerRate
#define __pyx_n_s_SetTimerRateAndChannel __pyx_mstate_global->__pyx_n_s_SetTimerRateAndChannel
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_XL_A429_EV_RX_ERROR_AVG_BIT_LENG __pyx_mstate_global->__pyx_n_s_XL_A429_EV_RX_ERROR_AVG_BIT_LENG
#define __pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_HIGH __pyx_mstate_global->__pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_HIGH
#define __pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_LOW __pyx_mstate_global->__pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_LOW
#define __pyx_n_s_XL_A429_EV_RX_ERROR_CODING_RZ __pyx_mstate_global->__pyx_n_s_XL_A429_EV_RX_ERROR_CODING_RZ
#define __pyx_n_s_XL_A429_EV_RX_ERROR_DUTY_FACTOR __pyx_mstate_global->__pyx_n_s_XL_A429_EV_RX_ERROR_DUTY_FACTOR
#define __pyx_n_s_XL_A429_EV_RX_ERROR_FRAME_FORMAT __pyx_mstate_global->__pyx_n_s_XL_A429_EV_RX_ERROR_FRAME_FORMAT
#define __pyx_n_s_XL_A429_EV_RX_ERROR_GAP_VIOLATIO __pyx_mstate_global->__pyx_n_s_XL_A429_EV_RX_ERROR_GAP_VIOLATIO
#define __pyx_n_s_XL_A429_EV_RX_ERROR_PARITY __pyx_mstate_global->__pyx_n_s_XL_A429_EV_RX_ERROR_PARITY
#define __pyx_n_s_XL_A429_EV_TX_ERROR_ACCESS_DENIE __pyx_mstate_global->__pyx_n_s_XL_A429_EV_TX_ERROR_ACCESS_DENIE
#define __pyx_n_s_XL_A429_EV_TX_ERROR_TRANSMISSION __pyx_mstate_global->__pyx_n_s_XL_A429_EV_TX_ERROR_TRANSMISSION
#define __pyx_n_s_XL_A429_EV_TX_MSG_CTRL_CYCLIC __pyx_mstate_global->__pyx_n_s_XL_A429_EV_TX_MSG_CTRL_CYCLIC
#define __pyx_n_s_XL_A429_EV_TX_MSG_CTRL_ON_REQUES __pyx_mstate_global->__pyx_n_s_XL_A429_EV_TX_MSG_CTRL_ON_REQUES
#define __pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_DISABL __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_DISABL
#define __pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_ENABLE __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_ENABLE
#define __pyx_n_s_XL_A429_MSG_BITRATE_FAST_MAX __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_BITRATE_FAST_MAX
#define __pyx_n_s_XL_A429_MSG_BITRATE_FAST_MIN __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_BITRATE_FAST_MIN
#define __pyx_n_s_XL_A429_MSG_BITRATE_RX_MAX __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_BITRATE_RX_MAX
#define __pyx_n_s_XL_A429_MSG_BITRATE_RX_MIN __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_BITRATE_RX_MIN
#define __pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MAX __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MAX
#define __pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MIN __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MIN
#define __pyx_n_s_XL_A429_MSG_CHANNEL_DIR_RX __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_CHANNEL_DIR_RX
#define __pyx_n_s_XL_A429_MSG_CHANNEL_DIR_TX __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_CHANNEL_DIR_TX
#define __pyx_n_s_XL_A429_MSG_CYCLE_MAX __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_CYCLE_MAX
#define __pyx_n_s_XL_A429_MSG_FLAG_CYCLIC __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_FLAG_CYCLIC
#define __pyx_n_s_XL_A429_MSG_FLAG_DELETE_CYCLIC __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_FLAG_DELETE_CYCLIC
#define __pyx_n_s_XL_A429_MSG_FLAG_ON_REQUEST __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_FLAG_ON_REQUEST
#define __pyx_n_s_XL_A429_MSG_GAP_4BIT __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_GAP_4BIT
#define __pyx_n_s_XL_A429_MSG_GAP_DEFAULT __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_GAP_DEFAULT
#define __pyx_n_s_XL_A429_MSG_GAP_MAX __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_GAP_MAX
#define __pyx_n_s_XL_A429_MSG_PARITY_DEFAULT __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_PARITY_DEFAULT
#define __pyx_n_s_XL_A429_MSG_PARITY_DISABLED __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_PARITY_DISABLED
#define __pyx_n_s_XL_A429_MSG_PARITY_EVEN __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_PARITY_EVEN
#define __pyx_n_s_XL_A429_MSG_PARITY_ODD __pyx_mstate_global->__pyx_n_s_XL_A429_MSG_PARITY_ODD
#define __pyx_n_s_XL_A429_QUEUE_OVERFLOW __pyx_mstate_global->__pyx_n_s_XL_A429_QUEUE_OVERFLOW
#define __pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MAX __pyx_mstate_global->__pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MAX
#define __pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MIN __pyx_mstate_global->__pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MIN
#define __pyx_n_s_XL_ACTIVATE_NONE __pyx_mstate_global->__pyx_n_s_XL_ACTIVATE_NONE
#define __pyx_n_s_XL_ACTIVATE_RESET_CLOCK __pyx_mstate_global->__pyx_n_s_XL_ACTIVATE_RESET_CLOCK
#define __pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CAN20 __pyx_mstate_global->__pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CAN20
#define __pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CANFD __pyx_mstate_global->__pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CANFD
#define __pyx_n_s_XL_BUS_TYPE_A429 __pyx_mstate_global->__pyx_n_s_XL_BUS_TYPE_A429
#define __pyx_n_s_XL_BUS_TYPE_AFDX __pyx_mstate_global->__pyx_n_s_XL_BUS_TYPE_AFDX
#define __pyx_n_s_XL_BUS_TYPE_CAN __pyx_mstate_global->__pyx_n_s_XL_BUS_TYPE_CAN
#define __pyx_n_s_XL_BUS_TYPE_DAIO __pyx_mstate_global->__pyx_n_s_XL_BUS_TYPE_DAIO
#define __pyx_n_s_XL_BUS_TYPE_ETHERNET __pyx_mstate_global->__pyx_n_s_XL_BUS_TYPE_ETHERNET
#define __pyx_n_s_XL_BUS_TYPE_FLEXRAY __pyx_mstate_global->__pyx_n_s_XL_BUS_TYPE_FLEXRAY
#define __pyx_n_s_XL_BUS_TYPE_J1708 __pyx_mstate_global->__pyx_n_s_XL_BUS_TYPE_J1708
#define __pyx_n_s_XL_BUS_TYPE_LIN __pyx_mstate_global->__pyx_n_s_XL_BUS_TYPE_LIN
#define __pyx_n_s_XL_BUS_TYPE_MOST __pyx_mstate_global->__pyx_n_s_XL_BUS_TYPE_MOST
#define __pyx_n_s_XL_BUS_TYPE_NONE __pyx_mstate_global->__pyx_n_s_XL_BUS_TYPE_NONE
#define __pyx_n_s_XL_CAN_EV_TAG_TX_MSG __pyx_mstate_global->__pyx_n_s_XL_CAN_EV_TAG_TX_MSG
#define __pyx_n_s_XL_CAN_EXT_MSG_ID __pyx_mstate_global->__pyx_n_s_XL_CAN_EXT_MSG_ID
#define __pyx_n_s_XL_CAN_MSG_FLAG_ERROR_FRAME __pyx_mstate_global->__pyx_n_s_XL_CAN_MSG_FLAG_ERROR_FRAME
#define __pyx_n_s_XL_CAN_MSG_FLAG_NERR __pyx_mstate_global->__pyx_n_s_XL_CAN_MSG_FLAG_NERR
#define __pyx_n_s_XL_CAN_MSG_FLAG_OVERRUN __pyx_mstate_global->__pyx_n_s_XL_CAN_MSG_FLAG_OVERRUN
#define __pyx_n_s_XL_CAN_MSG_FLAG_REMOTE_FRAME __pyx_mstate_global->__pyx_n_s_XL_CAN_MSG_FLAG_REMOTE_FRAME
#define __pyx_n_s_XL_CAN_MSG_FLAG_RESERVED_1 __pyx_mstate_global->__pyx_n_s_XL_CAN_MSG_FLAG_RESERVED_1
#define __pyx_n_s_XL_CAN_MSG_FLAG_SRR_BIT_DOM __pyx_mstate_global->__pyx_n_s_XL_CAN_MSG_FLAG_SRR_BIT_DOM
#define __pyx_n_s_XL_CAN_MSG_FLAG_TX_COMPLETED __pyx_mstate_global->__pyx_n_s_XL_CAN_MSG_FLAG_TX_COMPLETED
#define __pyx_n_s_XL_CAN_MSG_FLAG_TX_REQUEST __pyx_mstate_global->__pyx_n_s_XL_CAN_MSG_FLAG_TX_REQUEST
#define __pyx_n_s_XL_CAN_MSG_FLAG_WAKEUP __pyx_mstate_global->__pyx_n_s_XL_CAN_MSG_FLAG_WAKEUP
#define __pyx_n_s_XL_CAN_TXMSG_FLAG_BRS __pyx_mstate_global->__pyx_n_s_XL_CAN_TXMSG_FLAG_BRS
#define __pyx_n_s_XL_CAN_TXMSG_FLAG_EDL __pyx_mstate_global->__pyx_n_s_XL_CAN_TXMSG_FLAG_EDL
#define __pyx_n_s_XL_CAN_TXMSG_FLAG_HIGHPRIO __pyx_mstate_global->__pyx_n_s_XL_CAN_TXMSG_FLAG_HIGHPRIO
#define __pyx_n_s_XL_CAN_TXMSG_FLAG_RTR __pyx_mstate_global->__pyx_n_s_XL_CAN_TXMSG_FLAG_RTR
#define __pyx_n_s_XL_CAN_TXMSG_FLAG_WAKEUP __pyx_mstate_global->__pyx_n_s_XL_CAN_TXMSG_FLAG_WAKEUP
#define __pyx_n_s_XL_ERROR __pyx_mstate_global->__pyx_n_s_XL_ERROR
#define __pyx_n_s_XL_ERR_BAD_EXE_FORMAT __pyx_mstate_global->__pyx_n_s_XL_ERR_BAD_EXE_FORMAT
#define __pyx_n_s_XL_ERR_CANNOT_OPEN_DRIVER __pyx_mstate_global->__pyx_n_s_XL_ERR_CANNOT_OPEN_DRIVER
#define __pyx_n_s_XL_ERR_CHAN_IS_ONLINE __pyx_mstate_global->__pyx_n_s_XL_ERR_CHAN_IS_ONLINE
#define __pyx_n_s_XL_ERR_CMD_HANDLING __pyx_mstate_global->__pyx_n_s_XL_ERR_CMD_HANDLING
#define __pyx_n_s_XL_ERR_CMD_TIMEOUT __pyx_mstate_global->__pyx_n_s_XL_ERR_CMD_TIMEOUT
#define __pyx_n_s_XL_ERR_CONNECTION_BROKEN __pyx_mstate_global->__pyx_n_s_XL_ERR_CONNECTION_BROKEN
#define __pyx_n_s_XL_ERR_CONNECTION_CLOSED __pyx_mstate_global->__pyx_n_s_XL_ERR_CONNECTION_CLOSED
#define __pyx_n_s_XL_ERR_CONNECTION_FAILED __pyx_mstate_global->__pyx_n_s_XL_ERR_CONNECTION_FAILED
#define __pyx_n_s_XL_ERR_DLL_NOT_FOUND __pyx_mstate_global->__pyx_n_s_XL_ERR_DLL_NOT_FOUND
#define __pyx_n_s_XL_ERR_EDL_NOT_SET __pyx_mstate_global->__pyx_n_s_XL_ERR_EDL_NOT_SET
#define __pyx_n_s_XL_ERR_EDL_RTR __pyx_mstate_global->__pyx_n_s_XL_ERR_EDL_RTR
#define __pyx_n_s_XL_ERR_ERROR_CRC __pyx_mstate_global->__pyx_n_s_XL_ERR_ERROR_CRC
#define __pyx_n_s_XL_ERR_ETH_MAC_ACTIVATION_FAILED __pyx_mstate_global->__pyx_n_s_XL_ERR_ETH_MAC_ACTIVATION_FAILED
#define __pyx_n_s_XL_ERR_ETH_PHY_ACTIVATION_FAILED __pyx_mstate_global->__pyx_n_s_XL_ERR_ETH_PHY_ACTIVATION_FAILED
#define __pyx_n_s_XL_ERR_ETH_PHY_CONFIG_ABORTED __pyx_mstate_global->__pyx_n_s_XL_ERR_ETH_PHY_CONFIG_ABORTED
#define __pyx_n_s_XL_ERR_ETH_RESET_FAILED __pyx_mstate_global->__pyx_n_s_XL_ERR_ETH_RESET_FAILED
#define __pyx_n_s_XL_ERR_ETH_SET_CONFIG_DELAYED __pyx_mstate_global->__pyx_n_s_XL_ERR_ETH_SET_CONFIG_DELAYED
#define __pyx_n_s_XL_ERR_ETH_UNSUPPORTED_FEATURE __pyx_mstate_global->__pyx_n_s_XL_ERR_ETH_UNSUPPORTED_FEATURE
#define __pyx_n_s_XL_ERR_HW_NOT_PRESENT __pyx_mstate_global->__pyx_n_s_XL_ERR_HW_NOT_PRESENT
#define __pyx_n_s_XL_ERR_HW_NOT_READY __pyx_mstate_global->__pyx_n_s_XL_ERR_HW_NOT_READY
#define __pyx_n_s_XL_ERR_INIT_ACCESS_MISSING __pyx_mstate_global->__pyx_n_s_XL_ERR_INIT_ACCESS_MISSING
#define __pyx_n_s_XL_ERR_INSUFFICIENT_BUFFER __pyx_mstate_global->__pyx_n_s_XL_ERR_INSUFFICIENT_BUFFER
#define __pyx_n_s_XL_ERR_INTERNAL_ERROR __pyx_mstate_global->__pyx_n_s_XL_ERR_INTERNAL_ERROR
#define __pyx_n_s_XL_ERR_INVALID_ACCESS __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_ACCESS
#define __pyx_n_s_XL_ERR_INVALID_ADDRESS __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_ADDRESS
#define __pyx_n_s_XL_ERR_INVALID_CANID __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_CANID
#define __pyx_n_s_XL_ERR_INVALID_CHANNEL_MASK __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_CHANNEL_MASK
#define __pyx_n_s_XL_ERR_INVALID_CHAN_INDEX __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_CHAN_INDEX
#define __pyx_n_s_XL_ERR_INVALID_DLC __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_DLC
#define __pyx_n_s_XL_ERR_INVALID_FDFLAG_MODE20 __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_FDFLAG_MODE20
#define __pyx_n_s_XL_ERR_INVALID_HANDLE __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_HANDLE
#define __pyx_n_s_XL_ERR_INVALID_LEVEL __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_LEVEL
#define __pyx_n_s_XL_ERR_INVALID_PORT __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_PORT
#define __pyx_n_s_XL_ERR_INVALID_RESERVED_FLD __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_RESERVED_FLD
#define __pyx_n_s_XL_ERR_INVALID_SIZE __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_SIZE
#define __pyx_n_s_XL_ERR_INVALID_STREAM_NAME __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_STREAM_NAME
#define __pyx_n_s_XL_ERR_INVALID_TAG __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_TAG
#define __pyx_n_s_XL_ERR_INVALID_USER_BUFFER __pyx_mstate_global->__pyx_n_s_XL_ERR_INVALID_USER_BUFFER
#define __pyx_n_s_XL_ERR_NOTIFY_ALREADY_ACTIVE __pyx_mstate_global->__pyx_n_s_XL_ERR_NOTIFY_ALREADY_ACTIVE
#define __pyx_n_s_XL_ERR_NOT_FOUND __pyx_mstate_global->__pyx_n_s_XL_ERR_NOT_FOUND
#define __pyx_n_s_XL_ERR_NOT_IMPLEMENTED __pyx_mstate_global->__pyx_n_s_XL_ERR_NOT_IMPLEMENTED
#define __pyx_n_s_XL_ERR_NOT_SUPPORTED __pyx_mstate_global->__pyx_n_s_XL_ERR_NOT_SUPPORTED
#define __pyx_n_s_XL_ERR_NO_DATA_DETECTED __pyx_mstate_global->__pyx_n_s_XL_ERR_NO_DATA_DETECTED
#define __pyx_n_s_XL_ERR_NO_LICENSE __pyx_mstate_global->__pyx_n_s_XL_ERR_NO_LICENSE
#define __pyx_n_s_XL_ERR_NO_RESOURCES __pyx_mstate_global->__pyx_n_s_XL_ERR_NO_RESOURCES
#define __pyx_n_s_XL_ERR_NO_SYSTEM_RESOURCES __pyx_mstate_global->__pyx_n_s_XL_ERR_NO_SYSTEM_RESOURCES
#define __pyx_n_s_XL_ERR_PORT_IS_OFFLINE __pyx_mstate_global->__pyx_n_s_XL_ERR_PORT_IS_OFFLINE
#define __pyx_n_s_XL_ERR_QUEUE_IS_EMPTY __pyx_mstate_global->__pyx_n_s_XL_ERR_QUEUE_IS_EMPTY
#define __pyx_n_s_XL_ERR_QUEUE_IS_FULL __pyx_mstate_global->__pyx_n_s_XL_ERR_QUEUE_IS_FULL
#define __pyx_n_s_XL_ERR_QUEUE_OVERRUN __pyx_mstate_global->__pyx_n_s_XL_ERR_QUEUE_OVERRUN
#define __pyx_n_s_XL_ERR_REQ_NOT_ACCEP __pyx_mstate_global->__pyx_n_s_XL_ERR_REQ_NOT_ACCEP
#define __pyx_n_s_XL_ERR_RESERVED_NOT_ZERO __pyx_mstate_global->__pyx_n_s_XL_ERR_RESERVED_NOT_ZERO
#define __pyx_n_s_XL_ERR_STREAM_NOT_CONNECTED __pyx_mstate_global->__pyx_n_s_XL_ERR_STREAM_NOT_CONNECTED
#define __pyx_n_s_XL_ERR_STREAM_NOT_FOUND __pyx_mstate_global->__pyx_n_s_XL_ERR_STREAM_NOT_FOUND
#define __pyx_n_s_XL_ERR_TWICE_REGISTER __pyx_mstate_global->__pyx_n_s_XL_ERR_TWICE_REGISTER
#define __pyx_n_s_XL_ERR_TX_NOT_POSSIBLE __pyx_mstate_global->__pyx_n_s_XL_ERR_TX_NOT_POSSIBLE
#define __pyx_n_s_XL_ERR_UNEXP_NET_ERR __pyx_mstate_global->__pyx_n_s_XL_ERR_UNEXP_NET_ERR
#define __pyx_n_s_XL_ERR_UNKNOWN_FLAG __pyx_mstate_global->__pyx_n_s_XL_ERR_UNKNOWN_FLAG
#define __pyx_n_s_XL_ERR_WRONG_BUS_TYPE __pyx_mstate_global->__pyx_n_s_XL_ERR_WRONG_BUS_TYPE
#define __pyx_n_s_XL_ERR_WRONG_CHIP_TYPE __pyx_mstate_global->__pyx_n_s_XL_ERR_WRONG_CHIP_TYPE
#define __pyx_n_s_XL_ERR_WRONG_COMMAND __pyx_mstate_global->__pyx_n_s_XL_ERR_WRONG_COMMAND
#define __pyx_n_s_XL_ERR_WRONG_PARAMETER __pyx_mstate_global->__pyx_n_s_XL_ERR_WRONG_PARAMETER
#define __pyx_n_s_XL_EVENT_FLAG_OVERRUN __pyx_mstate_global->__pyx_n_s_XL_EVENT_FLAG_OVERRUN
#define __pyx_n_s_XL_FR_CC_COLD_A __pyx_mstate_global->__pyx_n_s_XL_FR_CC_COLD_A
#define __pyx_n_s_XL_FR_CC_COLD_B __pyx_mstate_global->__pyx_n_s_XL_FR_CC_COLD_B
#define __pyx_n_s_XL_FR_CHANNEL_A __pyx_mstate_global->__pyx_n_s_XL_FR_CHANNEL_A
#define __pyx_n_s_XL_FR_CHANNEL_AB __pyx_mstate_global->__pyx_n_s_XL_FR_CHANNEL_AB
#define __pyx_n_s_XL_FR_CHANNEL_B __pyx_mstate_global->__pyx_n_s_XL_FR_CHANNEL_B
#define __pyx_n_s_XL_FR_CHANNEL_CFG_MODE_ASYNCHRON __pyx_mstate_global->__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_ASYNCHRON
#define __pyx_n_s_XL_FR_CHANNEL_CFG_MODE_COMBINED __pyx_mstate_global->__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_COMBINED
#define __pyx_n_s_XL_FR_CHANNEL_CFG_MODE_SYNCHRONO __pyx_mstate_global->__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_SYNCHRONO
#define __pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_CHANNEL __pyx_mstate_global->__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_CHANNEL
#define __pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_INIT_AP __pyx_mstate_global->__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_INIT_AP
#define __pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_VALID_C __pyx_mstate_global->__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_VALID_C
#define __pyx_n_s_XL_FR_ERROR __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR
#define __pyx_n_s_XL_FR_ERROR_CC_EDA __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CC_EDA
#define __pyx_n_s_XL_FR_ERROR_CC_EDB __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CC_EDB
#define __pyx_n_s_XL_FR_ERROR_CC_ERROR __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CC_ERROR
#define __pyx_n_s_XL_FR_ERROR_CC_IIBA __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CC_IIBA
#define __pyx_n_s_XL_FR_ERROR_CC_IOBA __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CC_IOBA
#define __pyx_n_s_XL_FR_ERROR_CC_LTVA __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CC_LTVA
#define __pyx_n_s_XL_FR_ERROR_CC_LTVB __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CC_LTVB
#define __pyx_n_s_XL_FR_ERROR_CC_MHF __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CC_MHF
#define __pyx_n_s_XL_FR_ERROR_CC_PERR __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CC_PERR
#define __pyx_n_s_XL_FR_ERROR_CC_TABA __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CC_TABA
#define __pyx_n_s_XL_FR_ERROR_CC_TABB __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CC_TABB
#define __pyx_n_s_XL_FR_ERROR_CLOCK_CORR_FAILURE __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_CLOCK_CORR_FAILURE
#define __pyx_n_s_XL_FR_ERROR_MAX_OFFSET_CORRECTIO __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_MAX_OFFSET_CORRECTIO
#define __pyx_n_s_XL_FR_ERROR_MAX_RATE_CORRECTION __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_MAX_RATE_CORRECTION
#define __pyx_n_s_XL_FR_ERROR_MISSING_OFFSET_CORRE __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_MISSING_OFFSET_CORRE
#define __pyx_n_s_XL_FR_ERROR_MISSING_RATE_CORRECT __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_MISSING_RATE_CORRECT
#define __pyx_n_s_XL_FR_ERROR_NIT_FAILURE __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_NIT_FAILURE
#define __pyx_n_s_XL_FR_ERROR_NIT_SBNA __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_NIT_SBNA
#define __pyx_n_s_XL_FR_ERROR_NIT_SBNB __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_NIT_SBNB
#define __pyx_n_s_XL_FR_ERROR_NIT_SENA __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_NIT_SENA
#define __pyx_n_s_XL_FR_ERROR_NIT_SENB __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_NIT_SENB
#define __pyx_n_s_XL_FR_ERROR_POC_ACTIVE __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_POC_ACTIVE
#define __pyx_n_s_XL_FR_ERROR_POC_COMM_HALT __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_POC_COMM_HALT
#define __pyx_n_s_XL_FR_ERROR_POC_MODE __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_POC_MODE
#define __pyx_n_s_XL_FR_ERROR_POC_PASSIVE __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_POC_PASSIVE
#define __pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_BELOWMIN __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_BELOWMIN
#define __pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_OVERLOAD __pyx_mstate_global->__pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_OVERLOAD
#define __pyx_n_s_XL_FR_FILTER_BLOCK __pyx_mstate_global->__pyx_n_s_XL_FR_FILTER_BLOCK
#define __pyx_n_s_XL_FR_FILTER_CHANNEL_A __pyx_mstate_global->__pyx_n_s_XL_FR_FILTER_CHANNEL_A
#define __pyx_n_s_XL_FR_FILTER_CHANNEL_B __pyx_mstate_global->__pyx_n_s_XL_FR_FILTER_CHANNEL_B
#define __pyx_n_s_XL_FR_FILTER_PASS __pyx_mstate_global->__pyx_n_s_XL_FR_FILTER_PASS
#define __pyx_n_s_XL_FR_FILTER_TYPE_DATA __pyx_mstate_global->__pyx_n_s_XL_FR_FILTER_TYPE_DATA
#define __pyx_n_s_XL_FR_FILTER_TYPE_FILLUP_NF __pyx_mstate_global->__pyx_n_s_XL_FR_FILTER_TYPE_FILLUP_NF
#define __pyx_n_s_XL_FR_FILTER_TYPE_NF __pyx_mstate_global->__pyx_n_s_XL_FR_FILTER_TYPE_NF
#define __pyx_n_s_XL_FR_FRAMEFLAG_CONTENT_ERROR __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_CONTENT_ERROR
#define __pyx_n_s_XL_FR_FRAMEFLAG_DATA_UPDATE_LOST __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_DATA_UPDATE_LOST
#define __pyx_n_s_XL_FR_FRAMEFLAG_EMPTY_SLOT __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_EMPTY_SLOT
#define __pyx_n_s_XL_FR_FRAMEFLAG_FRAME_TRANSMITTE __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_FRAME_TRANSMITTE
#define __pyx_n_s_XL_FR_FRAMEFLAG_FR_RESERVED __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_FR_RESERVED
#define __pyx_n_s_XL_FR_FRAMEFLAG_NEW_DATA_TX __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_NEW_DATA_TX
#define __pyx_n_s_XL_FR_FRAMEFLAG_NULLFRAME __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_NULLFRAME
#define __pyx_n_s_XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE
#define __pyx_n_s_XL_FR_FRAMEFLAG_REQ_TXACK __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_REQ_TXACK
#define __pyx_n_s_XL_FR_FRAMEFLAG_RX_UNEXPECTED __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_RX_UNEXPECTED
#define __pyx_n_s_XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VI __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VI
#define __pyx_n_s_XL_FR_FRAMEFLAG_STARTUP __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_STARTUP
#define __pyx_n_s_XL_FR_FRAMEFLAG_SYNC __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_SYNC
#define __pyx_n_s_XL_FR_FRAMEFLAG_SYNTAX_ERROR __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_SYNTAX_ERROR
#define __pyx_n_s_XL_FR_FRAMEFLAG_TXACK_SS __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_TXACK_SS
#define __pyx_n_s_XL_FR_FRAMEFLAG_TX_CONFLICT __pyx_mstate_global->__pyx_n_s_XL_FR_FRAMEFLAG_TX_CONFLICT
#define __pyx_n_s_XL_FR_MODE_COLDSTART_FOLLOWING __pyx_mstate_global->__pyx_n_s_XL_FR_MODE_COLDSTART_FOLLOWING
#define __pyx_n_s_XL_FR_MODE_COLDSTART_LEADING __pyx_mstate_global->__pyx_n_s_XL_FR_MODE_COLDSTART_LEADING
#define __pyx_n_s_XL_FR_MODE_COLD_NORMAL __pyx_mstate_global->__pyx_n_s_XL_FR_MODE_COLD_NORMAL
#define __pyx_n_s_XL_FR_MODE_NONE __pyx_mstate_global->__pyx_n_s_XL_FR_MODE_NONE
#define __pyx_n_s_XL_FR_MODE_NORMAL __pyx_mstate_global->__pyx_n_s_XL_FR_MODE_NORMAL
#define __pyx_n_s_XL_FR_MODE_WAKEUP __pyx_mstate_global->__pyx_n_s_XL_FR_MODE_WAKEUP
#define __pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART __pyx_mstate_global->__pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART
#define __pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART_2 __pyx_mstate_global->__pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART_2
#define __pyx_n_s_XL_FR_NM_VECTOR __pyx_mstate_global->__pyx_n_s_XL_FR_NM_VECTOR
#define __pyx_n_s_XL_FR_PAYLOAD_INCREMENT_16BIT __pyx_mstate_global->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_16BIT
#define __pyx_n_s_XL_FR_PAYLOAD_INCREMENT_32BIT __pyx_mstate_global->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_32BIT
#define __pyx_n_s_XL_FR_PAYLOAD_INCREMENT_8BIT __pyx_mstate_global->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_8BIT
#define __pyx_n_s_XL_FR_PAYLOAD_INCREMENT_NONE __pyx_mstate_global->__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_NONE
#define __pyx_n_s_XL_FR_QUEUE_OVERFLOW __pyx_mstate_global->__pyx_n_s_XL_FR_QUEUE_OVERFLOW
#define __pyx_n_s_XL_FR_RX_FRAME __pyx_mstate_global->__pyx_n_s_XL_FR_RX_FRAME
#define __pyx_n_s_XL_FR_SPY_CHANNEL_A __pyx_mstate_global->__pyx_n_s_XL_FR_SPY_CHANNEL_A
#define __pyx_n_s_XL_FR_SPY_CHANNEL_B __pyx_mstate_global->__pyx_n_s_XL_FR_SPY_CHANNEL_B
#define __pyx_n_s_XL_FR_SPY_FRAME __pyx_mstate_global->__pyx_n_s_XL_FR_SPY_FRAME
#define __pyx_n_s_XL_FR_SPY_FRAMEFLAG_BUS_ERROR __pyx_mstate_global->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_BUS_ERROR
#define __pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ER __pyx_mstate_global->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ER
#define __pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAMING_ERRO __pyx_mstate_global->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAMING_ERRO
#define __pyx_n_s_XL_FR_SPY_FRAMEFLAG_HEADER_CRC_E __pyx_mstate_global->__pyx_n_s_XL_FR_SPY_FRAMEFLAG_HEADER_CRC_E
#define __pyx_n_s_XL_FR_SPY_SYMBOL __pyx_mstate_global->__pyx_n_s_XL_FR_SPY_SYMBOL
#define __pyx_n_s_XL_FR_START_CYCLE __pyx_mstate_global->__pyx_n_s_XL_FR_START_CYCLE
#define __pyx_n_s_XL_FR_STATUS __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS
#define __pyx_n_s_XL_FR_STATUS_ABORT_STARTUP __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_ABORT_STARTUP
#define __pyx_n_s_XL_FR_STATUS_COLDSTART_COLLISION __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_COLDSTART_COLLISION
#define __pyx_n_s_XL_FR_STATUS_COLDSTART_CONSISTEN __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_COLDSTART_CONSISTEN
#define __pyx_n_s_XL_FR_STATUS_COLDSTART_GAP __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_COLDSTART_GAP
#define __pyx_n_s_XL_FR_STATUS_COLDSTART_JOIN __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_COLDSTART_JOIN
#define __pyx_n_s_XL_FR_STATUS_COLDSTART_LISTEN __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_COLDSTART_LISTEN
#define __pyx_n_s_XL_FR_STATUS_CONFIG __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_CONFIG
#define __pyx_n_s_XL_FR_STATUS_DEFAULT_CONFIG __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_DEFAULT_CONFIG
#define __pyx_n_s_XL_FR_STATUS_HALT __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_HALT
#define __pyx_n_s_XL_FR_STATUS_INITIALIZE_SCHEDULE __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_INITIALIZE_SCHEDULE
#define __pyx_n_s_XL_FR_STATUS_INTEGRATION_COLDSTA __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_INTEGRATION_COLDSTA
#define __pyx_n_s_XL_FR_STATUS_INTEGRATION_CONSIST __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_INTEGRATION_CONSIST
#define __pyx_n_s_XL_FR_STATUS_INTEGRATION_LISTEN __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_INTEGRATION_LISTEN
#define __pyx_n_s_XL_FR_STATUS_MONITOR_MODE __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_MONITOR_MODE
#define __pyx_n_s_XL_FR_STATUS_NORMAL_ACTIVE __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_NORMAL_ACTIVE
#define __pyx_n_s_XL_FR_STATUS_NORMAL_PASSIVE __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_NORMAL_PASSIVE
#define __pyx_n_s_XL_FR_STATUS_READY __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_READY
#define __pyx_n_s_XL_FR_STATUS_STARTUP_PREPARE __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_STARTUP_PREPARE
#define __pyx_n_s_XL_FR_STATUS_STARTUP_SUCCESS __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_STARTUP_SUCCESS
#define __pyx_n_s_XL_FR_STATUS_WAKEUP_DETECT __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_WAKEUP_DETECT
#define __pyx_n_s_XL_FR_STATUS_WAKEUP_LISTEN __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_WAKEUP_LISTEN
#define __pyx_n_s_XL_FR_STATUS_WAKEUP_SEND __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_WAKEUP_SEND
#define __pyx_n_s_XL_FR_STATUS_WAKEUP_STANDBY __pyx_mstate_global->__pyx_n_s_XL_FR_STATUS_WAKEUP_STANDBY
#define __pyx_n_s_XL_FR_SYMBOL_CAS __pyx_mstate_global->__pyx_n_s_XL_FR_SYMBOL_CAS
#define __pyx_n_s_XL_FR_SYMBOL_MTS __pyx_mstate_global->__pyx_n_s_XL_FR_SYMBOL_MTS
#define __pyx_n_s_XL_FR_SYMBOL_STATUS_MTSA __pyx_mstate_global->__pyx_n_s_XL_FR_SYMBOL_STATUS_MTSA
#define __pyx_n_s_XL_FR_SYMBOL_STATUS_MTSB __pyx_mstate_global->__pyx_n_s_XL_FR_SYMBOL_STATUS_MTSB
#define __pyx_n_s_XL_FR_SYMBOL_STATUS_SBSA __pyx_mstate_global->__pyx_n_s_XL_FR_SYMBOL_STATUS_SBSA
#define __pyx_n_s_XL_FR_SYMBOL_STATUS_SBSB __pyx_mstate_global->__pyx_n_s_XL_FR_SYMBOL_STATUS_SBSB
#define __pyx_n_s_XL_FR_SYMBOL_STATUS_SESA __pyx_mstate_global->__pyx_n_s_XL_FR_SYMBOL_STATUS_SESA
#define __pyx_n_s_XL_FR_SYMBOL_STATUS_SESB __pyx_mstate_global->__pyx_n_s_XL_FR_SYMBOL_STATUS_SESB
#define __pyx_n_s_XL_FR_SYMBOL_STATUS_TCSA __pyx_mstate_global->__pyx_n_s_XL_FR_SYMBOL_STATUS_TCSA
#define __pyx_n_s_XL_FR_SYMBOL_STATUS_TCSB __pyx_mstate_global->__pyx_n_s_XL_FR_SYMBOL_STATUS_TCSB
#define __pyx_n_s_XL_FR_SYMBOL_WINDOW __pyx_mstate_global->__pyx_n_s_XL_FR_SYMBOL_WINDOW
#define __pyx_n_s_XL_FR_TRANCEIVER_STATUS __pyx_mstate_global->__pyx_n_s_XL_FR_TRANCEIVER_STATUS
#define __pyx_n_s_XL_FR_TRANSCEIVER_MODE_NORMAL __pyx_mstate_global->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_NORMAL
#define __pyx_n_s_XL_FR_TRANSCEIVER_MODE_RECEIVE_O __pyx_mstate_global->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_RECEIVE_O
#define __pyx_n_s_XL_FR_TRANSCEIVER_MODE_SLEEP __pyx_mstate_global->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_SLEEP
#define __pyx_n_s_XL_FR_TRANSCEIVER_MODE_STANDBY __pyx_mstate_global->__pyx_n_s_XL_FR_TRANSCEIVER_MODE_STANDBY
#define __pyx_n_s_XL_FR_TX_FRAME __pyx_mstate_global->__pyx_n_s_XL_FR_TX_FRAME
#define __pyx_n_s_XL_FR_TX_MODE_CYCLIC __pyx_mstate_global->__pyx_n_s_XL_FR_TX_MODE_CYCLIC
#define __pyx_n_s_XL_FR_TX_MODE_NONE __pyx_mstate_global->__pyx_n_s_XL_FR_TX_MODE_NONE
#define __pyx_n_s_XL_FR_TX_MODE_SINGLE_SHOT __pyx_mstate_global->__pyx_n_s_XL_FR_TX_MODE_SINGLE_SHOT
#define __pyx_n_s_XL_FR_WAKEUP __pyx_mstate_global->__pyx_n_s_XL_FR_WAKEUP
#define __pyx_n_s_XL_FR_WAKEUP_COLLISION_HEADER __pyx_mstate_global->__pyx_n_s_XL_FR_WAKEUP_COLLISION_HEADER
#define __pyx_n_s_XL_FR_WAKEUP_COLLISION_UNKNOWN __pyx_mstate_global->__pyx_n_s_XL_FR_WAKEUP_COLLISION_UNKNOWN
#define __pyx_n_s_XL_FR_WAKEUP_COLLISION_WUP __pyx_mstate_global->__pyx_n_s_XL_FR_WAKEUP_COLLISION_WUP
#define __pyx_n_s_XL_FR_WAKEUP_RECEIVED_HEADER __pyx_mstate_global->__pyx_n_s_XL_FR_WAKEUP_RECEIVED_HEADER
#define __pyx_n_s_XL_FR_WAKEUP_RECEIVED_WUP __pyx_mstate_global->__pyx_n_s_XL_FR_WAKEUP_RECEIVED_WUP
#define __pyx_n_s_XL_FR_WAKEUP_RESERVED __pyx_mstate_global->__pyx_n_s_XL_FR_WAKEUP_RESERVED
#define __pyx_n_s_XL_FR_WAKEUP_TRANSMITTED __pyx_mstate_global->__pyx_n_s_XL_FR_WAKEUP_TRANSMITTED
#define __pyx_n_s_XL_FR_WAKEUP_UNDEFINED __pyx_mstate_global->__pyx_n_s_XL_FR_WAKEUP_UNDEFINED
#define __pyx_n_s_XL_HWTYPE_CANAC2PCI __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_CANAC2PCI
#define __pyx_n_s_XL_HWTYPE_CANBOARDXL __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_CANBOARDXL
#define __pyx_n_s_XL_HWTYPE_CANBOARDXL_PXI __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_CANBOARDXL_PXI
#define __pyx_n_s_XL_HWTYPE_CANCARDX __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_CANCARDX
#define __pyx_n_s_XL_HWTYPE_CANCARDXL __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_CANCARDXL
#define __pyx_n_s_XL_HWTYPE_CANCARDXLE __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_CANCARDXLE
#define __pyx_n_s_XL_HWTYPE_CANCARDY __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_CANCARDY
#define __pyx_n_s_XL_HWTYPE_CANCASEXL __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_CANCASEXL
#define __pyx_n_s_XL_HWTYPE_CANCASEXL_LOG_OBSOLETE __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_CANCASEXL_LOG_OBSOLETE
#define __pyx_n_s_XL_HWTYPE_CSMCAN __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_CSMCAN
#define __pyx_n_s_XL_HWTYPE_IPCL8800 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_IPCL8800
#define __pyx_n_s_XL_HWTYPE_IPCLIENT __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_IPCLIENT
#define __pyx_n_s_XL_HWTYPE_IPSERVER __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_IPSERVER
#define __pyx_n_s_XL_HWTYPE_IPSRV8800 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_IPSRV8800
#define __pyx_n_s_XL_HWTYPE_NONE __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_NONE
#define __pyx_n_s_XL_HWTYPE_VIRTUAL __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VIRTUAL
#define __pyx_n_s_XL_HWTYPE_VN0601 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN0601
#define __pyx_n_s_XL_HWTYPE_VN1610 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN1610
#define __pyx_n_s_XL_HWTYPE_VN1611 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN1611
#define __pyx_n_s_XL_HWTYPE_VN1630 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN1630
#define __pyx_n_s_XL_HWTYPE_VN1630_LOG __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN1630_LOG
#define __pyx_n_s_XL_HWTYPE_VN1640 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN1640
#define __pyx_n_s_XL_HWTYPE_VN2600 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN2600
#define __pyx_n_s_XL_HWTYPE_VN2610 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN2610
#define __pyx_n_s_XL_HWTYPE_VN2640 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN2640
#define __pyx_n_s_XL_HWTYPE_VN3300 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN3300
#define __pyx_n_s_XL_HWTYPE_VN3600 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN3600
#define __pyx_n_s_XL_HWTYPE_VN5610 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN5610
#define __pyx_n_s_XL_HWTYPE_VN5610A __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN5610A
#define __pyx_n_s_XL_HWTYPE_VN7570 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN7570
#define __pyx_n_s_XL_HWTYPE_VN7572 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN7572
#define __pyx_n_s_XL_HWTYPE_VN7600 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN7600
#define __pyx_n_s_XL_HWTYPE_VN7610 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN7610
#define __pyx_n_s_XL_HWTYPE_VN7640 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN7640
#define __pyx_n_s_XL_HWTYPE_VN8800 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN8800
#define __pyx_n_s_XL_HWTYPE_VN8900 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN8900
#define __pyx_n_s_XL_HWTYPE_VN8950 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN8950
#define __pyx_n_s_XL_HWTYPE_VN8970 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN8970
#define __pyx_n_s_XL_HWTYPE_VN8972 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VN8972
#define __pyx_n_s_XL_HWTYPE_VT6204 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VT6204
#define __pyx_n_s_XL_HWTYPE_VX0312 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VX0312
#define __pyx_n_s_XL_HWTYPE_VX1121 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VX1121
#define __pyx_n_s_XL_HWTYPE_VX1131 __pyx_mstate_global->__pyx_n_s_XL_HWTYPE_VX1131
#define __pyx_n_s_XL_INTERFACE_VERSION __pyx_mstate_global->__pyx_n_s_XL_INTERFACE_VERSION
#define __pyx_n_s_XL_INTERFACE_VERSION_V2 __pyx_mstate_global->__pyx_n_s_XL_INTERFACE_VERSION_V2
#define __pyx_n_s_XL_INTERFACE_VERSION_V3 __pyx_mstate_global->__pyx_n_s_XL_INTERFACE_VERSION_V3
#define __pyx_n_s_XL_INTERFACE_VERSION_V4 __pyx_mstate_global->__pyx_n_s_XL_INTERFACE_VERSION_V4
#define __pyx_n_s_XL_INVALID_PORTHANDLE __pyx_mstate_global->__pyx_n_s_XL_INVALID_PORTHANDLE
#define __pyx_n_s_XL_LIN_MSGFLAG_CRCERROR __pyx_mstate_global->__pyx_n_s_XL_LIN_MSGFLAG_CRCERROR
#define __pyx_n_s_XL_LIN_MSGFLAG_TX __pyx_mstate_global->__pyx_n_s_XL_LIN_MSGFLAG_TX
#define __pyx_n_s_XL_MAX_HWTYPE __pyx_mstate_global->__pyx_n_s_XL_MAX_HWTYPE
#define __pyx_n_s_XL_NOTIFY_REASON_CHANNEL_ACTIVAT __pyx_mstate_global->__pyx_n_s_XL_NOTIFY_REASON_CHANNEL_ACTIVAT
#define __pyx_n_s_XL_NOTIFY_REASON_CHANNEL_DEACTIV __pyx_mstate_global->__pyx_n_s_XL_NOTIFY_REASON_CHANNEL_DEACTIV
#define __pyx_n_s_XL_NOTIFY_REASON_PORT_CLOSED __pyx_mstate_global->__pyx_n_s_XL_NOTIFY_REASON_PORT_CLOSED
#define __pyx_n_s_XL_PENDING __pyx_mstate_global->__pyx_n_s_XL_PENDING
#define __pyx_n_s_XL_SET_TIMESYNC_NO_CHANGE __pyx_mstate_global->__pyx_n_s_XL_SET_TIMESYNC_NO_CHANGE
#define __pyx_n_s_XL_SET_TIMESYNC_OFF __pyx_mstate_global->__pyx_n_s_XL_SET_TIMESYNC_OFF
#define __pyx_n_s_XL_SET_TIMESYNC_ON __pyx_mstate_global->__pyx_n_s_XL_SET_TIMESYNC_ON
#define __pyx_n_s_XL_SUCCESS __pyx_mstate_global->__pyx_n_s_XL_SUCCESS
#define __pyx_n_s_XLstatus __pyx_mstate_global->__pyx_n_s_XLstatus
#define __pyx_n_s__104 __pyx_mstate_global->__pyx_n_s__104
#define __pyx_n_s_a429 __pyx_mstate_global->__pyx_n_s_a429
#define __pyx_n_s_acceptanceFilter __pyx_mstate_global->__pyx_n_s_acceptanceFilter
#define __pyx_n_s_accessMask __pyx_mstate_global->__pyx_n_s_accessMask
#define __pyx_n_s_activeSpeedGrade __pyx_mstate_global->__pyx_n_s_activeSpeedGrade
#define __pyx_n_s_appChannel __pyx_mstate_global->__pyx_n_s_appChannel
#define __pyx_n_s_appName __pyx_mstate_global->__pyx_n_s_appName
#define __pyx_n_s_applicationNotification __pyx_mstate_global->__pyx_n_s_applicationNotification
#define __pyx_n_s_arbitrationBitRate __pyx_mstate_global->__pyx_n_s_arbitrationBitRate
#define __pyx_n_s_articleNumber __pyx_mstate_global->__pyx_n_s_articleNumber
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_autoBaudrate __pyx_mstate_global->__pyx_n_s_autoBaudrate
#define __pyx_n_s_b __pyx_mstate_global->__pyx_n_s_b
#define __pyx_n_s_bAvailable __pyx_mstate_global->__pyx_n_s_bAvailable
#define __pyx_n_s_baudrate __pyx_mstate_global->__pyx_n_s_baudrate
#define __pyx_n_s_bitRate __pyx_mstate_global->__pyx_n_s_bitRate
#define __pyx_n_s_bitrate __pyx_mstate_global->__pyx_n_s_bitrate
#define __pyx_n_s_boxCount __pyx_mstate_global->__pyx_n_s_boxCount
#define __pyx_n_s_boxIndex __pyx_mstate_global->__pyx_n_s_boxIndex
#define __pyx_n_s_boxMask __pyx_mstate_global->__pyx_n_s_boxMask
#define __pyx_n_s_boxSerial __pyx_mstate_global->__pyx_n_s_boxSerial
#define __pyx_n_s_breakOffset __pyx_mstate_global->__pyx_n_s_breakOffset
#define __pyx_n_s_btr0 __pyx_mstate_global->__pyx_n_s_btr0
#define __pyx_n_s_btr1 __pyx_mstate_global->__pyx_n_s_btr1
#define __pyx_n_s_busGuardianEnable __pyx_mstate_global->__pyx_n_s_busGuardianEnable
#define __pyx_n_s_busGuardianTick __pyx_mstate_global->__pyx_n_s_busGuardianTick
#define __pyx_n_s_busParams __pyx_mstate_global->__pyx_n_s_busParams
#define __pyx_n_s_busType __pyx_mstate_global->__pyx_n_s_busType
#define __pyx_n_s_bypass __pyx_mstate_global->__pyx_n_s_bypass
#define __pyx_n_s_callSign __pyx_mstate_global->__pyx_n_s_callSign
#define __pyx_n_s_can __pyx_mstate_global->__pyx_n_s_can
#define __pyx_n_s_canFD __pyx_mstate_global->__pyx_n_s_canFD
#define __pyx_n_s_canFdConf __pyx_mstate_global->__pyx_n_s_canFdConf
#define __pyx_n_s_canId __pyx_mstate_global->__pyx_n_s_canId
#define __pyx_n_s_canOpMode __pyx_mstate_global->__pyx_n_s_canOpMode
#define __pyx_n_s_ccError __pyx_mstate_global->__pyx_n_s_ccError
#define __pyx_n_s_cfgMode __pyx_mstate_global->__pyx_n_s_cfgMode
#define __pyx_n_s_ch __pyx_mstate_global->__pyx_n_s_ch
#define __pyx_n_s_chanIndex __pyx_mstate_global->__pyx_n_s_chanIndex
#define __pyx_n_s_channel __pyx_mstate_global->__pyx_n_s_channel
#define __pyx_n_s_channelBusActiveCapabilities __pyx_mstate_global->__pyx_n_s_channelBusActiveCapabilities
#define __pyx_n_s_channelBusCapabilities __pyx_mstate_global->__pyx_n_s_channelBusCapabilities
#define __pyx_n_s_channelCapabilities __pyx_mstate_global->__pyx_n_s_channelCapabilities
#define __pyx_n_s_channelConfig __pyx_mstate_global->__pyx_n_s_channelConfig
#define __pyx_n_s_channelCount __pyx_mstate_global->__pyx_n_s_channelCount
#define __pyx_n_s_channelDirection __pyx_mstate_global->__pyx_n_s_channelDirection
#define __pyx_n_s_channelIndex __pyx_mstate_global->__pyx_n_s_channelIndex
#define __pyx_n_s_channelMask __pyx_mstate_global->__pyx_n_s_channelMask
#define __pyx_n_s_channelTime __pyx_mstate_global->__pyx_n_s_channelTime
#define __pyx_n_s_chipParams __pyx_mstate_global->__pyx_n_s_chipParams
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_clockCorrFailedCounter __pyx_mstate_global->__pyx_n_s_clockCorrFailedCounter
#define __pyx_n_s_clockMode __pyx_mstate_global->__pyx_n_s_clockMode
#define __pyx_n_s_clusterConfig __pyx_mstate_global->__pyx_n_s_clusterConfig
#define __pyx_n_s_code __pyx_mstate_global->__pyx_n_s_code
#define __pyx_n_s_compatibleSpeedGrade __pyx_mstate_global->__pyx_n_s_compatibleSpeedGrade
#define __pyx_n_s_configError __pyx_mstate_global->__pyx_n_s_configError
#define __pyx_n_s_connectedBusType __pyx_mstate_global->__pyx_n_s_connectedBusType
#define __pyx_n_s_connectionInfo __pyx_mstate_global->__pyx_n_s_connectionInfo
#define __pyx_n_s_connector __pyx_mstate_global->__pyx_n_s_connector
#define __pyx_n_s_currentlyAvailableTimestamps __pyx_mstate_global->__pyx_n_s_currentlyAvailableTimestamps
#define __pyx_n_s_cycleCount __pyx_mstate_global->__pyx_n_s_cycleCount
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_dataBitRate __pyx_mstate_global->__pyx_n_s_dataBitRate
#define __pyx_n_s_delimiterOffset __pyx_mstate_global->__pyx_n_s_delimiterOffset
#define __pyx_n_s_dir __pyx_mstate_global->__pyx_n_s_dir
#define __pyx_n_s_dlc __pyx_mstate_global->__pyx_n_s_dlc
#define __pyx_n_s_dllVersion __pyx_mstate_global->__pyx_n_s_dllVersion
#define __pyx_n_s_doNotUse __pyx_mstate_global->__pyx_n_s_doNotUse
#define __pyx_n_s_dominantRecessiveDelay __pyx_mstate_global->__pyx_n_s_dominantRecessiveDelay
#define __pyx_n_s_dominantTimeout __pyx_mstate_global->__pyx_n_s_dominantTimeout
#define __pyx_n_s_driverConfig __pyx_mstate_global->__pyx_n_s_driverConfig
#define __pyx_n_s_driverVersion __pyx_mstate_global->__pyx_n_s_driverVersion
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_err __pyx_mstate_global->__pyx_n_s_err
#define __pyx_n_s_errorInfo __pyx_mstate_global->__pyx_n_s_errorInfo
#define __pyx_n_s_errorMode __pyx_mstate_global->__pyx_n_s_errorMode
#define __pyx_n_s_ethernet __pyx_mstate_global->__pyx_n_s_ethernet
#define __pyx_n_s_evenSyncFramesA __pyx_mstate_global->__pyx_n_s_evenSyncFramesA
#define __pyx_n_s_evenSyncFramesB __pyx_mstate_global->__pyx_n_s_evenSyncFramesB
#define __pyx_n_s_eventBuffer __pyx_mstate_global->__pyx_n_s_eventBuffer
#define __pyx_n_s_eventCount __pyx_mstate_global->__pyx_n_s_eventCount
#define __pyx_n_s_externalClockCorrectionMode __pyx_mstate_global->__pyx_n_s_externalClockCorrectionMode
#define __pyx_n_s_filterChannelMask __pyx_mstate_global->__pyx_n_s_filterChannelMask
#define __pyx_n_s_filterFirstSlot __pyx_mstate_global->__pyx_n_s_filterFirstSlot
#define __pyx_n_s_filterLastSlot __pyx_mstate_global->__pyx_n_s_filterLastSlot
#define __pyx_n_s_filterStatus __pyx_mstate_global->__pyx_n_s_filterStatus
#define __pyx_n_s_filterTypeMask __pyx_mstate_global->__pyx_n_s_filterTypeMask
#define __pyx_n_s_first_id __pyx_mstate_global->__pyx_n_s_first_id
#define __pyx_n_s_flags __pyx_mstate_global->__pyx_n_s_flags
#define __pyx_n_s_flagsChip __pyx_mstate_global->__pyx_n_s_flagsChip
#define __pyx_n_s_flexray __pyx_mstate_global->__pyx_n_s_flexray
#define __pyx_n_s_fpgaCoreCapabilities __pyx_mstate_global->__pyx_n_s_fpgaCoreCapabilities
#define __pyx_n_s_frCCError __pyx_mstate_global->__pyx_n_s_frCCError
#define __pyx_n_s_frChannel __pyx_mstate_global->__pyx_n_s_frChannel
#define __pyx_n_s_frClockCorrectionFailure __pyx_mstate_global->__pyx_n_s_frClockCorrectionFailure
#define __pyx_n_s_frError __pyx_mstate_global->__pyx_n_s_frError
#define __pyx_n_s_frMode __pyx_mstate_global->__pyx_n_s_frMode
#define __pyx_n_s_frNitFailure __pyx_mstate_global->__pyx_n_s_frNitFailure
#define __pyx_n_s_frNmVector __pyx_mstate_global->__pyx_n_s_frNmVector
#define __pyx_n_s_frPocMode __pyx_mstate_global->__pyx_n_s_frPocMode
#define __pyx_n_s_frRxFrame __pyx_mstate_global->__pyx_n_s_frRxFrame
#define __pyx_n_s_frSpyFrame __pyx_mstate_global->__pyx_n_s_frSpyFrame
#define __pyx_n_s_frSpySymbol __pyx_mstate_global->__pyx_n_s_frSpySymbol
#define __pyx_n_s_frStartCycle __pyx_mstate_global->__pyx_n_s_frStartCycle
#define __pyx_n_s_frStartupAttributes __pyx_mstate_global->__pyx_n_s_frStartupAttributes
#define __pyx_n_s_frStatus __pyx_mstate_global->__pyx_n_s_frStatus
#define __pyx_n_s_frSymbolWindow __pyx_mstate_global->__pyx_n_s_frSymbolWindow
#define __pyx_n_s_frSyncFramesBelowMin __pyx_mstate_global->__pyx_n_s_frSyncFramesBelowMin
#define __pyx_n_s_frSyncFramesOverload __pyx_mstate_global->__pyx_n_s_frSyncFramesOverload
#define __pyx_n_s_frSyncPulse __pyx_mstate_global->__pyx_n_s_frSyncPulse
#define __pyx_n_s_frTxFrame __pyx_mstate_global->__pyx_n_s_frTxFrame
#define __pyx_n_s_frWakeup __pyx_mstate_global->__pyx_n_s_frWakeup
#define __pyx_n_s_frameCRC __pyx_mstate_global->__pyx_n_s_frameCRC
#define __pyx_n_s_frameError __pyx_mstate_global->__pyx_n_s_frameError
#define __pyx_n_s_frameLength __pyx_mstate_global->__pyx_n_s_frameLength
#define __pyx_n_s_gChannels __pyx_mstate_global->__pyx_n_s_gChannels
#define __pyx_n_s_gColdStartAttempts __pyx_mstate_global->__pyx_n_s_gColdStartAttempts
#define __pyx_n_s_gListenNoise __pyx_mstate_global->__pyx_n_s_gListenNoise
#define __pyx_n_s_gMacroPerCycle __pyx_mstate_global->__pyx_n_s_gMacroPerCycle
#define __pyx_n_s_gMaxWithoutClockCorrectionFatal __pyx_mstate_global->__pyx_n_s_gMaxWithoutClockCorrectionFatal
#define __pyx_n_s_gMaxWithoutClockCorrectionPassiv __pyx_mstate_global->__pyx_n_s_gMaxWithoutClockCorrectionPassiv
#define __pyx_n_s_gNetworkManagementVectorLength __pyx_mstate_global->__pyx_n_s_gNetworkManagementVectorLength
#define __pyx_n_s_gNumberOfMinislots __pyx_mstate_global->__pyx_n_s_gNumberOfMinislots
#define __pyx_n_s_gNumberOfStaticSlots __pyx_mstate_global->__pyx_n_s_gNumberOfStaticSlots
#define __pyx_n_s_gOffsetCorrectionStart __pyx_mstate_global->__pyx_n_s_gOffsetCorrectionStart
#define __pyx_n_s_gPayloadLengthStatic __pyx_mstate_global->__pyx_n_s_gPayloadLengthStatic
#define __pyx_n_s_gSyncNodeMax __pyx_mstate_global->__pyx_n_s_gSyncNodeMax
#define __pyx_n_s_gdActionPointOffset __pyx_mstate_global->__pyx_n_s_gdActionPointOffset
#define __pyx_n_s_gdCASRxLowMax __pyx_mstate_global->__pyx_n_s_gdCASRxLowMax
#define __pyx_n_s_gdDynamicSlotIdlePhase __pyx_mstate_global->__pyx_n_s_gdDynamicSlotIdlePhase
#define __pyx_n_s_gdMacrotick __pyx_mstate_global->__pyx_n_s_gdMacrotick
#define __pyx_n_s_gdMiniSlotActionPointOffset __pyx_mstate_global->__pyx_n_s_gdMiniSlotActionPointOffset
#define __pyx_n_s_gdMinislot __pyx_mstate_global->__pyx_n_s_gdMinislot
#define __pyx_n_s_gdNIT __pyx_mstate_global->__pyx_n_s_gdNIT
#define __pyx_n_s_gdStaticSlot __pyx_mstate_global->__pyx_n_s_gdStaticSlot
#define __pyx_n_s_gdSymbolWindow __pyx_mstate_global->__pyx_n_s_gdSymbolWindow
#define __pyx_n_s_gdTSSTransmitter __pyx_mstate_global->__pyx_n_s_gdTSSTransmitter
#define __pyx_n_s_gdWakeupSymbolRxIdle __pyx_mstate_global->__pyx_n_s_gdWakeupSymbolRxIdle
#define __pyx_n_s_gdWakeupSymbolRxLow __pyx_mstate_global->__pyx_n_s_gdWakeupSymbolRxLow
#define __pyx_n_s_gdWakeupSymbolRxWindow __pyx_mstate_global->__pyx_n_s_gdWakeupSymbolRxWindow
#define __pyx_n_s_gdWakeupSymbolTxIdle __pyx_mstate_global->__pyx_n_s_gdWakeupSymbolTxIdle
#define __pyx_n_s_gdWakeupSymbolTxLow __pyx_mstate_global->__pyx_n_s_gdWakeupSymbolTxLow
#define __pyx_n_s_headerCRC __pyx_mstate_global->__pyx_n_s_headerCRC
#define __pyx_n_s_headerFlags __pyx_mstate_global->__pyx_n_s_headerFlags
#define __pyx_n_s_hwChannel __pyx_mstate_global->__pyx_n_s_hwChannel
#define __pyx_n_s_hwIndex __pyx_mstate_global->__pyx_n_s_hwIndex
#define __pyx_n_s_hwType __pyx_mstate_global->__pyx_n_s_hwType
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_id __pyx_mstate_global->__pyx_n_s_id
#define __pyx_n_s_idRange __pyx_mstate_global->__pyx_n_s_idRange
#define __pyx_n_s_incrementOffset __pyx_mstate_global->__pyx_n_s_incrementOffset
#define __pyx_n_s_incrementSize __pyx_mstate_global->__pyx_n_s_incrementSize
#define __pyx_n_s_inicFwVersion __pyx_mstate_global->__pyx_n_s_inicFwVersion
#define __pyx_n_s_interfaceVersion __pyx_mstate_global->__pyx_n_s_interfaceVersion
#define __pyx_n_s_isOnBus __pyx_mstate_global->__pyx_n_s_isOnBus
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_j __pyx_mstate_global->__pyx_n_s_j
#define __pyx_n_s_last_id __pyx_mstate_global->__pyx_n_s_last_id
#define __pyx_n_s_level __pyx_mstate_global->__pyx_n_s_level
#define __pyx_n_s_licInfo __pyx_mstate_global->__pyx_n_s_licInfo
#define __pyx_n_s_licInfoArray __pyx_mstate_global->__pyx_n_s_licInfoArray
#define __pyx_n_s_licInfoArraySize __pyx_mstate_global->__pyx_n_s_licInfoArraySize
#define __pyx_n_s_licName __pyx_mstate_global->__pyx_n_s_licName
#define __pyx_n_s_lineMode __pyx_mstate_global->__pyx_n_s_lineMode
#define __pyx_n_s_link __pyx_mstate_global->__pyx_n_s_link
#define __pyx_n_s_lowLength __pyx_mstate_global->__pyx_n_s_lowLength
#define __pyx_kp_s_macAddr_6 __pyx_mstate_global->__pyx_kp_s_macAddr_6
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_mask __pyx_mstate_global->__pyx_n_s_mask
#define __pyx_n_s_maxBitrate __pyx_mstate_global->__pyx_n_s_maxBitrate
#define __pyx_n_s_maximalBaudrate __pyx_mstate_global->__pyx_n_s_maximalBaudrate
#define __pyx_n_s_maximalSupplyVoltage __pyx_mstate_global->__pyx_n_s_maximalSupplyVoltage
#define __pyx_n_s_messageCount __pyx_mstate_global->__pyx_n_s_messageCount
#define __pyx_n_s_message_count __pyx_mstate_global->__pyx_n_s_message_count
#define __pyx_n_s_minBitrate __pyx_mstate_global->__pyx_n_s_minBitrate
#define __pyx_n_s_minGap __pyx_mstate_global->__pyx_n_s_minGap
#define __pyx_n_s_minimalSupplyVoltage __pyx_mstate_global->__pyx_n_s_minimalSupplyVoltage
#define __pyx_n_s_mode __pyx_mstate_global->__pyx_n_s_mode
#define __pyx_n_s_most __pyx_mstate_global->__pyx_n_s_most
#define __pyx_n_s_msg __pyx_mstate_global->__pyx_n_s_msg
#define __pyx_n_s_msgCnt __pyx_mstate_global->__pyx_n_s_msgCnt
#define __pyx_n_s_msgCntSent __pyx_mstate_global->__pyx_n_s_msgCntSent
#define __pyx_n_s_msgFlags __pyx_mstate_global->__pyx_n_s_msgFlags
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_newValue __pyx_mstate_global->__pyx_n_s_newValue
#define __pyx_n_s_nmVector __pyx_mstate_global->__pyx_n_s_nmVector
#define __pyx_n_s_notifyReason __pyx_mstate_global->__pyx_n_s_notifyReason
#define __pyx_n_s_oddSyncFramesA __pyx_mstate_global->__pyx_n_s_oddSyncFramesA
#define __pyx_n_s_oddSyncFramesB __pyx_mstate_global->__pyx_n_s_oddSyncFramesB
#define __pyx_n_s_offset __pyx_mstate_global->__pyx_n_s_offset
#define __pyx_n_s_options __pyx_mstate_global->__pyx_n_s_options
#define __pyx_n_s_outputMode __pyx_mstate_global->__pyx_n_s_outputMode
#define __pyx_n_s_pAcceptanceFilter __pyx_mstate_global->__pyx_n_s_pAcceptanceFilter
#define __pyx_n_s_pAllowHaltDueToClock __pyx_mstate_global->__pyx_n_s_pAllowHaltDueToClock
#define __pyx_n_s_pAllowPassiveToActive __pyx_mstate_global->__pyx_n_s_pAllowPassiveToActive
#define __pyx_n_s_pBoxCount __pyx_mstate_global->__pyx_n_s_pBoxCount
#define __pyx_n_s_pBoxMask __pyx_mstate_global->__pyx_n_s_pBoxMask
#define __pyx_n_s_pBoxSerial __pyx_mstate_global->__pyx_n_s_pBoxSerial
#define __pyx_n_s_pCanFdConf __pyx_mstate_global->__pyx_n_s_pCanFdConf
#define __pyx_n_s_pChannelTime __pyx_mstate_global->__pyx_n_s_pChannelTime
#define __pyx_n_s_pChannels __pyx_mstate_global->__pyx_n_s_pChannels
#define __pyx_n_s_pChannelsMTS __pyx_mstate_global->__pyx_n_s_pChannelsMTS
#define __pyx_n_s_pChipParams __pyx_mstate_global->__pyx_n_s_pChipParams
#define __pyx_n_s_pClusterDriftDamping __pyx_mstate_global->__pyx_n_s_pClusterDriftDamping
#define __pyx_n_s_pDecodingCorrection __pyx_mstate_global->__pyx_n_s_pDecodingCorrection
#define __pyx_n_s_pDelayCompensationA __pyx_mstate_global->__pyx_n_s_pDelayCompensationA
#define __pyx_n_s_pDelayCompensationB __pyx_mstate_global->__pyx_n_s_pDelayCompensationB
#define __pyx_n_s_pDriverConfig __pyx_mstate_global->__pyx_n_s_pDriverConfig
#define __pyx_n_s_pEventBuffer __pyx_mstate_global->__pyx_n_s_pEventBuffer
#define __pyx_n_s_pEventCount __pyx_mstate_global->__pyx_n_s_pEventCount
#define __pyx_n_s_pEventList __pyx_mstate_global->__pyx_n_s_pEventList
#define __pyx_n_s_pEventString __pyx_mstate_global->__pyx_n_s_pEventString
#define __pyx_n_s_pExternOffsetCorrection __pyx_mstate_global->__pyx_n_s_pExternOffsetCorrection
#define __pyx_n_s_pExternRateCorrection __pyx_mstate_global->__pyx_n_s_pExternRateCorrection
#define __pyx_n_s_pHwChannel __pyx_mstate_global->__pyx_n_s_pHwChannel
#define __pyx_n_s_pHwIndex __pyx_mstate_global->__pyx_n_s_pHwIndex
#define __pyx_n_s_pHwType __pyx_mstate_global->__pyx_n_s_pHwType
#define __pyx_n_s_pKeySlotUsedForStartup __pyx_mstate_global->__pyx_n_s_pKeySlotUsedForStartup
#define __pyx_n_s_pKeySlotUsedForSync __pyx_mstate_global->__pyx_n_s_pKeySlotUsedForSync
#define __pyx_n_s_pLatestTx __pyx_mstate_global->__pyx_n_s_pLatestTx
#define __pyx_n_s_pLicInfo __pyx_mstate_global->__pyx_n_s_pLicInfo
#define __pyx_n_s_pLicInfoArray __pyx_mstate_global->__pyx_n_s_pLicInfoArray
#define __pyx_n_s_pMacroInitialOffsetA __pyx_mstate_global->__pyx_n_s_pMacroInitialOffsetA
#define __pyx_n_s_pMacroInitialOffsetB __pyx_mstate_global->__pyx_n_s_pMacroInitialOffsetB
#define __pyx_n_s_pMaxPayloadLengthDynamic __pyx_mstate_global->__pyx_n_s_pMaxPayloadLengthDynamic
#define __pyx_n_s_pMessage __pyx_mstate_global->__pyx_n_s_pMessage
#define __pyx_n_s_pMicroInitialOffsetA __pyx_mstate_global->__pyx_n_s_pMicroInitialOffsetA
#define __pyx_n_s_pMicroInitialOffsetB __pyx_mstate_global->__pyx_n_s_pMicroInitialOffsetB
#define __pyx_n_s_pMicroPerCycle __pyx_mstate_global->__pyx_n_s_pMicroPerCycle
#define __pyx_n_s_pMicroPerMacroNom __pyx_mstate_global->__pyx_n_s_pMicroPerMacroNom
#define __pyx_n_s_pMsgCntSent __pyx_mstate_global->__pyx_n_s_pMsgCntSent
#define __pyx_n_s_pOffsetCorrectionOut __pyx_mstate_global->__pyx_n_s_pOffsetCorrectionOut
#define __pyx_n_s_pPreviousValue __pyx_mstate_global->__pyx_n_s_pPreviousValue
#define __pyx_n_s_pRateCorrectionOut __pyx_mstate_global->__pyx_n_s_pRateCorrectionOut
#define __pyx_n_s_pSamplesPerMicrotick __pyx_mstate_global->__pyx_n_s_pSamplesPerMicrotick
#define __pyx_n_s_pSingleSlotEnabled __pyx_mstate_global->__pyx_n_s_pSingleSlotEnabled
#define __pyx_n_s_pTime __pyx_mstate_global->__pyx_n_s_pTime
#define __pyx_n_s_pWakeupChannel __pyx_mstate_global->__pyx_n_s_pWakeupChannel
#define __pyx_n_s_pWakeupPattern __pyx_mstate_global->__pyx_n_s_pWakeupPattern
#define __pyx_n_s_pXLcanTxEvents __pyx_mstate_global->__pyx_n_s_pXLcanTxEvents
#define __pyx_n_s_pXlCanTxEvt __pyx_mstate_global->__pyx_n_s_pXlCanTxEvt
#define __pyx_n_s_pXlHandle __pyx_mstate_global->__pyx_n_s_pXlHandle
#define __pyx_n_s_parity __pyx_mstate_global->__pyx_n_s_parity
#define __pyx_n_s_payloadLength __pyx_mstate_global->__pyx_n_s_payloadLength
#define __pyx_n_s_pdAcceptedStartupRange __pyx_mstate_global->__pyx_n_s_pdAcceptedStartupRange
#define __pyx_n_s_pdListenTimeout __pyx_mstate_global->__pyx_n_s_pdListenTimeout
#define __pyx_n_s_pdMaxDrift __pyx_mstate_global->__pyx_n_s_pdMaxDrift
#define __pyx_n_s_pdMicrotick __pyx_mstate_global->__pyx_n_s_pdMicrotick
#define __pyx_n_s_permissionMask __pyx_mstate_global->__pyx_n_s_permissionMask
#define __pyx_n_s_permission_mask __pyx_mstate_global->__pyx_n_s_permission_mask
#define __pyx_n_s_phy __pyx_mstate_global->__pyx_n_s_phy
#define __pyx_n_s_plevel __pyx_mstate_global->__pyx_n_s_plevel
#define __pyx_n_s_portHandle __pyx_mstate_global->__pyx_n_s_portHandle
#define __pyx_n_s_port_handle __pyx_mstate_global->__pyx_n_s_port_handle
#define __pyx_n_s_previousValue __pyx_mstate_global->__pyx_n_s_previousValue
#define __pyx_n_s_print __pyx_mstate_global->__pyx_n_s_print
#define __pyx_n_s_ptimerChannelMask __pyx_mstate_global->__pyx_n_s_ptimerChannelMask
#define __pyx_n_s_ptimerRate __pyx_mstate_global->__pyx_n_s_ptimerRate
#define __pyx_n_s_pxlClusterConfig __pyx_mstate_global->__pyx_n_s_pxlClusterConfig
#define __pyx_n_s_pxlEvent __pyx_mstate_global->__pyx_n_s_pxlEvent
#define __pyx_n_s_pxlFrChannelConfig __pyx_mstate_global->__pyx_n_s_pxlFrChannelConfig
#define __pyx_n_s_queueLevel __pyx_mstate_global->__pyx_n_s_queueLevel
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_raw __pyx_mstate_global->__pyx_n_s_raw
#define __pyx_kp_s_raw_24 __pyx_mstate_global->__pyx_kp_s_raw_24
#define __pyx_kp_s_raw_28 __pyx_mstate_global->__pyx_kp_s_raw_28
#define __pyx_kp_s_raw_data_10 __pyx_mstate_global->__pyx_kp_s_raw_data_10
#define __pyx_n_s_recessiveDominantDelay __pyx_mstate_global->__pyx_n_s_recessiveDominantDelay
#define __pyx_n_s_repetition __pyx_mstate_global->__pyx_n_s_repetition
#define __pyx_n_s_res1 __pyx_mstate_global->__pyx_n_s_res1
#define __pyx_n_s_resNet __pyx_mstate_global->__pyx_n_s_resNet
#define __pyx_n_s_reserved __pyx_mstate_global->__pyx_n_s_reserved
#define __pyx_n_s_reserved0 __pyx_mstate_global->__pyx_n_s_reserved0
#define __pyx_n_s_reserved1 __pyx_mstate_global->__pyx_n_s_reserved1
#define __pyx_kp_s_reserved1_7 __pyx_mstate_global->__pyx_kp_s_reserved1_7
#define __pyx_n_s_reserved2 __pyx_mstate_global->__pyx_n_s_reserved2
#define __pyx_kp_s_reserved_10 __pyx_mstate_global->__pyx_kp_s_reserved_10
#define __pyx_kp_s_reserved_3 __pyx_mstate_global->__pyx_kp_s_reserved_3
#define __pyx_n_s_retEvent __pyx_mstate_global->__pyx_n_s_retEvent
#define __pyx_n_s_rxQueueSize __pyx_mstate_global->__pyx_n_s_rxQueueSize
#define __pyx_n_s_sam __pyx_mstate_global->__pyx_n_s_sam
#define __pyx_n_s_samAbr __pyx_mstate_global->__pyx_n_s_samAbr
#define __pyx_n_s_serialNumber __pyx_mstate_global->__pyx_n_s_serialNumber
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_sjw __pyx_mstate_global->__pyx_n_s_sjw
#define __pyx_n_s_sjwAbr __pyx_mstate_global->__pyx_n_s_sjwAbr
#define __pyx_n_s_sjwDbr __pyx_mstate_global->__pyx_n_s_sjwDbr
#define __pyx_n_s_slotID __pyx_mstate_global->__pyx_n_s_slotID
#define __pyx_n_s_specialCabFlags __pyx_mstate_global->__pyx_n_s_specialCabFlags
#define __pyx_n_s_specialDeviceStatus __pyx_mstate_global->__pyx_n_s_specialDeviceStatus
#define __pyx_n_s_speed __pyx_mstate_global->__pyx_n_s_speed
#define __pyx_n_s_status __pyx_mstate_global->__pyx_n_s_status
#define __pyx_n_s_statusType __pyx_mstate_global->__pyx_n_s_statusType
#define __pyx_n_s_symbol __pyx_mstate_global->__pyx_n_s_symbol
#define __pyx_n_s_symbolWindow __pyx_mstate_global->__pyx_n_s_symbolWindow
#define __pyx_n_s_symbolWindowMask __pyx_mstate_global->__pyx_n_s_symbolWindowMask
#define __pyx_n_s_tag __pyx_mstate_global->__pyx_n_s_tag
#define __pyx_n_s_tagData __pyx_mstate_global->__pyx_n_s_tagData
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_time __pyx_mstate_global->__pyx_n_s_time
#define __pyx_n_s_timeStamp __pyx_mstate_global->__pyx_n_s_timeStamp
#define __pyx_n_s_timeStampSync __pyx_mstate_global->__pyx_n_s_timeStampSync
#define __pyx_n_s_timerChannelMask __pyx_mstate_global->__pyx_n_s_timerChannelMask
#define __pyx_n_s_timerRate __pyx_mstate_global->__pyx_n_s_timerRate
#define __pyx_n_s_transId __pyx_mstate_global->__pyx_n_s_transId
#define __pyx_n_s_transceiverName __pyx_mstate_global->__pyx_n_s_transceiverName
#define __pyx_n_s_transceiverState __pyx_mstate_global->__pyx_n_s_transceiverState
#define __pyx_n_s_transceiverType __pyx_mstate_global->__pyx_n_s_transceiverType
#define __pyx_n_s_triggerSource __pyx_mstate_global->__pyx_n_s_triggerSource
#define __pyx_n_s_tseg1 __pyx_mstate_global->__pyx_n_s_tseg1
#define __pyx_n_s_tseg1Abr __pyx_mstate_global->__pyx_n_s_tseg1Abr
#define __pyx_n_s_tseg1Dbr __pyx_mstate_global->__pyx_n_s_tseg1Dbr
#define __pyx_n_s_tseg2 __pyx_mstate_global->__pyx_n_s_tseg2
#define __pyx_n_s_tseg2Abr __pyx_mstate_global->__pyx_n_s_tseg2Abr
#define __pyx_n_s_tseg2Dbr __pyx_mstate_global->__pyx_n_s_tseg2Dbr
#define __pyx_n_s_tssLength __pyx_mstate_global->__pyx_n_s_tssLength
#define __pyx_n_s_tx __pyx_mstate_global->__pyx_n_s_tx
#define __pyx_n_s_txMode __pyx_mstate_global->__pyx_n_s_txMode
#define __pyx_n_s_txrq __pyx_mstate_global->__pyx_n_s_txrq
#define __pyx_n_s_type __pyx_mstate_global->__pyx_n_s_type
#define __pyx_n_s_userHandle __pyx_mstate_global->__pyx_n_s_userHandle
#define __pyx_n_s_vAllowPassivToActive __pyx_mstate_global->__pyx_n_s_vAllowPassivToActive
#define __pyx_n_s_vClockCorrectionFailed __pyx_mstate_global->__pyx_n_s_vClockCorrectionFailed
#define __pyx_n_s_vExternOffsetControl __pyx_mstate_global->__pyx_n_s_vExternOffsetControl
#define __pyx_n_s_vExternRateControl __pyx_mstate_global->__pyx_n_s_vExternRateControl
#define __pyx_n_s_vOffsetCorrection __pyx_mstate_global->__pyx_n_s_vOffsetCorrection
#define __pyx_n_s_vRateCorrection __pyx_mstate_global->__pyx_n_s_vRateCorrection
#define __pyx_n_s_vxlapi __pyx_mstate_global->__pyx_n_s_vxlapi
#define __pyx_kp_s_vxlapi_pyx __pyx_mstate_global->__pyx_kp_s_vxlapi_pyx
#define __pyx_n_s_waitForFinish __pyx_mstate_global->__pyx_n_s_waitForFinish
#define __pyx_n_s_wakeupStatus __pyx_mstate_global->__pyx_n_s_wakeupStatus
#define __pyx_n_s_xlEvent __pyx_mstate_global->__pyx_n_s_xlEvent
#define __pyx_n_s_xlFrClusterConfig __pyx_mstate_global->__pyx_n_s_xlFrClusterConfig
#define __pyx_n_s_xlHandle __pyx_mstate_global->__pyx_n_s_xlHandle
#define __pyx_n_s_xlInterfaceVersion __pyx_mstate_global->__pyx_n_s_xlInterfaceVersion
#define __pyx_n_s_xlstring __pyx_mstate_global->__pyx_n_s_xlstring
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__39 __pyx_mstate_global->__pyx_tuple__39
#define __pyx_tuple__41 __pyx_mstate_global->__pyx_tuple__41
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__47 __pyx_mstate_global->__pyx_tuple__47
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__69 __pyx_mstate_global->__pyx_tuple__69
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__74 __pyx_mstate_global->__pyx_tuple__74
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__88 __pyx_mstate_global->__pyx_tuple__88
#define __pyx_tuple__90 __pyx_mstate_global->__pyx_tuple__90
#define __pyx_tuple__92 __pyx_mstate_global->__pyx_tuple__92
#define __pyx_tuple__95 __pyx_mstate_global->__pyx_tuple__95
#define __pyx_tuple__98 __pyx_mstate_global->__pyx_tuple__98
#define __pyx_codeobj__6 __pyx_mstate_global->__pyx_codeobj__6
#define __pyx_codeobj__7 __pyx_mstate_global->__pyx_codeobj__7
#define __pyx_codeobj__9 __pyx_mstate_global->__pyx_codeobj__9
#define __pyx_tuple__100 __pyx_mstate_global->__pyx_tuple__100
#define __pyx_tuple__102 __pyx_mstate_global->__pyx_tuple__102
#define __pyx_codeobj__10 __pyx_mstate_global->__pyx_codeobj__10
#define __pyx_codeobj__12 __pyx_mstate_global->__pyx_codeobj__12
#define __pyx_codeobj__14 __pyx_mstate_global->__pyx_codeobj__14
#define __pyx_codeobj__16 __pyx_mstate_global->__pyx_codeobj__16
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__20 __pyx_mstate_global->__pyx_codeobj__20
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__24 __pyx_mstate_global->__pyx_codeobj__24
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__40 __pyx_mstate_global->__pyx_codeobj__40
#define __pyx_codeobj__42 __pyx_mstate_global->__pyx_codeobj__42
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__52 __pyx_mstate_global->__pyx_codeobj__52
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__62 __pyx_mstate_global->__pyx_codeobj__62
#define __pyx_codeobj__64 __pyx_mstate_global->__pyx_codeobj__64
#define __pyx_codeobj__66 __pyx_mstate_global->__pyx_codeobj__66
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__70 __pyx_mstate_global->__pyx_codeobj__70
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__75 __pyx_mstate_global->__pyx_codeobj__75
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__91 __pyx_mstate_global->__pyx_codeobj__91
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
/* #### Code section: module_code ### */

/* "FromPyStructUtility":12
 * 
 * @cname("__pyx_convert__from_py_XLchipParams")
 * cdef struct_type __pyx_convert__from_py_XLchipParams(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

static XLchipParams __pyx_convert__from_py_XLchipParams(PyObject *__pyx_v_obj) {
  XLchipParams __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  XLchipParams __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  unsigned long __pyx_t_10;
  unsigned char __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_XLchipParams", 1);

  /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_XLchipParams(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 */
  __pyx_t_1 = (!PyMapping_Check(__pyx_v_obj));
  if (__pyx_t_1) {

    /* "FromPyStructUtility":15
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_t_2 = __Pyx_RaiseUnexpectedTypeError(((char const *)"a mapping"), __pyx_v_obj); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 15, __pyx_L1_error)

    /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_XLchipParams(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 */
  }

  /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['bitRate']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":18
 * 
 *     try:
 *         value = obj['bitRate']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'bitRate'")
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_bitRate); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 18, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_value = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['bitRate']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "FromPyStructUtility":19
 *     try:
 *         value = obj['bitRate']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'bitRate'")
 *     result.bitRate = value
 */
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_XLchipParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 19, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":20
 *         value = obj['bitRate']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'bitRate'")             # <<<<<<<<<<<<<<
 *     result.bitRate = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 20, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 20, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;

    /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['bitRate']
 *     except KeyError:
 */
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":21
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'bitRate'")
 *     result.bitRate = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['sjw']
 */
  __pyx_t_10 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_10 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 21, __pyx_L1_error)
  __pyx_v_result.bitRate = __pyx_t_10;

  /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'bitRate'")
 *     result.bitRate = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['sjw']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":23
 *     result.bitRate = value
 *     try:
 *         value = obj['sjw']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'sjw'")
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_sjw); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 23, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'bitRate'")
 *     result.bitRate = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['sjw']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":24
 *     try:
 *         value = obj['sjw']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'sjw'")
 *     result.sjw = value
 */
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_XLchipParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(1, 24, __pyx_L14_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "FromPyStructUtility":25
 *         value = obj['sjw']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'sjw'")             # <<<<<<<<<<<<<<
 *     result.sjw = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 25, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 25, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;

    /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'bitRate'")
 *     result.bitRate = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['sjw']
 *     except KeyError:
 */
    __pyx_L14_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":26
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'sjw'")
 *     result.sjw = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['tseg1']
 */
  __pyx_t_11 = __Pyx_PyInt_As_unsigned_char(__pyx_v_value); if (unlikely((__pyx_t_11 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(1, 26, __pyx_L1_error)
  __pyx_v_result.sjw = __pyx_t_11;

  /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'sjw'")
 *     result.sjw = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['tseg1']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":28
 *     result.sjw = value
 *     try:
 *         value = obj['tseg1']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'tseg1'")
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_tseg1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 28, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'sjw'")
 *     result.sjw = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['tseg1']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L25_try_end;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":29
 *     try:
 *         value = obj['tseg1']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'tseg1'")
 *     result.tseg1 = value
 */
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_XLchipParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 29, __pyx_L22_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":30
 *         value = obj['tseg1']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'tseg1'")             # <<<<<<<<<<<<<<
 *     result.tseg1 = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 30, __pyx_L22_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 30, __pyx_L22_except_error)
    }
    goto __pyx_L22_except_error;

    /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'sjw'")
 *     result.sjw = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['tseg1']
 *     except KeyError:
 */
    __pyx_L22_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L25_try_end:;
  }

  /* "FromPyStructUtility":31
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'tseg1'")
 *     result.tseg1 = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['tseg2']
 */
  __pyx_t_11 = __Pyx_PyInt_As_unsigned_char(__pyx_v_value); if (unlikely((__pyx_t_11 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(1, 31, __pyx_L1_error)
  __pyx_v_result.tseg1 = __pyx_t_11;

  /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 'tseg1'")
 *     result.tseg1 = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['tseg2']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":33
 *     result.tseg1 = value
 *     try:
 *         value = obj['tseg2']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'tseg2'")
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_tseg2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 33, __pyx_L28_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 'tseg1'")
 *     result.tseg1 = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['tseg2']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L33_try_end;
    __pyx_L28_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":34
 *     try:
 *         value = obj['tseg2']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'tseg2'")
 *     result.tseg2 = value
 */
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_XLchipParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(1, 34, __pyx_L30_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "FromPyStructUtility":35
 *         value = obj['tseg2']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'tseg2'")             # <<<<<<<<<<<<<<
 *     result.tseg2 = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 35, __pyx_L30_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 35, __pyx_L30_except_error)
    }
    goto __pyx_L30_except_error;

    /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 'tseg1'")
 *     result.tseg1 = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['tseg2']
 *     except KeyError:
 */
    __pyx_L30_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L33_try_end:;
  }

  /* "FromPyStructUtility":36
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'tseg2'")
 *     result.tseg2 = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['sam']
 */
  __pyx_t_11 = __Pyx_PyInt_As_unsigned_char(__pyx_v_value); if (unlikely((__pyx_t_11 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(1, 36, __pyx_L1_error)
  __pyx_v_result.tseg2 = __pyx_t_11;

  /* "FromPyStructUtility":37
 *         raise ValueError("No value specified for struct attribute 'tseg2'")
 *     result.tseg2 = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['sam']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":38
 *     result.tseg2 = value
 *     try:
 *         value = obj['sam']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'sam'")
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_sam); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 38, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":37
 *         raise ValueError("No value specified for struct attribute 'tseg2'")
 *     result.tseg2 = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['sam']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L41_try_end;
    __pyx_L36_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":39
 *     try:
 *         value = obj['sam']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'sam'")
 *     result.sam = value
 */
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_XLchipParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 39, __pyx_L38_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":40
 *         value = obj['sam']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'sam'")             # <<<<<<<<<<<<<<
 *     result.sam = value
 *     return result
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 40, __pyx_L38_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 40, __pyx_L38_except_error)
    }
    goto __pyx_L38_except_error;

    /* "FromPyStructUtility":37
 *         raise ValueError("No value specified for struct attribute 'tseg2'")
 *     result.tseg2 = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['sam']
 *     except KeyError:
 */
    __pyx_L38_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L41_try_end:;
  }

  /* "FromPyStructUtility":41
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'sam'")
 *     result.sam = value             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_11 = __Pyx_PyInt_As_unsigned_char(__pyx_v_value); if (unlikely((__pyx_t_11 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(1, 41, __pyx_L1_error)
  __pyx_v_result.sam = __pyx_t_11;

  /* "FromPyStructUtility":42
 *         raise ValueError("No value specified for struct attribute 'sam'")
 *     result.sam = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":12
 * 
 * @cname("__pyx_convert__from_py_XLchipParams")
 * cdef struct_type __pyx_convert__from_py_XLchipParams(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_XLchipParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":114
 * 
 * @cname("__Pyx_carray_to_py_unsigned_int")
 * cdef inline list __Pyx_carray_to_py_unsigned_int(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_py_unsigned_int(unsigned int *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py_unsigned_int", 1);

  /* "carray.to_py":117
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":118
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":119
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":120
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(l, i, value)
 *     return l
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":121
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":122
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":114
 * 
 * @cname("__Pyx_carray_to_py_unsigned_int")
 * cdef inline list __Pyx_carray_to_py_unsigned_int(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py_unsigned_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":126
 * 
 * @cname("__Pyx_carray_to_tuple_unsigned_int")
 * cdef inline tuple __Pyx_carray_to_tuple_unsigned_int(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_unsigned_int(unsigned int *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple_unsigned_int", 1);

  /* "carray.to_py":129
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":130
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":131
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":132
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":133
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
 */
    PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":134
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":126
 * 
 * @cname("__Pyx_carray_to_tuple_unsigned_int")
 * cdef inline tuple __Pyx_carray_to_tuple_unsigned_int(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple_unsigned_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":477
 *     XL_RECEIVE_DAIO_PIGGY       = 34
 * 
 * def OpenDriver():             # <<<<<<<<<<<<<<
 *     return xlOpenDriver()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_1OpenDriver(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_1OpenDriver = {"OpenDriver", (PyCFunction)__pyx_pw_6vxlapi_1OpenDriver, METH_NOARGS, 0};
static PyObject *__pyx_pw_6vxlapi_1OpenDriver(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("OpenDriver (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6vxlapi_OpenDriver(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_OpenDriver(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("OpenDriver", 1);

  /* "vxlapi.pyx":478
 * 
 * def OpenDriver():
 *     return xlOpenDriver()             # <<<<<<<<<<<<<<
 * 
 * def CloseDriver():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlOpenDriver()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":477
 *     XL_RECEIVE_DAIO_PIGGY       = 34
 * 
 * def OpenDriver():             # <<<<<<<<<<<<<<
 *     return xlOpenDriver()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.OpenDriver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":480
 *     return xlOpenDriver()
 * 
 * def CloseDriver():             # <<<<<<<<<<<<<<
 *     return xlCloseDriver()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_3CloseDriver(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_3CloseDriver = {"CloseDriver", (PyCFunction)__pyx_pw_6vxlapi_3CloseDriver, METH_NOARGS, 0};
static PyObject *__pyx_pw_6vxlapi_3CloseDriver(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CloseDriver (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6vxlapi_2CloseDriver(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_2CloseDriver(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CloseDriver", 1);

  /* "vxlapi.pyx":481
 * 
 * def CloseDriver():
 *     return xlCloseDriver()             # <<<<<<<<<<<<<<
 * 
 * def GetChannelMask(int hwType, int hwIndex, int hwChannel):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCloseDriver()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":480
 *     return xlOpenDriver()
 * 
 * def CloseDriver():             # <<<<<<<<<<<<<<
 *     return xlCloseDriver()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CloseDriver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":483
 *     return xlCloseDriver()
 * 
 * def GetChannelMask(int hwType, int hwIndex, int hwChannel):             # <<<<<<<<<<<<<<
 *     return xlGetChannelMask(hwType, hwIndex, hwChannel)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_5GetChannelMask(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_5GetChannelMask = {"GetChannelMask", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_5GetChannelMask, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_5GetChannelMask(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_hwType;
  int __pyx_v_hwIndex;
  int __pyx_v_hwChannel;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetChannelMask (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwType,&__pyx_n_s_hwIndex,&__pyx_n_s_hwChannel,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwType)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwIndex)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetChannelMask", 1, 3, 3, 1); __PYX_ERR(0, 483, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwChannel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetChannelMask", 1, 3, 3, 2); __PYX_ERR(0, 483, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetChannelMask") < 0)) __PYX_ERR(0, 483, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_hwType = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_hwType == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
    __pyx_v_hwIndex = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_hwIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
    __pyx_v_hwChannel = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_hwChannel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetChannelMask", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 483, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetChannelMask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_4GetChannelMask(__pyx_self, __pyx_v_hwType, __pyx_v_hwIndex, __pyx_v_hwChannel);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_4GetChannelMask(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_hwType, int __pyx_v_hwIndex, int __pyx_v_hwChannel) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetChannelMask", 1);

  /* "vxlapi.pyx":484
 * 
 * def GetChannelMask(int hwType, int hwIndex, int hwChannel):
 *     return xlGetChannelMask(hwType, hwIndex, hwChannel)             # <<<<<<<<<<<<<<
 * 
 * def GetChannelIndex(int hwType, int hwIndex, int hwChannel):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLuint64(xlGetChannelMask(__pyx_v_hwType, __pyx_v_hwIndex, __pyx_v_hwChannel)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":483
 *     return xlCloseDriver()
 * 
 * def GetChannelMask(int hwType, int hwIndex, int hwChannel):             # <<<<<<<<<<<<<<
 *     return xlGetChannelMask(hwType, hwIndex, hwChannel)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.GetChannelMask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":486
 *     return xlGetChannelMask(hwType, hwIndex, hwChannel)
 * 
 * def GetChannelIndex(int hwType, int hwIndex, int hwChannel):             # <<<<<<<<<<<<<<
 *     return xlGetChannelIndex(hwType, hwIndex, hwChannel)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_7GetChannelIndex(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_7GetChannelIndex = {"GetChannelIndex", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_7GetChannelIndex, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_7GetChannelIndex(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_hwType;
  int __pyx_v_hwIndex;
  int __pyx_v_hwChannel;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetChannelIndex (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwType,&__pyx_n_s_hwIndex,&__pyx_n_s_hwChannel,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwType)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 486, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwIndex)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 486, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetChannelIndex", 1, 3, 3, 1); __PYX_ERR(0, 486, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwChannel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 486, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetChannelIndex", 1, 3, 3, 2); __PYX_ERR(0, 486, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetChannelIndex") < 0)) __PYX_ERR(0, 486, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_hwType = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_hwType == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 486, __pyx_L3_error)
    __pyx_v_hwIndex = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_hwIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 486, __pyx_L3_error)
    __pyx_v_hwChannel = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_hwChannel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 486, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetChannelIndex", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 486, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetChannelIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_6GetChannelIndex(__pyx_self, __pyx_v_hwType, __pyx_v_hwIndex, __pyx_v_hwChannel);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_6GetChannelIndex(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_hwType, int __pyx_v_hwIndex, int __pyx_v_hwChannel) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetChannelIndex", 1);

  /* "vxlapi.pyx":487
 * 
 * def GetChannelIndex(int hwType, int hwIndex, int hwChannel):
 *     return xlGetChannelIndex(hwType, hwIndex, hwChannel)             # <<<<<<<<<<<<<<
 * 
 * def OpenPort(list portHandle, char* appName, XLaccess accessMask, list permissionMask, unsigned int rxQueueSize, unsigned int xlInterfaceVersion, unsigned int busType):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(xlGetChannelIndex(__pyx_v_hwType, __pyx_v_hwIndex, __pyx_v_hwChannel)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":486
 *     return xlGetChannelMask(hwType, hwIndex, hwChannel)
 * 
 * def GetChannelIndex(int hwType, int hwIndex, int hwChannel):             # <<<<<<<<<<<<<<
 *     return xlGetChannelIndex(hwType, hwIndex, hwChannel)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.GetChannelIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":489
 *     return xlGetChannelIndex(hwType, hwIndex, hwChannel)
 * 
 * def OpenPort(list portHandle, char* appName, XLaccess accessMask, list permissionMask, unsigned int rxQueueSize, unsigned int xlInterfaceVersion, unsigned int busType):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLportHandle port_handle = XL_INVALID_PORTHANDLE
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_9OpenPort(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_9OpenPort = {"OpenPort", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_9OpenPort, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_9OpenPort(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_portHandle = 0;
  char *__pyx_v_appName;
  XLaccess __pyx_v_accessMask;
  PyObject *__pyx_v_permissionMask = 0;
  unsigned int __pyx_v_rxQueueSize;
  unsigned int __pyx_v_xlInterfaceVersion;
  unsigned int __pyx_v_busType;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("OpenPort (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_appName,&__pyx_n_s_accessMask,&__pyx_n_s_permissionMask,&__pyx_n_s_rxQueueSize,&__pyx_n_s_xlInterfaceVersion,&__pyx_n_s_busType,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_appName)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("OpenPort", 1, 7, 7, 1); __PYX_ERR(0, 489, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("OpenPort", 1, 7, 7, 2); __PYX_ERR(0, 489, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_permissionMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("OpenPort", 1, 7, 7, 3); __PYX_ERR(0, 489, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_rxQueueSize)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("OpenPort", 1, 7, 7, 4); __PYX_ERR(0, 489, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_xlInterfaceVersion)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("OpenPort", 1, 7, 7, 5); __PYX_ERR(0, 489, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_busType)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[6]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("OpenPort", 1, 7, 7, 6); __PYX_ERR(0, 489, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "OpenPort") < 0)) __PYX_ERR(0, 489, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 7)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
      values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
    }
    __pyx_v_portHandle = ((PyObject*)values[0]);
    __pyx_v_appName = __Pyx_PyObject_AsWritableString(values[1]); if (unlikely((!__pyx_v_appName) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[2]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
    __pyx_v_permissionMask = ((PyObject*)values[3]);
    __pyx_v_rxQueueSize = __Pyx_PyInt_As_unsigned_int(values[4]); if (unlikely((__pyx_v_rxQueueSize == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
    __pyx_v_xlInterfaceVersion = __Pyx_PyInt_As_unsigned_int(values[5]); if (unlikely((__pyx_v_xlInterfaceVersion == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
    __pyx_v_busType = __Pyx_PyInt_As_unsigned_int(values[6]); if (unlikely((__pyx_v_busType == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("OpenPort", 1, 7, 7, __pyx_nargs); __PYX_ERR(0, 489, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.OpenPort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_portHandle), (&PyList_Type), 1, "portHandle", 1))) __PYX_ERR(0, 489, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_permissionMask), (&PyList_Type), 1, "permissionMask", 1))) __PYX_ERR(0, 489, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_8OpenPort(__pyx_self, __pyx_v_portHandle, __pyx_v_appName, __pyx_v_accessMask, __pyx_v_permissionMask, __pyx_v_rxQueueSize, __pyx_v_xlInterfaceVersion, __pyx_v_busType);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_8OpenPort(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_portHandle, char *__pyx_v_appName, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_permissionMask, unsigned int __pyx_v_rxQueueSize, unsigned int __pyx_v_xlInterfaceVersion, unsigned int __pyx_v_busType) {
  XLstatus __pyx_v_status;
  XLportHandle __pyx_v_port_handle;
  XLaccess __pyx_v_permission_mask;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  XLportHandle __pyx_t_3;
  XLaccess __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("OpenPort", 1);

  /* "vxlapi.pyx":490
 * 
 * def OpenPort(list portHandle, char* appName, XLaccess accessMask, list permissionMask, unsigned int rxQueueSize, unsigned int xlInterfaceVersion, unsigned int busType):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLportHandle port_handle = XL_INVALID_PORTHANDLE
 *     cdef XLaccess permission_mask = permissionMask[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":491
 * def OpenPort(list portHandle, char* appName, XLaccess accessMask, list permissionMask, unsigned int rxQueueSize, unsigned int xlInterfaceVersion, unsigned int busType):
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLportHandle port_handle = XL_INVALID_PORTHANDLE             # <<<<<<<<<<<<<<
 *     cdef XLaccess permission_mask = permissionMask[0]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_INVALID_PORTHANDLE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_XLportHandle(__pyx_t_1); if (unlikely((__pyx_t_3 == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_port_handle = __pyx_t_3;

  /* "vxlapi.pyx":492
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLportHandle port_handle = XL_INVALID_PORTHANDLE
 *     cdef XLaccess permission_mask = permissionMask[0]             # <<<<<<<<<<<<<<
 * 
 *     status = xlOpenPort(&port_handle, appName, accessMask, &permission_mask, rxQueueSize, xlInterfaceVersion, busType)
 */
  if (unlikely(__pyx_v_permissionMask == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 492, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_permissionMask, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_XLuint64(__pyx_t_1); if (unlikely((__pyx_t_4 == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_permission_mask = __pyx_t_4;

  /* "vxlapi.pyx":494
 *     cdef XLaccess permission_mask = permissionMask[0]
 * 
 *     status = xlOpenPort(&port_handle, appName, accessMask, &permission_mask, rxQueueSize, xlInterfaceVersion, busType)             # <<<<<<<<<<<<<<
 * 
 *     portHandle[0] = port_handle
 */
  __pyx_v_status = xlOpenPort((&__pyx_v_port_handle), __pyx_v_appName, __pyx_v_accessMask, (&__pyx_v_permission_mask), __pyx_v_rxQueueSize, __pyx_v_xlInterfaceVersion, __pyx_v_busType);

  /* "vxlapi.pyx":496
 *     status = xlOpenPort(&port_handle, appName, accessMask, &permission_mask, rxQueueSize, xlInterfaceVersion, busType)
 * 
 *     portHandle[0] = port_handle             # <<<<<<<<<<<<<<
 *     permissionMask[0] = permission_mask
 *     return status
 */
  __pyx_t_1 = __Pyx_PyInt_From_XLportHandle(__pyx_v_port_handle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_portHandle == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 496, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_portHandle, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":497
 * 
 *     portHandle[0] = port_handle
 *     permissionMask[0] = permission_mask             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_XLuint64(__pyx_v_permission_mask); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_permissionMask == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 497, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_permissionMask, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":498
 *     portHandle[0] = port_handle
 *     permissionMask[0] = permission_mask
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def ClosePort(XLportHandle portHandle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":489
 *     return xlGetChannelIndex(hwType, hwIndex, hwChannel)
 * 
 * def OpenPort(list portHandle, char* appName, XLaccess accessMask, list permissionMask, unsigned int rxQueueSize, unsigned int xlInterfaceVersion, unsigned int busType):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLportHandle port_handle = XL_INVALID_PORTHANDLE
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.OpenPort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":500
 *     return status
 * 
 * def ClosePort(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlClosePort(portHandle)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_11ClosePort(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_11ClosePort = {"ClosePort", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_11ClosePort, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_11ClosePort(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ClosePort (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "ClosePort") < 0)) __PYX_ERR(0, 500, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ClosePort", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 500, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.ClosePort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_10ClosePort(__pyx_self, __pyx_v_portHandle);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_10ClosePort(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ClosePort", 1);

  /* "vxlapi.pyx":501
 * 
 * def ClosePort(XLportHandle portHandle):
 *     return xlClosePort(portHandle)             # <<<<<<<<<<<<<<
 * 
 * def SetTimerRate(XLportHandle portHandle, unsigned long timerRate):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlClosePort(__pyx_v_portHandle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":500
 *     return status
 * 
 * def ClosePort(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlClosePort(portHandle)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.ClosePort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":503
 *     return xlClosePort(portHandle)
 * 
 * def SetTimerRate(XLportHandle portHandle, unsigned long timerRate):             # <<<<<<<<<<<<<<
 *     return xlSetTimerRate(portHandle, timerRate)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_13SetTimerRate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_13SetTimerRate = {"SetTimerRate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_13SetTimerRate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_13SetTimerRate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  unsigned long __pyx_v_timerRate;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetTimerRate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_timerRate,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_timerRate)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetTimerRate", 1, 2, 2, 1); __PYX_ERR(0, 503, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetTimerRate") < 0)) __PYX_ERR(0, 503, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L3_error)
    __pyx_v_timerRate = __Pyx_PyInt_As_unsigned_long(values[1]); if (unlikely((__pyx_v_timerRate == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetTimerRate", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 503, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.SetTimerRate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_12SetTimerRate(__pyx_self, __pyx_v_portHandle, __pyx_v_timerRate);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_12SetTimerRate(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, unsigned long __pyx_v_timerRate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetTimerRate", 1);

  /* "vxlapi.pyx":504
 * 
 * def SetTimerRate(XLportHandle portHandle, unsigned long timerRate):
 *     return xlSetTimerRate(portHandle, timerRate)             # <<<<<<<<<<<<<<
 * 
 * def SetTimerRateAndChannel(XLportHandle portHandle, list ptimerChannelMask, list ptimerRate):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlSetTimerRate(__pyx_v_portHandle, __pyx_v_timerRate)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":503
 *     return xlClosePort(portHandle)
 * 
 * def SetTimerRate(XLportHandle portHandle, unsigned long timerRate):             # <<<<<<<<<<<<<<
 *     return xlSetTimerRate(portHandle, timerRate)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.SetTimerRate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":506
 *     return xlSetTimerRate(portHandle, timerRate)
 * 
 * def SetTimerRateAndChannel(XLportHandle portHandle, list ptimerChannelMask, list ptimerRate):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLaccess timerChannelMask = ptimerChannelMask[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_15SetTimerRateAndChannel(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_15SetTimerRateAndChannel = {"SetTimerRateAndChannel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_15SetTimerRateAndChannel, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_15SetTimerRateAndChannel(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  PyObject *__pyx_v_ptimerChannelMask = 0;
  PyObject *__pyx_v_ptimerRate = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetTimerRateAndChannel (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_ptimerChannelMask,&__pyx_n_s_ptimerRate,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 506, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ptimerChannelMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 506, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetTimerRateAndChannel", 1, 3, 3, 1); __PYX_ERR(0, 506, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ptimerRate)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 506, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetTimerRateAndChannel", 1, 3, 3, 2); __PYX_ERR(0, 506, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetTimerRateAndChannel") < 0)) __PYX_ERR(0, 506, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 506, __pyx_L3_error)
    __pyx_v_ptimerChannelMask = ((PyObject*)values[1]);
    __pyx_v_ptimerRate = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetTimerRateAndChannel", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 506, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.SetTimerRateAndChannel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ptimerChannelMask), (&PyList_Type), 1, "ptimerChannelMask", 1))) __PYX_ERR(0, 506, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ptimerRate), (&PyList_Type), 1, "ptimerRate", 1))) __PYX_ERR(0, 506, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_14SetTimerRateAndChannel(__pyx_self, __pyx_v_portHandle, __pyx_v_ptimerChannelMask, __pyx_v_ptimerRate);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_14SetTimerRateAndChannel(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, PyObject *__pyx_v_ptimerChannelMask, PyObject *__pyx_v_ptimerRate) {
  XLstatus __pyx_v_status;
  XLaccess __pyx_v_timerChannelMask;
  unsigned long __pyx_v_timerRate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  XLaccess __pyx_t_3;
  unsigned long __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetTimerRateAndChannel", 1);

  /* "vxlapi.pyx":507
 * 
 * def SetTimerRateAndChannel(XLportHandle portHandle, list ptimerChannelMask, list ptimerRate):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLaccess timerChannelMask = ptimerChannelMask[0]
 *     cdef unsigned long timerRate = ptimerRate[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":508
 * def SetTimerRateAndChannel(XLportHandle portHandle, list ptimerChannelMask, list ptimerRate):
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLaccess timerChannelMask = ptimerChannelMask[0]             # <<<<<<<<<<<<<<
 *     cdef unsigned long timerRate = ptimerRate[0]
 * 
 */
  if (unlikely(__pyx_v_ptimerChannelMask == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 508, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_ptimerChannelMask, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_XLuint64(__pyx_t_1); if (unlikely((__pyx_t_3 == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_timerChannelMask = __pyx_t_3;

  /* "vxlapi.pyx":509
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLaccess timerChannelMask = ptimerChannelMask[0]
 *     cdef unsigned long timerRate = ptimerRate[0]             # <<<<<<<<<<<<<<
 * 
 *     status = xlSetTimerRateAndChannel(portHandle, &timerChannelMask, &timerRate)
 */
  if (unlikely(__pyx_v_ptimerRate == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 509, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_ptimerRate, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_long(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_timerRate = __pyx_t_4;

  /* "vxlapi.pyx":511
 *     cdef unsigned long timerRate = ptimerRate[0]
 * 
 *     status = xlSetTimerRateAndChannel(portHandle, &timerChannelMask, &timerRate)             # <<<<<<<<<<<<<<
 * 
 *     return status
 */
  __pyx_v_status = xlSetTimerRateAndChannel(__pyx_v_portHandle, (&__pyx_v_timerChannelMask), (&__pyx_v_timerRate));

  /* "vxlapi.pyx":513
 *     status = xlSetTimerRateAndChannel(portHandle, &timerChannelMask, &timerRate)
 * 
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def CanSetChannelBitrate(XLportHandle portHandle, XLaccess accessMask, unsigned long bitrate):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":506
 *     return xlSetTimerRate(portHandle, timerRate)
 * 
 * def SetTimerRateAndChannel(XLportHandle portHandle, list ptimerChannelMask, list ptimerRate):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLaccess timerChannelMask = ptimerChannelMask[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.SetTimerRateAndChannel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":515
 *     return status
 * 
 * def CanSetChannelBitrate(XLportHandle portHandle, XLaccess accessMask, unsigned long bitrate):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelBitrate(portHandle, accessMask, bitrate)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_17CanSetChannelBitrate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_17CanSetChannelBitrate = {"CanSetChannelBitrate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_17CanSetChannelBitrate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_17CanSetChannelBitrate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned long __pyx_v_bitrate;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanSetChannelBitrate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_bitrate,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelBitrate", 1, 3, 3, 1); __PYX_ERR(0, 515, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bitrate)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelBitrate", 1, 3, 3, 2); __PYX_ERR(0, 515, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanSetChannelBitrate") < 0)) __PYX_ERR(0, 515, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L3_error)
    __pyx_v_bitrate = __Pyx_PyInt_As_unsigned_long(values[2]); if (unlikely((__pyx_v_bitrate == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanSetChannelBitrate", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 515, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanSetChannelBitrate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_16CanSetChannelBitrate(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_bitrate);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_16CanSetChannelBitrate(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned long __pyx_v_bitrate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanSetChannelBitrate", 1);

  /* "vxlapi.pyx":516
 * 
 * def CanSetChannelBitrate(XLportHandle portHandle, XLaccess accessMask, unsigned long bitrate):
 *     return xlCanSetChannelBitrate(portHandle, accessMask, bitrate)             # <<<<<<<<<<<<<<
 * 
 * def CanSetChannelParams(XLportHandle portHandle, XLaccess accessMask, dict pChipParams):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanSetChannelBitrate(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_bitrate)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":515
 *     return status
 * 
 * def CanSetChannelBitrate(XLportHandle portHandle, XLaccess accessMask, unsigned long bitrate):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelBitrate(portHandle, accessMask, bitrate)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanSetChannelBitrate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":518
 *     return xlCanSetChannelBitrate(portHandle, accessMask, bitrate)
 * 
 * def CanSetChannelParams(XLportHandle portHandle, XLaccess accessMask, dict pChipParams):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLchipParams chipParams = {0}
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_19CanSetChannelParams(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_19CanSetChannelParams = {"CanSetChannelParams", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_19CanSetChannelParams, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_19CanSetChannelParams(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  PyObject *__pyx_v_pChipParams = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanSetChannelParams (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_pChipParams,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelParams", 1, 3, 3, 1); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pChipParams)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelParams", 1, 3, 3, 2); __PYX_ERR(0, 518, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanSetChannelParams") < 0)) __PYX_ERR(0, 518, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_pChipParams = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanSetChannelParams", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 518, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanSetChannelParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pChipParams), (&PyDict_Type), 1, "pChipParams", 1))) __PYX_ERR(0, 518, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_18CanSetChannelParams(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_pChipParams);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_18CanSetChannelParams(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pChipParams) {
  XLstatus __pyx_v_status;
  XLchipParams __pyx_v_chipParams;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  XLchipParams __pyx_t_3;
  unsigned long __pyx_t_4;
  unsigned char __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanSetChannelParams", 1);

  /* "vxlapi.pyx":519
 * 
 * def CanSetChannelParams(XLportHandle portHandle, XLaccess accessMask, dict pChipParams):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLchipParams chipParams = {0}
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":520
 * def CanSetChannelParams(XLportHandle portHandle, XLaccess accessMask, dict pChipParams):
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLchipParams chipParams = {0}             # <<<<<<<<<<<<<<
 * 
 *     chipParams.bitRate  = pChipParams["bitRate"]
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PySet_Add(__pyx_t_1, __pyx_int_0) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert__from_py_XLchipParams(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_chipParams = __pyx_t_3;

  /* "vxlapi.pyx":522
 *     cdef XLchipParams chipParams = {0}
 * 
 *     chipParams.bitRate  = pChipParams["bitRate"]             # <<<<<<<<<<<<<<
 *     chipParams.sjw      = pChipParams["sjw"]
 *     chipParams.tseg1    = pChipParams["tseg1"]
 */
  if (unlikely(__pyx_v_pChipParams == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 522, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pChipParams, __pyx_n_s_bitRate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_long(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_chipParams.bitRate = __pyx_t_4;

  /* "vxlapi.pyx":523
 * 
 *     chipParams.bitRate  = pChipParams["bitRate"]
 *     chipParams.sjw      = pChipParams["sjw"]             # <<<<<<<<<<<<<<
 *     chipParams.tseg1    = pChipParams["tseg1"]
 *     chipParams.tseg2    = pChipParams["tseg2"]
 */
  if (unlikely(__pyx_v_pChipParams == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 523, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pChipParams, __pyx_n_s_sjw); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_5 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_chipParams.sjw = __pyx_t_5;

  /* "vxlapi.pyx":524
 *     chipParams.bitRate  = pChipParams["bitRate"]
 *     chipParams.sjw      = pChipParams["sjw"]
 *     chipParams.tseg1    = pChipParams["tseg1"]             # <<<<<<<<<<<<<<
 *     chipParams.tseg2    = pChipParams["tseg2"]
 *     chipParams.sam      = pChipParams["sam"]
 */
  if (unlikely(__pyx_v_pChipParams == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 524, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pChipParams, __pyx_n_s_tseg1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_5 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_chipParams.tseg1 = __pyx_t_5;

  /* "vxlapi.pyx":525
 *     chipParams.sjw      = pChipParams["sjw"]
 *     chipParams.tseg1    = pChipParams["tseg1"]
 *     chipParams.tseg2    = pChipParams["tseg2"]             # <<<<<<<<<<<<<<
 *     chipParams.sam      = pChipParams["sam"]
 * 
 */
  if (unlikely(__pyx_v_pChipParams == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 525, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pChipParams, __pyx_n_s_tseg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_5 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_chipParams.tseg2 = __pyx_t_5;

  /* "vxlapi.pyx":526
 *     chipParams.tseg1    = pChipParams["tseg1"]
 *     chipParams.tseg2    = pChipParams["tseg2"]
 *     chipParams.sam      = pChipParams["sam"]             # <<<<<<<<<<<<<<
 * 
 *     status = xlCanSetChannelParams(portHandle, accessMask, &chipParams)
 */
  if (unlikely(__pyx_v_pChipParams == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 526, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pChipParams, __pyx_n_s_sam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_5 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_chipParams.sam = __pyx_t_5;

  /* "vxlapi.pyx":528
 *     chipParams.sam      = pChipParams["sam"]
 * 
 *     status = xlCanSetChannelParams(portHandle, accessMask, &chipParams)             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_v_status = xlCanSetChannelParams(__pyx_v_portHandle, __pyx_v_accessMask, (&__pyx_v_chipParams));

  /* "vxlapi.pyx":529
 * 
 *     status = xlCanSetChannelParams(portHandle, accessMask, &chipParams)
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def ActivateChannel(XLportHandle portHandle, XLaccess accessMask, unsigned int busType, unsigned int flags):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":518
 *     return xlCanSetChannelBitrate(portHandle, accessMask, bitrate)
 * 
 * def CanSetChannelParams(XLportHandle portHandle, XLaccess accessMask, dict pChipParams):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLchipParams chipParams = {0}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanSetChannelParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":531
 *     return status
 * 
 * def ActivateChannel(XLportHandle portHandle, XLaccess accessMask, unsigned int busType, unsigned int flags):             # <<<<<<<<<<<<<<
 *     return xlActivateChannel(portHandle, accessMask, busType, flags)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_21ActivateChannel(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_21ActivateChannel = {"ActivateChannel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_21ActivateChannel, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_21ActivateChannel(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned int __pyx_v_busType;
  unsigned int __pyx_v_flags;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ActivateChannel (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_busType,&__pyx_n_s_flags,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("ActivateChannel", 1, 4, 4, 1); __PYX_ERR(0, 531, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_busType)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("ActivateChannel", 1, 4, 4, 2); __PYX_ERR(0, 531, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_flags)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("ActivateChannel", 1, 4, 4, 3); __PYX_ERR(0, 531, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "ActivateChannel") < 0)) __PYX_ERR(0, 531, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L3_error)
    __pyx_v_busType = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_busType == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L3_error)
    __pyx_v_flags = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_flags == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ActivateChannel", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 531, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.ActivateChannel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_20ActivateChannel(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_busType, __pyx_v_flags);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_20ActivateChannel(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_busType, unsigned int __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ActivateChannel", 1);

  /* "vxlapi.pyx":532
 * 
 * def ActivateChannel(XLportHandle portHandle, XLaccess accessMask, unsigned int busType, unsigned int flags):
 *     return xlActivateChannel(portHandle, accessMask, busType, flags)             # <<<<<<<<<<<<<<
 * 
 * def DeactivateChannel(XLportHandle portHandle, XLaccess accessMask):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlActivateChannel(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_busType, __pyx_v_flags)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":531
 *     return status
 * 
 * def ActivateChannel(XLportHandle portHandle, XLaccess accessMask, unsigned int busType, unsigned int flags):             # <<<<<<<<<<<<<<
 *     return xlActivateChannel(portHandle, accessMask, busType, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.ActivateChannel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":534
 *     return xlActivateChannel(portHandle, accessMask, busType, flags)
 * 
 * def DeactivateChannel(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlDeactivateChannel(portHandle, accessMask)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_23DeactivateChannel(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_23DeactivateChannel = {"DeactivateChannel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_23DeactivateChannel, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_23DeactivateChannel(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("DeactivateChannel (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("DeactivateChannel", 1, 2, 2, 1); __PYX_ERR(0, 534, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "DeactivateChannel") < 0)) __PYX_ERR(0, 534, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("DeactivateChannel", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 534, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.DeactivateChannel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_22DeactivateChannel(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_22DeactivateChannel(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("DeactivateChannel", 1);

  /* "vxlapi.pyx":535
 * 
 * def DeactivateChannel(XLportHandle portHandle, XLaccess accessMask):
 *     return xlDeactivateChannel(portHandle, accessMask)             # <<<<<<<<<<<<<<
 * 
 * def CanTransmit(XLportHandle portHandle, XLaccess accessMask, list messageCount, list pMessage):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlDeactivateChannel(__pyx_v_portHandle, __pyx_v_accessMask)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":534
 *     return xlActivateChannel(portHandle, accessMask, busType, flags)
 * 
 * def DeactivateChannel(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlDeactivateChannel(portHandle, accessMask)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.DeactivateChannel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":537
 *     return xlDeactivateChannel(portHandle, accessMask)
 * 
 * def CanTransmit(XLportHandle portHandle, XLaccess accessMask, list messageCount, list pMessage):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_25CanTransmit(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_25CanTransmit = {"CanTransmit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_25CanTransmit, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_25CanTransmit(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  PyObject *__pyx_v_messageCount = 0;
  PyObject *__pyx_v_pMessage = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanTransmit (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_messageCount,&__pyx_n_s_pMessage,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanTransmit", 1, 4, 4, 1); __PYX_ERR(0, 537, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_messageCount)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanTransmit", 1, 4, 4, 2); __PYX_ERR(0, 537, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pMessage)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanTransmit", 1, 4, 4, 3); __PYX_ERR(0, 537, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanTransmit") < 0)) __PYX_ERR(0, 537, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L3_error)
    __pyx_v_messageCount = ((PyObject*)values[2]);
    __pyx_v_pMessage = ((PyObject*)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanTransmit", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 537, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanTransmit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_messageCount), (&PyList_Type), 1, "messageCount", 1))) __PYX_ERR(0, 537, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pMessage), (&PyList_Type), 1, "pMessage", 1))) __PYX_ERR(0, 537, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_24CanTransmit(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_messageCount, __pyx_v_pMessage);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_24CanTransmit(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_messageCount, PyObject *__pyx_v_pMessage) {
  XLstatus __pyx_v_status;
  unsigned int __pyx_v_message_count;
  XLevent *__pyx_v_pxlEvent;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  unsigned short __pyx_t_7;
  unsigned long __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  unsigned char __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanTransmit", 1);

  /* "vxlapi.pyx":538
 * 
 * def CanTransmit(XLportHandle portHandle, XLaccess accessMask, list messageCount, list pMessage):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef unsigned int message_count = 0
 *     cdef XLevent *pxlEvent = NULL
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":539
 * def CanTransmit(XLportHandle portHandle, XLaccess accessMask, list messageCount, list pMessage):
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0             # <<<<<<<<<<<<<<
 *     cdef XLevent *pxlEvent = NULL
 * 
 */
  __pyx_v_message_count = 0;

  /* "vxlapi.pyx":540
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0
 *     cdef XLevent *pxlEvent = NULL             # <<<<<<<<<<<<<<
 * 
 *     message_count = <unsigned int>len(pMessage)
 */
  __pyx_v_pxlEvent = NULL;

  /* "vxlapi.pyx":542
 *     cdef XLevent *pxlEvent = NULL
 * 
 *     message_count = <unsigned int>len(pMessage)             # <<<<<<<<<<<<<<
 *     if message_count > 0:
 *         pxlEvent = <XLevent *> malloc(sizeof(XLevent) * message_count)
 */
  if (unlikely(__pyx_v_pMessage == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 542, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyList_GET_SIZE(__pyx_v_pMessage); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 542, __pyx_L1_error)
  __pyx_v_message_count = ((unsigned int)__pyx_t_3);

  /* "vxlapi.pyx":543
 * 
 *     message_count = <unsigned int>len(pMessage)
 *     if message_count > 0:             # <<<<<<<<<<<<<<
 *         pxlEvent = <XLevent *> malloc(sizeof(XLevent) * message_count)
 *         memset(pxlEvent, 0, sizeof(XLevent) * message_count)
 */
  __pyx_t_4 = (__pyx_v_message_count > 0);
  if (__pyx_t_4) {

    /* "vxlapi.pyx":544
 *     message_count = <unsigned int>len(pMessage)
 *     if message_count > 0:
 *         pxlEvent = <XLevent *> malloc(sizeof(XLevent) * message_count)             # <<<<<<<<<<<<<<
 *         memset(pxlEvent, 0, sizeof(XLevent) * message_count)
 *         for i, msg in enumerate(pMessage):
 */
    __pyx_v_pxlEvent = ((XLevent *)malloc(((sizeof(XLevent)) * __pyx_v_message_count)));

    /* "vxlapi.pyx":545
 *     if message_count > 0:
 *         pxlEvent = <XLevent *> malloc(sizeof(XLevent) * message_count)
 *         memset(pxlEvent, 0, sizeof(XLevent) * message_count)             # <<<<<<<<<<<<<<
 *         for i, msg in enumerate(pMessage):
 *             pxlEvent[i].tag                 = <unsigned char >XL_TRANSMIT_MSG
 */
    (void)(memset(__pyx_v_pxlEvent, 0, ((sizeof(XLevent)) * __pyx_v_message_count)));

    /* "vxlapi.pyx":546
 *         pxlEvent = <XLevent *> malloc(sizeof(XLevent) * message_count)
 *         memset(pxlEvent, 0, sizeof(XLevent) * message_count)
 *         for i, msg in enumerate(pMessage):             # <<<<<<<<<<<<<<
 *             pxlEvent[i].tag                 = <unsigned char >XL_TRANSMIT_MSG
 *             pxlEvent[i].tagData.msg.flags   = <unsigned short>msg["flags"]
 */
    __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_v_pMessage; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = 0;
    for (;;) {
      {
        Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 546, __pyx_L1_error)
        #endif
        if (__pyx_t_5 >= __pyx_temp) break;
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 546, __pyx_L1_error)
      #else
      __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_msg, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_v_i = __pyx_t_3;
      __pyx_t_3 = (__pyx_t_3 + 1);

      /* "vxlapi.pyx":547
 *         memset(pxlEvent, 0, sizeof(XLevent) * message_count)
 *         for i, msg in enumerate(pMessage):
 *             pxlEvent[i].tag                 = <unsigned char >XL_TRANSMIT_MSG             # <<<<<<<<<<<<<<
 *             pxlEvent[i].tagData.msg.flags   = <unsigned short>msg["flags"]
 *             pxlEvent[i].tagData.msg.id      = <unsigned long >msg["id"]
 */
      (__pyx_v_pxlEvent[__pyx_v_i]).tag = ((unsigned char)__pyx_e_6vxlapi_XL_TRANSMIT_MSG);

      /* "vxlapi.pyx":548
 *         for i, msg in enumerate(pMessage):
 *             pxlEvent[i].tag                 = <unsigned char >XL_TRANSMIT_MSG
 *             pxlEvent[i].tagData.msg.flags   = <unsigned short>msg["flags"]             # <<<<<<<<<<<<<<
 *             pxlEvent[i].tagData.msg.id      = <unsigned long >msg["id"]
 *             pxlEvent[i].tagData.msg.dlc     = <unsigned short>msg["dlc"]
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_msg, __pyx_n_s_flags); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_short(__pyx_t_6); if (unlikely((__pyx_t_7 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_pxlEvent[__pyx_v_i]).tagData.msg.flags = ((unsigned short)__pyx_t_7);

      /* "vxlapi.pyx":549
 *             pxlEvent[i].tag                 = <unsigned char >XL_TRANSMIT_MSG
 *             pxlEvent[i].tagData.msg.flags   = <unsigned short>msg["flags"]
 *             pxlEvent[i].tagData.msg.id      = <unsigned long >msg["id"]             # <<<<<<<<<<<<<<
 *             pxlEvent[i].tagData.msg.dlc     = <unsigned short>msg["dlc"]
 *             for j, b in enumerate(msg["data"]):
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_msg, __pyx_n_s_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyInt_As_unsigned_long(__pyx_t_6); if (unlikely((__pyx_t_8 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_pxlEvent[__pyx_v_i]).tagData.msg.id = ((unsigned long)__pyx_t_8);

      /* "vxlapi.pyx":550
 *             pxlEvent[i].tagData.msg.flags   = <unsigned short>msg["flags"]
 *             pxlEvent[i].tagData.msg.id      = <unsigned long >msg["id"]
 *             pxlEvent[i].tagData.msg.dlc     = <unsigned short>msg["dlc"]             # <<<<<<<<<<<<<<
 *             for j, b in enumerate(msg["data"]):
 *                 pxlEvent[i].tagData.msg.data[j] = b
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_msg, __pyx_n_s_dlc); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_short(__pyx_t_6); if (unlikely((__pyx_t_7 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_pxlEvent[__pyx_v_i]).tagData.msg.dlc = ((unsigned short)__pyx_t_7);

      /* "vxlapi.pyx":551
 *             pxlEvent[i].tagData.msg.id      = <unsigned long >msg["id"]
 *             pxlEvent[i].tagData.msg.dlc     = <unsigned short>msg["dlc"]
 *             for j, b in enumerate(msg["data"]):             # <<<<<<<<<<<<<<
 *                 pxlEvent[i].tagData.msg.data[j] = b
 *         status = xlCanTransmit(portHandle, accessMask, &message_count, pxlEvent)
 */
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_6 = __pyx_int_0;
      __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_v_msg, __pyx_n_s_data); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
        __pyx_t_10 = __pyx_t_9; __Pyx_INCREF(__pyx_t_10);
        __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
      } else {
        __pyx_t_11 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 551, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 551, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      for (;;) {
        if (likely(!__pyx_t_12)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_10);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 551, __pyx_L1_error)
              #endif
              if (__pyx_t_11 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely((0 < 0))) __PYX_ERR(0, 551, __pyx_L1_error)
            #else
            __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 551, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_10);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 551, __pyx_L1_error)
              #endif
              if (__pyx_t_11 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely((0 < 0))) __PYX_ERR(0, 551, __pyx_L1_error)
            #else
            __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 551, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          }
        } else {
          __pyx_t_9 = __pyx_t_12(__pyx_t_10);
          if (unlikely(!__pyx_t_9)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 551, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_9);
        }
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
        __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 551, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_6);
        __pyx_t_6 = __pyx_t_9;
        __pyx_t_9 = 0;

        /* "vxlapi.pyx":552
 *             pxlEvent[i].tagData.msg.dlc     = <unsigned short>msg["dlc"]
 *             for j, b in enumerate(msg["data"]):
 *                 pxlEvent[i].tagData.msg.data[j] = b             # <<<<<<<<<<<<<<
 *         status = xlCanTransmit(portHandle, accessMask, &message_count, pxlEvent)
 *         free(pxlEvent)
 */
        __pyx_t_13 = __Pyx_PyInt_As_unsigned_char(__pyx_v_b); if (unlikely((__pyx_t_13 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 552, __pyx_L1_error)
        __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 552, __pyx_L1_error)
        ((__pyx_v_pxlEvent[__pyx_v_i]).tagData.msg.data[__pyx_t_14]) = __pyx_t_13;

        /* "vxlapi.pyx":551
 *             pxlEvent[i].tagData.msg.id      = <unsigned long >msg["id"]
 *             pxlEvent[i].tagData.msg.dlc     = <unsigned short>msg["dlc"]
 *             for j, b in enumerate(msg["data"]):             # <<<<<<<<<<<<<<
 *                 pxlEvent[i].tagData.msg.data[j] = b
 *         status = xlCanTransmit(portHandle, accessMask, &message_count, pxlEvent)
 */
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "vxlapi.pyx":546
 *         pxlEvent = <XLevent *> malloc(sizeof(XLevent) * message_count)
 *         memset(pxlEvent, 0, sizeof(XLevent) * message_count)
 *         for i, msg in enumerate(pMessage):             # <<<<<<<<<<<<<<
 *             pxlEvent[i].tag                 = <unsigned char >XL_TRANSMIT_MSG
 *             pxlEvent[i].tagData.msg.flags   = <unsigned short>msg["flags"]
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":553
 *             for j, b in enumerate(msg["data"]):
 *                 pxlEvent[i].tagData.msg.data[j] = b
 *         status = xlCanTransmit(portHandle, accessMask, &message_count, pxlEvent)             # <<<<<<<<<<<<<<
 *         free(pxlEvent)
 *     messageCount[0] = message_count
 */
    __pyx_v_status = xlCanTransmit(__pyx_v_portHandle, __pyx_v_accessMask, (&__pyx_v_message_count), __pyx_v_pxlEvent);

    /* "vxlapi.pyx":554
 *                 pxlEvent[i].tagData.msg.data[j] = b
 *         status = xlCanTransmit(portHandle, accessMask, &message_count, pxlEvent)
 *         free(pxlEvent)             # <<<<<<<<<<<<<<
 *     messageCount[0] = message_count
 *     return status
 */
    free(__pyx_v_pxlEvent);

    /* "vxlapi.pyx":543
 * 
 *     message_count = <unsigned int>len(pMessage)
 *     if message_count > 0:             # <<<<<<<<<<<<<<
 *         pxlEvent = <XLevent *> malloc(sizeof(XLevent) * message_count)
 *         memset(pxlEvent, 0, sizeof(XLevent) * message_count)
 */
  }

  /* "vxlapi.pyx":555
 *         status = xlCanTransmit(portHandle, accessMask, &message_count, pxlEvent)
 *         free(pxlEvent)
 *     messageCount[0] = message_count             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_message_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_messageCount == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 555, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_messageCount, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":556
 *         free(pxlEvent)
 *     messageCount[0] = message_count
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def CanFlushTransmitQueue(XLportHandle portHandle, XLaccess accessMask):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":537
 *     return xlDeactivateChannel(portHandle, accessMask)
 * 
 * def CanTransmit(XLportHandle portHandle, XLaccess accessMask, list messageCount, list pMessage):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("vxlapi.CanTransmit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":558
 *     return status
 * 
 * def CanFlushTransmitQueue(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlCanFlushTransmitQueue(portHandle, accessMask)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_27CanFlushTransmitQueue(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_27CanFlushTransmitQueue = {"CanFlushTransmitQueue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_27CanFlushTransmitQueue, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_27CanFlushTransmitQueue(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanFlushTransmitQueue (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 558, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 558, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanFlushTransmitQueue", 1, 2, 2, 1); __PYX_ERR(0, 558, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanFlushTransmitQueue") < 0)) __PYX_ERR(0, 558, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 558, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 558, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanFlushTransmitQueue", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 558, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanFlushTransmitQueue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_26CanFlushTransmitQueue(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_26CanFlushTransmitQueue(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanFlushTransmitQueue", 1);

  /* "vxlapi.pyx":559
 * 
 * def CanFlushTransmitQueue(XLportHandle portHandle, XLaccess accessMask):
 *     return xlCanFlushTransmitQueue(portHandle, accessMask)             # <<<<<<<<<<<<<<
 * 
 * def CanRequestChipState(XLportHandle portHandle, XLaccess accessMask):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanFlushTransmitQueue(__pyx_v_portHandle, __pyx_v_accessMask)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":558
 *     return status
 * 
 * def CanFlushTransmitQueue(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlCanFlushTransmitQueue(portHandle, accessMask)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanFlushTransmitQueue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":561
 *     return xlCanFlushTransmitQueue(portHandle, accessMask)
 * 
 * def CanRequestChipState(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlCanRequestChipState(portHandle,accessMask)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_29CanRequestChipState(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_29CanRequestChipState = {"CanRequestChipState", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_29CanRequestChipState, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_29CanRequestChipState(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanRequestChipState (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 561, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 561, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanRequestChipState", 1, 2, 2, 1); __PYX_ERR(0, 561, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanRequestChipState") < 0)) __PYX_ERR(0, 561, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 561, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 561, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanRequestChipState", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 561, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanRequestChipState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_28CanRequestChipState(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_28CanRequestChipState(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanRequestChipState", 1);

  /* "vxlapi.pyx":562
 * 
 * def CanRequestChipState(XLportHandle portHandle, XLaccess accessMask):
 *     return xlCanRequestChipState(portHandle,accessMask)             # <<<<<<<<<<<<<<
 * 
 * def Receive(XLportHandle portHandle, list pEventCount, list pEventList, list pEventString):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanRequestChipState(__pyx_v_portHandle, __pyx_v_accessMask)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":561
 *     return xlCanFlushTransmitQueue(portHandle, accessMask)
 * 
 * def CanRequestChipState(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlCanRequestChipState(portHandle,accessMask)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanRequestChipState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":564
 *     return xlCanRequestChipState(portHandle,accessMask)
 * 
 * def Receive(XLportHandle portHandle, list pEventCount, list pEventList, list pEventString):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int eventCount = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_31Receive(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_31Receive = {"Receive", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_31Receive, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_31Receive(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  PyObject *__pyx_v_pEventCount = 0;
  PyObject *__pyx_v_pEventList = 0;
  PyObject *__pyx_v_pEventString = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Receive (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_pEventCount,&__pyx_n_s_pEventList,&__pyx_n_s_pEventString,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pEventCount)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Receive", 1, 4, 4, 1); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pEventList)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Receive", 1, 4, 4, 2); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pEventString)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Receive", 1, 4, 4, 3); __PYX_ERR(0, 564, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Receive") < 0)) __PYX_ERR(0, 564, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_pEventCount = ((PyObject*)values[1]);
    __pyx_v_pEventList = ((PyObject*)values[2]);
    __pyx_v_pEventString = ((PyObject*)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Receive", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 564, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.Receive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pEventCount), (&PyList_Type), 1, "pEventCount", 1))) __PYX_ERR(0, 564, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pEventList), (&PyList_Type), 1, "pEventList", 1))) __PYX_ERR(0, 564, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pEventString), (&PyList_Type), 1, "pEventString", 1))) __PYX_ERR(0, 564, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_30Receive(__pyx_self, __pyx_v_portHandle, __pyx_v_pEventCount, __pyx_v_pEventList, __pyx_v_pEventString);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_30Receive(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, PyObject *__pyx_v_pEventCount, PyObject *__pyx_v_pEventList, PyObject *__pyx_v_pEventString) {
  XLstatus __pyx_v_status;
  unsigned int __pyx_v_eventCount;
  XLevent __pyx_v_xlEvent;
  PyObject *__pyx_v_retEvent = NULL;
  PyObject *__pyx_v_tagData = NULL;
  PyObject *__pyx_v_msg = NULL;
  long __pyx_7genexpr__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Receive", 1);

  /* "vxlapi.pyx":565
 * 
 * def Receive(XLportHandle portHandle, list pEventCount, list pEventList, list pEventString):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef unsigned int eventCount = 1
 *     cdef XLevent xlEvent
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":566
 * def Receive(XLportHandle portHandle, list pEventCount, list pEventList, list pEventString):
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int eventCount = 1             # <<<<<<<<<<<<<<
 *     cdef XLevent xlEvent
 *     cdef XLstringType xlstring
 */
  __pyx_v_eventCount = 1;

  /* "vxlapi.pyx":569
 *     cdef XLevent xlEvent
 *     cdef XLstringType xlstring
 *     memset(&xlEvent, 0, sizeof(xlEvent))             # <<<<<<<<<<<<<<
 *     retEvent = {}
 * 
 */
  (void)(memset((&__pyx_v_xlEvent), 0, (sizeof(__pyx_v_xlEvent))));

  /* "vxlapi.pyx":570
 *     cdef XLstringType xlstring
 *     memset(&xlEvent, 0, sizeof(xlEvent))
 *     retEvent = {}             # <<<<<<<<<<<<<<
 * 
 *     status = xlReceive(portHandle, &eventCount, &xlEvent)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_retEvent = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":572
 *     retEvent = {}
 * 
 *     status = xlReceive(portHandle, &eventCount, &xlEvent)             # <<<<<<<<<<<<<<
 *     pEventString[0] = xlGetEventString(&xlEvent)
 * 
 */
  __pyx_v_status = xlReceive(__pyx_v_portHandle, (&__pyx_v_eventCount), (&__pyx_v_xlEvent));

  /* "vxlapi.pyx":573
 * 
 *     status = xlReceive(portHandle, &eventCount, &xlEvent)
 *     pEventString[0] = xlGetEventString(&xlEvent)             # <<<<<<<<<<<<<<
 * 
 *     retEvent["tag"]         = xlEvent.tag
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(xlGetEventString((&__pyx_v_xlEvent))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pEventString == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 573, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pEventString, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":575
 *     pEventString[0] = xlGetEventString(&xlEvent)
 * 
 *     retEvent["tag"]         = xlEvent.tag             # <<<<<<<<<<<<<<
 *     retEvent["chanIndex"]   = xlEvent.chanIndex
 *     retEvent["transId"]     = xlEvent.transId
 */
  __pyx_t_1 = __Pyx_PyInt_From_XLeventTag(__pyx_v_xlEvent.tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_retEvent, __pyx_n_s_tag, __pyx_t_1) < 0))) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":576
 * 
 *     retEvent["tag"]         = xlEvent.tag
 *     retEvent["chanIndex"]   = xlEvent.chanIndex             # <<<<<<<<<<<<<<
 *     retEvent["transId"]     = xlEvent.transId
 *     retEvent["portHandle"]  = xlEvent.portHandle
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_char(__pyx_v_xlEvent.chanIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_retEvent, __pyx_n_s_chanIndex, __pyx_t_1) < 0))) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":577
 *     retEvent["tag"]         = xlEvent.tag
 *     retEvent["chanIndex"]   = xlEvent.chanIndex
 *     retEvent["transId"]     = xlEvent.transId             # <<<<<<<<<<<<<<
 *     retEvent["portHandle"]  = xlEvent.portHandle
 *     retEvent["flags"]       = xlEvent.flags
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_short(__pyx_v_xlEvent.transId); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_retEvent, __pyx_n_s_transId, __pyx_t_1) < 0))) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":578
 *     retEvent["chanIndex"]   = xlEvent.chanIndex
 *     retEvent["transId"]     = xlEvent.transId
 *     retEvent["portHandle"]  = xlEvent.portHandle             # <<<<<<<<<<<<<<
 *     retEvent["flags"]       = xlEvent.flags
 *     retEvent["reserved"]    = xlEvent.reserved
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_short(__pyx_v_xlEvent.portHandle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_retEvent, __pyx_n_s_portHandle, __pyx_t_1) < 0))) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":579
 *     retEvent["transId"]     = xlEvent.transId
 *     retEvent["portHandle"]  = xlEvent.portHandle
 *     retEvent["flags"]       = xlEvent.flags             # <<<<<<<<<<<<<<
 *     retEvent["reserved"]    = xlEvent.reserved
 *     retEvent["timeStamp"]   = xlEvent.timeStamp # Actual time stamp generated by the hardware with 8 s resolution. Value is in nanoseconds.
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_char(__pyx_v_xlEvent.flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_retEvent, __pyx_n_s_flags, __pyx_t_1) < 0))) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":580
 *     retEvent["portHandle"]  = xlEvent.portHandle
 *     retEvent["flags"]       = xlEvent.flags
 *     retEvent["reserved"]    = xlEvent.reserved             # <<<<<<<<<<<<<<
 *     retEvent["timeStamp"]   = xlEvent.timeStamp # Actual time stamp generated by the hardware with 8 s resolution. Value is in nanoseconds.
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_char(__pyx_v_xlEvent.reserved); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_retEvent, __pyx_n_s_reserved, __pyx_t_1) < 0))) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":581
 *     retEvent["flags"]       = xlEvent.flags
 *     retEvent["reserved"]    = xlEvent.reserved
 *     retEvent["timeStamp"]   = xlEvent.timeStamp # Actual time stamp generated by the hardware with 8 s resolution. Value is in nanoseconds.             # <<<<<<<<<<<<<<
 * 
 *     tagData = {}
 */
  __pyx_t_1 = __Pyx_PyInt_From_XLuint64(__pyx_v_xlEvent.timeStamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_retEvent, __pyx_n_s_timeStamp, __pyx_t_1) < 0))) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":583
 *     retEvent["timeStamp"]   = xlEvent.timeStamp # Actual time stamp generated by the hardware with 8 s resolution. Value is in nanoseconds.
 * 
 *     tagData = {}             # <<<<<<<<<<<<<<
 *     if xlEvent.tag == XL_RECEIVE_MSG:
 *         msg = {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tagData = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":584
 * 
 *     tagData = {}
 *     if xlEvent.tag == XL_RECEIVE_MSG:             # <<<<<<<<<<<<<<
 *         msg = {}
 *         msg["id"]    = xlEvent.tagData.msg.id
 */
  __pyx_t_3 = (__pyx_v_xlEvent.tag == __pyx_e_6vxlapi_XL_RECEIVE_MSG);
  if (__pyx_t_3) {

    /* "vxlapi.pyx":585
 *     tagData = {}
 *     if xlEvent.tag == XL_RECEIVE_MSG:
 *         msg = {}             # <<<<<<<<<<<<<<
 *         msg["id"]    = xlEvent.tagData.msg.id
 *         msg["flags"] = xlEvent.tagData.msg.flags
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_msg = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "vxlapi.pyx":586
 *     if xlEvent.tag == XL_RECEIVE_MSG:
 *         msg = {}
 *         msg["id"]    = xlEvent.tagData.msg.id             # <<<<<<<<<<<<<<
 *         msg["flags"] = xlEvent.tagData.msg.flags
 *         msg["dlc"]   = xlEvent.tagData.msg.dlc
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_xlEvent.tagData.msg.id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_msg, __pyx_n_s_id, __pyx_t_1) < 0))) __PYX_ERR(0, 586, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":587
 *         msg = {}
 *         msg["id"]    = xlEvent.tagData.msg.id
 *         msg["flags"] = xlEvent.tagData.msg.flags             # <<<<<<<<<<<<<<
 *         msg["dlc"]   = xlEvent.tagData.msg.dlc
 *         msg["data"]   = [xlEvent.tagData.msg.data[i] for i in range(8)]
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_short(__pyx_v_xlEvent.tagData.msg.flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_msg, __pyx_n_s_flags, __pyx_t_1) < 0))) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":588
 *         msg["id"]    = xlEvent.tagData.msg.id
 *         msg["flags"] = xlEvent.tagData.msg.flags
 *         msg["dlc"]   = xlEvent.tagData.msg.dlc             # <<<<<<<<<<<<<<
 *         msg["data"]   = [xlEvent.tagData.msg.data[i] for i in range(8)]
 *         tagData["msg"] = msg
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_short(__pyx_v_xlEvent.tagData.msg.dlc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_msg, __pyx_n_s_dlc, __pyx_t_1) < 0))) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":589
 *         msg["flags"] = xlEvent.tagData.msg.flags
 *         msg["dlc"]   = xlEvent.tagData.msg.dlc
 *         msg["data"]   = [xlEvent.tagData.msg.data[i] for i in range(8)]             # <<<<<<<<<<<<<<
 *         tagData["msg"] = msg
 *     else:
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      for (__pyx_t_4 = 0; __pyx_t_4 < 8; __pyx_t_4+=1) {
        __pyx_7genexpr__pyx_v_i = __pyx_t_4;
        __pyx_t_5 = __Pyx_PyInt_From_unsigned_char((__pyx_v_xlEvent.tagData.msg.data[__pyx_7genexpr__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 589, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 589, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    } /* exit inner scope */
    if (unlikely((PyDict_SetItem(__pyx_v_msg, __pyx_n_s_data, __pyx_t_1) < 0))) __PYX_ERR(0, 589, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":590
 *         msg["dlc"]   = xlEvent.tagData.msg.dlc
 *         msg["data"]   = [xlEvent.tagData.msg.data[i] for i in range(8)]
 *         tagData["msg"] = msg             # <<<<<<<<<<<<<<
 *     else:
 *         # The following events are not supported now.
 */
    if (unlikely((PyDict_SetItem(__pyx_v_tagData, __pyx_n_s_msg, __pyx_v_msg) < 0))) __PYX_ERR(0, 590, __pyx_L1_error)

    /* "vxlapi.pyx":584
 * 
 *     tagData = {}
 *     if xlEvent.tag == XL_RECEIVE_MSG:             # <<<<<<<<<<<<<<
 *         msg = {}
 *         msg["id"]    = xlEvent.tagData.msg.id
 */
    goto __pyx_L3;
  }

  /* "vxlapi.pyx":596
 *         # Special LIN events    : XL_LIN_MSG, XL_LIN_ERRMSG,XL_LIN_SYNCERR, XL_LIN_NOANS, XL_LIN_WAKEUP, XL_LIN_SLEEP, XL_LIN_CRCINFO
 *         # Special DAIO events   : XL_RECEIVE_DAIO_DATA
 *         pass             # <<<<<<<<<<<<<<
 *     retEvent["tagData"] = tagData
 *     pEventCount[0] = eventCount
 */
  /*else*/ {
  }
  __pyx_L3:;

  /* "vxlapi.pyx":597
 *         # Special DAIO events   : XL_RECEIVE_DAIO_DATA
 *         pass
 *     retEvent["tagData"] = tagData             # <<<<<<<<<<<<<<
 *     pEventCount[0] = eventCount
 *     pEventList[0] = retEvent
 */
  if (unlikely((PyDict_SetItem(__pyx_v_retEvent, __pyx_n_s_tagData, __pyx_v_tagData) < 0))) __PYX_ERR(0, 597, __pyx_L1_error)

  /* "vxlapi.pyx":598
 *         pass
 *     retEvent["tagData"] = tagData
 *     pEventCount[0] = eventCount             # <<<<<<<<<<<<<<
 *     pEventList[0] = retEvent
 *     return status
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_eventCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pEventCount == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 598, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pEventCount, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":599
 *     retEvent["tagData"] = tagData
 *     pEventCount[0] = eventCount
 *     pEventList[0] = retEvent             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  if (unlikely(__pyx_v_pEventList == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 599, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pEventList, 0, __pyx_v_retEvent, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "vxlapi.pyx":600
 *     pEventCount[0] = eventCount
 *     pEventList[0] = retEvent
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def FlushReceiveQueue(XLportHandle portHandle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":564
 *     return xlCanRequestChipState(portHandle,accessMask)
 * 
 * def Receive(XLportHandle portHandle, list pEventCount, list pEventList, list pEventString):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int eventCount = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vxlapi.Receive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retEvent);
  __Pyx_XDECREF(__pyx_v_tagData);
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":602
 *     return status
 * 
 * def FlushReceiveQueue(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlFlushReceiveQueue(portHandle)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_33FlushReceiveQueue(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_33FlushReceiveQueue = {"FlushReceiveQueue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_33FlushReceiveQueue, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_33FlushReceiveQueue(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FlushReceiveQueue (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 602, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FlushReceiveQueue") < 0)) __PYX_ERR(0, 602, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 602, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FlushReceiveQueue", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 602, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FlushReceiveQueue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_32FlushReceiveQueue(__pyx_self, __pyx_v_portHandle);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_32FlushReceiveQueue(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FlushReceiveQueue", 1);

  /* "vxlapi.pyx":603
 * 
 * def FlushReceiveQueue(XLportHandle portHandle):
 *     return xlFlushReceiveQueue(portHandle)             # <<<<<<<<<<<<<<
 * 
 * def GetReceiveQueueLevel(XLportHandle portHandle, list plevel):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlFlushReceiveQueue(__pyx_v_portHandle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":602
 *     return status
 * 
 * def FlushReceiveQueue(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlFlushReceiveQueue(portHandle)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.FlushReceiveQueue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":605
 *     return xlFlushReceiveQueue(portHandle)
 * 
 * def GetReceiveQueueLevel(XLportHandle portHandle, list plevel):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef int level = plevel[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_35GetReceiveQueueLevel(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_35GetReceiveQueueLevel = {"GetReceiveQueueLevel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_35GetReceiveQueueLevel, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_35GetReceiveQueueLevel(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  PyObject *__pyx_v_plevel = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetReceiveQueueLevel (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_plevel,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 605, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_plevel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 605, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetReceiveQueueLevel", 1, 2, 2, 1); __PYX_ERR(0, 605, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetReceiveQueueLevel") < 0)) __PYX_ERR(0, 605, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 605, __pyx_L3_error)
    __pyx_v_plevel = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetReceiveQueueLevel", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 605, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetReceiveQueueLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_plevel), (&PyList_Type), 1, "plevel", 1))) __PYX_ERR(0, 605, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_34GetReceiveQueueLevel(__pyx_self, __pyx_v_portHandle, __pyx_v_plevel);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_34GetReceiveQueueLevel(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, PyObject *__pyx_v_plevel) {
  XLstatus __pyx_v_status;
  int __pyx_v_level;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetReceiveQueueLevel", 1);

  /* "vxlapi.pyx":607
 * def GetReceiveQueueLevel(XLportHandle portHandle, list plevel):
 *     cdef XLstatus status
 *     cdef int level = plevel[0]             # <<<<<<<<<<<<<<
 *     status = xlGetReceiveQueueLevel(portHandle, &level)
 *     plevel[0] = level
 */
  if (unlikely(__pyx_v_plevel == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 607, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_plevel, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_level = __pyx_t_2;

  /* "vxlapi.pyx":608
 *     cdef XLstatus status
 *     cdef int level = plevel[0]
 *     status = xlGetReceiveQueueLevel(portHandle, &level)             # <<<<<<<<<<<<<<
 *     plevel[0] = level
 *     return status
 */
  __pyx_v_status = xlGetReceiveQueueLevel(__pyx_v_portHandle, (&__pyx_v_level));

  /* "vxlapi.pyx":609
 *     cdef int level = plevel[0]
 *     status = xlGetReceiveQueueLevel(portHandle, &level)
 *     plevel[0] = level             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_level); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_plevel == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 609, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_plevel, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":610
 *     status = xlGetReceiveQueueLevel(portHandle, &level)
 *     plevel[0] = level
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def SetNotification(XLportHandle portHandle, list pXlHandle, int queueLevel):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":605
 *     return xlFlushReceiveQueue(portHandle)
 * 
 * def GetReceiveQueueLevel(XLportHandle portHandle, list plevel):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef int level = plevel[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.GetReceiveQueueLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":612
 *     return status
 * 
 * def SetNotification(XLportHandle portHandle, list pXlHandle, int queueLevel):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLhandle xlHandle = NULL
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_37SetNotification(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_37SetNotification = {"SetNotification", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_37SetNotification, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_37SetNotification(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  PyObject *__pyx_v_pXlHandle = 0;
  int __pyx_v_queueLevel;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetNotification (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_pXlHandle,&__pyx_n_s_queueLevel,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pXlHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetNotification", 1, 3, 3, 1); __PYX_ERR(0, 612, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_queueLevel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetNotification", 1, 3, 3, 2); __PYX_ERR(0, 612, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetNotification") < 0)) __PYX_ERR(0, 612, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L3_error)
    __pyx_v_pXlHandle = ((PyObject*)values[1]);
    __pyx_v_queueLevel = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_queueLevel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetNotification", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 612, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.SetNotification", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pXlHandle), (&PyList_Type), 1, "pXlHandle", 1))) __PYX_ERR(0, 612, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_36SetNotification(__pyx_self, __pyx_v_portHandle, __pyx_v_pXlHandle, __pyx_v_queueLevel);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_36SetNotification(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, PyObject *__pyx_v_pXlHandle, int __pyx_v_queueLevel) {
  XLstatus __pyx_v_status;
  XLhandle __pyx_v_xlHandle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetNotification", 1);

  /* "vxlapi.pyx":613
 * 
 * def SetNotification(XLportHandle portHandle, list pXlHandle, int queueLevel):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLhandle xlHandle = NULL
 *     status = xlSetNotification(portHandle, &xlHandle, queueLevel)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":614
 * def SetNotification(XLportHandle portHandle, list pXlHandle, int queueLevel):
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLhandle xlHandle = NULL             # <<<<<<<<<<<<<<
 *     status = xlSetNotification(portHandle, &xlHandle, queueLevel)
 *     pXlHandle[0] = <size_t>xlHandle
 */
  __pyx_v_xlHandle = NULL;

  /* "vxlapi.pyx":615
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLhandle xlHandle = NULL
 *     status = xlSetNotification(portHandle, &xlHandle, queueLevel)             # <<<<<<<<<<<<<<
 *     pXlHandle[0] = <size_t>xlHandle
 *     return status
 */
  __pyx_v_status = xlSetNotification(__pyx_v_portHandle, (&__pyx_v_xlHandle), __pyx_v_queueLevel);

  /* "vxlapi.pyx":616
 *     cdef XLhandle xlHandle = NULL
 *     status = xlSetNotification(portHandle, &xlHandle, queueLevel)
 *     pXlHandle[0] = <size_t>xlHandle             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((size_t)__pyx_v_xlHandle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pXlHandle == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 616, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pXlHandle, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":617
 *     status = xlSetNotification(portHandle, &xlHandle, queueLevel)
 *     pXlHandle[0] = <size_t>xlHandle
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def ResetClock(XLportHandle portHandle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":612
 *     return status
 * 
 * def SetNotification(XLportHandle portHandle, list pXlHandle, int queueLevel):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLhandle xlHandle = NULL
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.SetNotification", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":619
 *     return status
 * 
 * def ResetClock(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlResetClock(portHandle)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_39ResetClock(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_39ResetClock = {"ResetClock", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_39ResetClock, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_39ResetClock(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ResetClock (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "ResetClock") < 0)) __PYX_ERR(0, 619, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ResetClock", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 619, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.ResetClock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_38ResetClock(__pyx_self, __pyx_v_portHandle);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_38ResetClock(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ResetClock", 1);

  /* "vxlapi.pyx":620
 * 
 * def ResetClock(XLportHandle portHandle):
 *     return xlResetClock(portHandle)             # <<<<<<<<<<<<<<
 * 
 * def CanSetChannelMode(XLportHandle portHandle, XLaccess accessMask, int tx, int txrq):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlResetClock(__pyx_v_portHandle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":619
 *     return status
 * 
 * def ResetClock(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlResetClock(portHandle)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.ResetClock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":622
 *     return xlResetClock(portHandle)
 * 
 * def CanSetChannelMode(XLportHandle portHandle, XLaccess accessMask, int tx, int txrq):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelMode(portHandle, accessMask, tx, txrq)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_41CanSetChannelMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_41CanSetChannelMode = {"CanSetChannelMode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_41CanSetChannelMode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_41CanSetChannelMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  int __pyx_v_tx;
  int __pyx_v_txrq;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanSetChannelMode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_tx,&__pyx_n_s_txrq,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelMode", 1, 4, 4, 1); __PYX_ERR(0, 622, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tx)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelMode", 1, 4, 4, 2); __PYX_ERR(0, 622, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_txrq)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelMode", 1, 4, 4, 3); __PYX_ERR(0, 622, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanSetChannelMode") < 0)) __PYX_ERR(0, 622, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L3_error)
    __pyx_v_tx = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_tx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L3_error)
    __pyx_v_txrq = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_txrq == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanSetChannelMode", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 622, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanSetChannelMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_40CanSetChannelMode(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_tx, __pyx_v_txrq);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_40CanSetChannelMode(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, int __pyx_v_tx, int __pyx_v_txrq) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanSetChannelMode", 1);

  /* "vxlapi.pyx":623
 * 
 * def CanSetChannelMode(XLportHandle portHandle, XLaccess accessMask, int tx, int txrq):
 *     return xlCanSetChannelMode(portHandle, accessMask, tx, txrq)             # <<<<<<<<<<<<<<
 * 
 * def CanSetChannelOutput(XLportHandle portHandle, XLaccess accessMask, unsigned char mode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanSetChannelMode(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_tx, __pyx_v_txrq)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":622
 *     return xlResetClock(portHandle)
 * 
 * def CanSetChannelMode(XLportHandle portHandle, XLaccess accessMask, int tx, int txrq):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelMode(portHandle, accessMask, tx, txrq)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanSetChannelMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":625
 *     return xlCanSetChannelMode(portHandle, accessMask, tx, txrq)
 * 
 * def CanSetChannelOutput(XLportHandle portHandle, XLaccess accessMask, unsigned char mode):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelOutput(portHandle, accessMask, mode)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_43CanSetChannelOutput(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_43CanSetChannelOutput = {"CanSetChannelOutput", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_43CanSetChannelOutput, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_43CanSetChannelOutput(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned char __pyx_v_mode;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanSetChannelOutput (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_mode,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 625, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 625, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelOutput", 1, 3, 3, 1); __PYX_ERR(0, 625, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mode)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 625, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelOutput", 1, 3, 3, 2); __PYX_ERR(0, 625, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanSetChannelOutput") < 0)) __PYX_ERR(0, 625, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 625, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 625, __pyx_L3_error)
    __pyx_v_mode = __Pyx_PyInt_As_unsigned_char(values[2]); if (unlikely((__pyx_v_mode == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 625, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanSetChannelOutput", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 625, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanSetChannelOutput", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_42CanSetChannelOutput(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_mode);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_42CanSetChannelOutput(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned char __pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanSetChannelOutput", 1);

  /* "vxlapi.pyx":626
 * 
 * def CanSetChannelOutput(XLportHandle portHandle, XLaccess accessMask, unsigned char mode):
 *     return xlCanSetChannelOutput(portHandle, accessMask, mode)             # <<<<<<<<<<<<<<
 * 
 * def CanSetReceiveMode(XLportHandle portHandle, unsigned char ErrorFrame, unsigned char ChipState):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanSetChannelOutput(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_mode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":625
 *     return xlCanSetChannelMode(portHandle, accessMask, tx, txrq)
 * 
 * def CanSetChannelOutput(XLportHandle portHandle, XLaccess accessMask, unsigned char mode):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelOutput(portHandle, accessMask, mode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanSetChannelOutput", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":628
 *     return xlCanSetChannelOutput(portHandle, accessMask, mode)
 * 
 * def CanSetReceiveMode(XLportHandle portHandle, unsigned char ErrorFrame, unsigned char ChipState):             # <<<<<<<<<<<<<<
 *     return xlCanSetReceiveMode(portHandle, ErrorFrame, ChipState)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_45CanSetReceiveMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_45CanSetReceiveMode = {"CanSetReceiveMode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_45CanSetReceiveMode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_45CanSetReceiveMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  unsigned char __pyx_v_ErrorFrame;
  unsigned char __pyx_v_ChipState;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanSetReceiveMode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_ErrorFrame,&__pyx_n_s_ChipState,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ErrorFrame)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetReceiveMode", 1, 3, 3, 1); __PYX_ERR(0, 628, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ChipState)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetReceiveMode", 1, 3, 3, 2); __PYX_ERR(0, 628, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanSetReceiveMode") < 0)) __PYX_ERR(0, 628, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
    __pyx_v_ErrorFrame = __Pyx_PyInt_As_unsigned_char(values[1]); if (unlikely((__pyx_v_ErrorFrame == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
    __pyx_v_ChipState = __Pyx_PyInt_As_unsigned_char(values[2]); if (unlikely((__pyx_v_ChipState == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanSetReceiveMode", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 628, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanSetReceiveMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_44CanSetReceiveMode(__pyx_self, __pyx_v_portHandle, __pyx_v_ErrorFrame, __pyx_v_ChipState);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_44CanSetReceiveMode(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, unsigned char __pyx_v_ErrorFrame, unsigned char __pyx_v_ChipState) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanSetReceiveMode", 1);

  /* "vxlapi.pyx":629
 * 
 * def CanSetReceiveMode(XLportHandle portHandle, unsigned char ErrorFrame, unsigned char ChipState):
 *     return xlCanSetReceiveMode(portHandle, ErrorFrame, ChipState)             # <<<<<<<<<<<<<<
 * 
 * def CanSetChannelParamsC200(XLportHandle portHandle, XLaccess accessMask, unsigned char btr0, unsigned char btr1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanSetReceiveMode(__pyx_v_portHandle, __pyx_v_ErrorFrame, __pyx_v_ChipState)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":628
 *     return xlCanSetChannelOutput(portHandle, accessMask, mode)
 * 
 * def CanSetReceiveMode(XLportHandle portHandle, unsigned char ErrorFrame, unsigned char ChipState):             # <<<<<<<<<<<<<<
 *     return xlCanSetReceiveMode(portHandle, ErrorFrame, ChipState)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanSetReceiveMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":631
 *     return xlCanSetReceiveMode(portHandle, ErrorFrame, ChipState)
 * 
 * def CanSetChannelParamsC200(XLportHandle portHandle, XLaccess accessMask, unsigned char btr0, unsigned char btr1):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelParamsC200(portHandle, accessMask, btr0, btr1)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_47CanSetChannelParamsC200(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_47CanSetChannelParamsC200 = {"CanSetChannelParamsC200", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_47CanSetChannelParamsC200, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_47CanSetChannelParamsC200(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned char __pyx_v_btr0;
  unsigned char __pyx_v_btr1;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanSetChannelParamsC200 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_btr0,&__pyx_n_s_btr1,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelParamsC200", 1, 4, 4, 1); __PYX_ERR(0, 631, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_btr0)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelParamsC200", 1, 4, 4, 2); __PYX_ERR(0, 631, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_btr1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelParamsC200", 1, 4, 4, 3); __PYX_ERR(0, 631, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanSetChannelParamsC200") < 0)) __PYX_ERR(0, 631, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L3_error)
    __pyx_v_btr0 = __Pyx_PyInt_As_unsigned_char(values[2]); if (unlikely((__pyx_v_btr0 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L3_error)
    __pyx_v_btr1 = __Pyx_PyInt_As_unsigned_char(values[3]); if (unlikely((__pyx_v_btr1 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanSetChannelParamsC200", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 631, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanSetChannelParamsC200", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_46CanSetChannelParamsC200(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_btr0, __pyx_v_btr1);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_46CanSetChannelParamsC200(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned char __pyx_v_btr0, unsigned char __pyx_v_btr1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanSetChannelParamsC200", 1);

  /* "vxlapi.pyx":632
 * 
 * def CanSetChannelParamsC200(XLportHandle portHandle, XLaccess accessMask, unsigned char btr0, unsigned char btr1):
 *     return xlCanSetChannelParamsC200(portHandle, accessMask, btr0, btr1)             # <<<<<<<<<<<<<<
 * 
 * def CanSetChannelTransceiver(XLportHandle portHandle, XLaccess accessMask, int type, int lineMode, int resNet):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanSetChannelParamsC200(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_btr0, __pyx_v_btr1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":631
 *     return xlCanSetReceiveMode(portHandle, ErrorFrame, ChipState)
 * 
 * def CanSetChannelParamsC200(XLportHandle portHandle, XLaccess accessMask, unsigned char btr0, unsigned char btr1):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelParamsC200(portHandle, accessMask, btr0, btr1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanSetChannelParamsC200", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":634
 *     return xlCanSetChannelParamsC200(portHandle, accessMask, btr0, btr1)
 * 
 * def CanSetChannelTransceiver(XLportHandle portHandle, XLaccess accessMask, int type, int lineMode, int resNet):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelTransceiver(portHandle, accessMask, type, lineMode, resNet)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_49CanSetChannelTransceiver(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_49CanSetChannelTransceiver = {"CanSetChannelTransceiver", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_49CanSetChannelTransceiver, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_49CanSetChannelTransceiver(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  int __pyx_v_type;
  int __pyx_v_lineMode;
  int __pyx_v_resNet;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanSetChannelTransceiver (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_type,&__pyx_n_s_lineMode,&__pyx_n_s_resNet,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelTransceiver", 1, 5, 5, 1); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelTransceiver", 1, 5, 5, 2); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lineMode)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelTransceiver", 1, 5, 5, 3); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_resNet)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelTransceiver", 1, 5, 5, 4); __PYX_ERR(0, 634, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanSetChannelTransceiver") < 0)) __PYX_ERR(0, 634, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_type = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_type == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_lineMode = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_lineMode == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_resNet = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_resNet == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanSetChannelTransceiver", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 634, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanSetChannelTransceiver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_48CanSetChannelTransceiver(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_type, __pyx_v_lineMode, __pyx_v_resNet);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_48CanSetChannelTransceiver(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, int __pyx_v_type, int __pyx_v_lineMode, int __pyx_v_resNet) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanSetChannelTransceiver", 1);

  /* "vxlapi.pyx":635
 * 
 * def CanSetChannelTransceiver(XLportHandle portHandle, XLaccess accessMask, int type, int lineMode, int resNet):
 *     return xlCanSetChannelTransceiver(portHandle, accessMask, type, lineMode, resNet)             # <<<<<<<<<<<<<<
 * 
 * def CanSetChannelAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned long code, unsigned long mask, unsigned int idRange):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanSetChannelTransceiver(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_type, __pyx_v_lineMode, __pyx_v_resNet)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":634
 *     return xlCanSetChannelParamsC200(portHandle, accessMask, btr0, btr1)
 * 
 * def CanSetChannelTransceiver(XLportHandle portHandle, XLaccess accessMask, int type, int lineMode, int resNet):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelTransceiver(portHandle, accessMask, type, lineMode, resNet)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanSetChannelTransceiver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":637
 *     return xlCanSetChannelTransceiver(portHandle, accessMask, type, lineMode, resNet)
 * 
 * def CanSetChannelAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned long code, unsigned long mask, unsigned int idRange):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelAcceptance(portHandle, accessMask, code, mask, idRange)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_51CanSetChannelAcceptance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_51CanSetChannelAcceptance = {"CanSetChannelAcceptance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_51CanSetChannelAcceptance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_51CanSetChannelAcceptance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned long __pyx_v_code;
  unsigned long __pyx_v_mask;
  unsigned int __pyx_v_idRange;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanSetChannelAcceptance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_code,&__pyx_n_s_mask,&__pyx_n_s_idRange,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelAcceptance", 1, 5, 5, 1); __PYX_ERR(0, 637, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_code)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelAcceptance", 1, 5, 5, 2); __PYX_ERR(0, 637, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelAcceptance", 1, 5, 5, 3); __PYX_ERR(0, 637, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_idRange)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanSetChannelAcceptance", 1, 5, 5, 4); __PYX_ERR(0, 637, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanSetChannelAcceptance") < 0)) __PYX_ERR(0, 637, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
    __pyx_v_code = __Pyx_PyInt_As_unsigned_long(values[2]); if (unlikely((__pyx_v_code == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
    __pyx_v_mask = __Pyx_PyInt_As_unsigned_long(values[3]); if (unlikely((__pyx_v_mask == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
    __pyx_v_idRange = __Pyx_PyInt_As_unsigned_int(values[4]); if (unlikely((__pyx_v_idRange == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanSetChannelAcceptance", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 637, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanSetChannelAcceptance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_50CanSetChannelAcceptance(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_code, __pyx_v_mask, __pyx_v_idRange);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_50CanSetChannelAcceptance(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned long __pyx_v_code, unsigned long __pyx_v_mask, unsigned int __pyx_v_idRange) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanSetChannelAcceptance", 1);

  /* "vxlapi.pyx":638
 * 
 * def CanSetChannelAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned long code, unsigned long mask, unsigned int idRange):
 *     return xlCanSetChannelAcceptance(portHandle, accessMask, code, mask, idRange)             # <<<<<<<<<<<<<<
 * 
 * def CanAddAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanSetChannelAcceptance(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_code, __pyx_v_mask, __pyx_v_idRange)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":637
 *     return xlCanSetChannelTransceiver(portHandle, accessMask, type, lineMode, resNet)
 * 
 * def CanSetChannelAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned long code, unsigned long mask, unsigned int idRange):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelAcceptance(portHandle, accessMask, code, mask, idRange)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanSetChannelAcceptance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":640
 *     return xlCanSetChannelAcceptance(portHandle, accessMask, code, mask, idRange)
 * 
 * def CanAddAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):             # <<<<<<<<<<<<<<
 *     return xlCanAddAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_53CanAddAcceptanceRange(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_53CanAddAcceptanceRange = {"CanAddAcceptanceRange", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_53CanAddAcceptanceRange, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_53CanAddAcceptanceRange(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned long __pyx_v_first_id;
  unsigned long __pyx_v_last_id;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanAddAcceptanceRange (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_first_id,&__pyx_n_s_last_id,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanAddAcceptanceRange", 1, 4, 4, 1); __PYX_ERR(0, 640, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_first_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanAddAcceptanceRange", 1, 4, 4, 2); __PYX_ERR(0, 640, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_last_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanAddAcceptanceRange", 1, 4, 4, 3); __PYX_ERR(0, 640, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanAddAcceptanceRange") < 0)) __PYX_ERR(0, 640, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
    __pyx_v_first_id = __Pyx_PyInt_As_unsigned_long(values[2]); if (unlikely((__pyx_v_first_id == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
    __pyx_v_last_id = __Pyx_PyInt_As_unsigned_long(values[3]); if (unlikely((__pyx_v_last_id == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanAddAcceptanceRange", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 640, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanAddAcceptanceRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_52CanAddAcceptanceRange(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_first_id, __pyx_v_last_id);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_52CanAddAcceptanceRange(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned long __pyx_v_first_id, unsigned long __pyx_v_last_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanAddAcceptanceRange", 1);

  /* "vxlapi.pyx":641
 * 
 * def CanAddAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):
 *     return xlCanAddAcceptanceRange(portHandle, accessMask, first_id, last_id)             # <<<<<<<<<<<<<<
 * 
 * def CanRemoveAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanAddAcceptanceRange(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_first_id, __pyx_v_last_id)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":640
 *     return xlCanSetChannelAcceptance(portHandle, accessMask, code, mask, idRange)
 * 
 * def CanAddAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):             # <<<<<<<<<<<<<<
 *     return xlCanAddAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanAddAcceptanceRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":643
 *     return xlCanAddAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 * def CanRemoveAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):             # <<<<<<<<<<<<<<
 *     return xlCanRemoveAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_55CanRemoveAcceptanceRange(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_55CanRemoveAcceptanceRange = {"CanRemoveAcceptanceRange", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_55CanRemoveAcceptanceRange, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_55CanRemoveAcceptanceRange(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned long __pyx_v_first_id;
  unsigned long __pyx_v_last_id;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanRemoveAcceptanceRange (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_first_id,&__pyx_n_s_last_id,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanRemoveAcceptanceRange", 1, 4, 4, 1); __PYX_ERR(0, 643, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_first_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanRemoveAcceptanceRange", 1, 4, 4, 2); __PYX_ERR(0, 643, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_last_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanRemoveAcceptanceRange", 1, 4, 4, 3); __PYX_ERR(0, 643, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanRemoveAcceptanceRange") < 0)) __PYX_ERR(0, 643, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
    __pyx_v_first_id = __Pyx_PyInt_As_unsigned_long(values[2]); if (unlikely((__pyx_v_first_id == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
    __pyx_v_last_id = __Pyx_PyInt_As_unsigned_long(values[3]); if (unlikely((__pyx_v_last_id == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanRemoveAcceptanceRange", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 643, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanRemoveAcceptanceRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_54CanRemoveAcceptanceRange(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_first_id, __pyx_v_last_id);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_54CanRemoveAcceptanceRange(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned long __pyx_v_first_id, unsigned long __pyx_v_last_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanRemoveAcceptanceRange", 1);

  /* "vxlapi.pyx":644
 * 
 * def CanRemoveAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):
 *     return xlCanRemoveAcceptanceRange(portHandle, accessMask, first_id, last_id)             # <<<<<<<<<<<<<<
 * 
 * def CanResetAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned int idRange):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanRemoveAcceptanceRange(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_first_id, __pyx_v_last_id)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":643
 *     return xlCanAddAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 * def CanRemoveAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):             # <<<<<<<<<<<<<<
 *     return xlCanRemoveAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanRemoveAcceptanceRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":646
 *     return xlCanRemoveAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 * def CanResetAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned int idRange):             # <<<<<<<<<<<<<<
 *     return xlCanResetAcceptance(portHandle, accessMask, idRange)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_57CanResetAcceptance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_57CanResetAcceptance = {"CanResetAcceptance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_57CanResetAcceptance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_57CanResetAcceptance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned int __pyx_v_idRange;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanResetAcceptance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_idRange,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanResetAcceptance", 1, 3, 3, 1); __PYX_ERR(0, 646, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_idRange)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanResetAcceptance", 1, 3, 3, 2); __PYX_ERR(0, 646, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanResetAcceptance") < 0)) __PYX_ERR(0, 646, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
    __pyx_v_idRange = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_idRange == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanResetAcceptance", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 646, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanResetAcceptance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_56CanResetAcceptance(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_idRange);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_56CanResetAcceptance(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_idRange) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanResetAcceptance", 1);

  /* "vxlapi.pyx":647
 * 
 * def CanResetAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned int idRange):
 *     return xlCanResetAcceptance(portHandle, accessMask, idRange)             # <<<<<<<<<<<<<<
 * 
 * def SetGlobalTimeSync(unsigned long newValue, list pPreviousValue):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlCanResetAcceptance(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_idRange)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":646
 *     return xlCanRemoveAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 * def CanResetAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned int idRange):             # <<<<<<<<<<<<<<
 *     return xlCanResetAcceptance(portHandle, accessMask, idRange)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanResetAcceptance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":649
 *     return xlCanResetAcceptance(portHandle, accessMask, idRange)
 * 
 * def SetGlobalTimeSync(unsigned long newValue, list pPreviousValue):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned long previousValue = XL_SET_TIMESYNC_NO_CHANGE
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_59SetGlobalTimeSync(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_59SetGlobalTimeSync = {"SetGlobalTimeSync", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_59SetGlobalTimeSync, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_59SetGlobalTimeSync(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  unsigned long __pyx_v_newValue;
  PyObject *__pyx_v_pPreviousValue = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetGlobalTimeSync (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_newValue,&__pyx_n_s_pPreviousValue,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_newValue)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pPreviousValue)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetGlobalTimeSync", 1, 2, 2, 1); __PYX_ERR(0, 649, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetGlobalTimeSync") < 0)) __PYX_ERR(0, 649, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_newValue = __Pyx_PyInt_As_unsigned_long(values[0]); if (unlikely((__pyx_v_newValue == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L3_error)
    __pyx_v_pPreviousValue = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetGlobalTimeSync", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 649, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.SetGlobalTimeSync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pPreviousValue), (&PyList_Type), 1, "pPreviousValue", 1))) __PYX_ERR(0, 649, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_58SetGlobalTimeSync(__pyx_self, __pyx_v_newValue, __pyx_v_pPreviousValue);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_58SetGlobalTimeSync(CYTHON_UNUSED PyObject *__pyx_self, unsigned long __pyx_v_newValue, PyObject *__pyx_v_pPreviousValue) {
  XLstatus __pyx_v_status;
  unsigned long __pyx_v_previousValue;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  unsigned long __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetGlobalTimeSync", 1);

  /* "vxlapi.pyx":650
 * 
 * def SetGlobalTimeSync(unsigned long newValue, list pPreviousValue):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef unsigned long previousValue = XL_SET_TIMESYNC_NO_CHANGE
 *     status = xlSetGlobalTimeSync(newValue, &previousValue)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":651
 * def SetGlobalTimeSync(unsigned long newValue, list pPreviousValue):
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned long previousValue = XL_SET_TIMESYNC_NO_CHANGE             # <<<<<<<<<<<<<<
 *     status = xlSetGlobalTimeSync(newValue, &previousValue)
 *     pPreviousValue[0] = previousValue
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_SET_TIMESYNC_NO_CHANGE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_long(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_previousValue = __pyx_t_3;

  /* "vxlapi.pyx":652
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned long previousValue = XL_SET_TIMESYNC_NO_CHANGE
 *     status = xlSetGlobalTimeSync(newValue, &previousValue)             # <<<<<<<<<<<<<<
 *     pPreviousValue[0] = previousValue
 *     return status
 */
  __pyx_v_status = xlSetGlobalTimeSync(__pyx_v_newValue, (&__pyx_v_previousValue));

  /* "vxlapi.pyx":653
 *     cdef unsigned long previousValue = XL_SET_TIMESYNC_NO_CHANGE
 *     status = xlSetGlobalTimeSync(newValue, &previousValue)
 *     pPreviousValue[0] = previousValue             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_previousValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pPreviousValue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 653, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pPreviousValue, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":654
 *     status = xlSetGlobalTimeSync(newValue, &previousValue)
 *     pPreviousValue[0] = previousValue
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def GetSyncTime(XLportHandle portHandle, list pTime):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":649
 *     return xlCanResetAcceptance(portHandle, accessMask, idRange)
 * 
 * def SetGlobalTimeSync(unsigned long newValue, list pPreviousValue):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned long previousValue = XL_SET_TIMESYNC_NO_CHANGE
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.SetGlobalTimeSync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":656
 *     return status
 * 
 * def GetSyncTime(XLportHandle portHandle, list pTime):             # <<<<<<<<<<<<<<
 *     cdef XLstatus = XL_ERROR
 *     cdef XLuint64 time = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_61GetSyncTime(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_61GetSyncTime = {"GetSyncTime", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_61GetSyncTime, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_61GetSyncTime(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  PyObject *__pyx_v_pTime = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetSyncTime (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_pTime,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pTime)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetSyncTime", 1, 2, 2, 1); __PYX_ERR(0, 656, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetSyncTime") < 0)) __PYX_ERR(0, 656, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L3_error)
    __pyx_v_pTime = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetSyncTime", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 656, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetSyncTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pTime), (&PyList_Type), 1, "pTime", 1))) __PYX_ERR(0, 656, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_60GetSyncTime(__pyx_self, __pyx_v_portHandle, __pyx_v_pTime);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_60GetSyncTime(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, PyObject *__pyx_v_pTime) {
  CYTHON_UNUSED PyObject *__pyx_v_XLstatus = 0;
  XLuint64 __pyx_v_time;
  XLstatus __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetSyncTime", 1);

  /* "vxlapi.pyx":657
 * 
 * def GetSyncTime(XLportHandle portHandle, list pTime):
 *     cdef XLstatus = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLuint64 time = 0
 *     status = xlGetSyncTime(portHandle, &time)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_XLstatus = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":658
 * def GetSyncTime(XLportHandle portHandle, list pTime):
 *     cdef XLstatus = XL_ERROR
 *     cdef XLuint64 time = 0             # <<<<<<<<<<<<<<
 *     status = xlGetSyncTime(portHandle, &time)
 *     pTime[0] = time
 */
  __pyx_v_time = 0;

  /* "vxlapi.pyx":659
 *     cdef XLstatus = XL_ERROR
 *     cdef XLuint64 time = 0
 *     status = xlGetSyncTime(portHandle, &time)             # <<<<<<<<<<<<<<
 *     pTime[0] = time
 *     return status
 */
  __pyx_v_status = xlGetSyncTime(__pyx_v_portHandle, (&__pyx_v_time));

  /* "vxlapi.pyx":660
 *     cdef XLuint64 time = 0
 *     status = xlGetSyncTime(portHandle, &time)
 *     pTime[0] = time             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_XLuint64(__pyx_v_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pTime == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 660, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pTime, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":661
 *     status = xlGetSyncTime(portHandle, &time)
 *     pTime[0] = time
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def GetChannelTime(XLportHandle portHandle, XLaccess accessMask, list pChannelTime):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":656
 *     return status
 * 
 * def GetSyncTime(XLportHandle portHandle, list pTime):             # <<<<<<<<<<<<<<
 *     cdef XLstatus = XL_ERROR
 *     cdef XLuint64 time = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.GetSyncTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_XLstatus);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":663
 *     return status
 * 
 * def GetChannelTime(XLportHandle portHandle, XLaccess accessMask, list pChannelTime):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLuint64 channelTime
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_63GetChannelTime(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_63GetChannelTime = {"GetChannelTime", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_63GetChannelTime, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_63GetChannelTime(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  PyObject *__pyx_v_pChannelTime = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetChannelTime (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_pChannelTime,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 663, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 663, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetChannelTime", 1, 3, 3, 1); __PYX_ERR(0, 663, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pChannelTime)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 663, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetChannelTime", 1, 3, 3, 2); __PYX_ERR(0, 663, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetChannelTime") < 0)) __PYX_ERR(0, 663, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 663, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 663, __pyx_L3_error)
    __pyx_v_pChannelTime = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetChannelTime", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 663, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetChannelTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pChannelTime), (&PyList_Type), 1, "pChannelTime", 1))) __PYX_ERR(0, 663, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_62GetChannelTime(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_pChannelTime);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_62GetChannelTime(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pChannelTime) {
  XLstatus __pyx_v_status;
  XLuint64 __pyx_v_channelTime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetChannelTime", 1);

  /* "vxlapi.pyx":664
 * 
 * def GetChannelTime(XLportHandle portHandle, XLaccess accessMask, list pChannelTime):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLuint64 channelTime
 *     status = xlGetChannelTime(portHandle, accessMask, &channelTime)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":666
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLuint64 channelTime
 *     status = xlGetChannelTime(portHandle, accessMask, &channelTime)             # <<<<<<<<<<<<<<
 *     pChannelTime[0] = channelTime
 *     return status
 */
  __pyx_v_status = xlGetChannelTime(__pyx_v_portHandle, __pyx_v_accessMask, (&__pyx_v_channelTime));

  /* "vxlapi.pyx":667
 *     cdef XLuint64 channelTime
 *     status = xlGetChannelTime(portHandle, accessMask, &channelTime)
 *     pChannelTime[0] = channelTime             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_XLuint64(__pyx_v_channelTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pChannelTime == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 667, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pChannelTime, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":668
 *     status = xlGetChannelTime(portHandle, accessMask, &channelTime)
 *     pChannelTime[0] = channelTime
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def GenerateSyncPulse(XLportHandle portHandle, XLaccess accessMask):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":663
 *     return status
 * 
 * def GetChannelTime(XLportHandle portHandle, XLaccess accessMask, list pChannelTime):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLuint64 channelTime
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.GetChannelTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":670
 *     return status
 * 
 * def GenerateSyncPulse(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlGenerateSyncPulse(portHandle, accessMask)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_65GenerateSyncPulse(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_65GenerateSyncPulse = {"GenerateSyncPulse", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_65GenerateSyncPulse, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_65GenerateSyncPulse(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GenerateSyncPulse (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GenerateSyncPulse", 1, 2, 2, 1); __PYX_ERR(0, 670, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GenerateSyncPulse") < 0)) __PYX_ERR(0, 670, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GenerateSyncPulse", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 670, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GenerateSyncPulse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_64GenerateSyncPulse(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_64GenerateSyncPulse(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GenerateSyncPulse", 1);

  /* "vxlapi.pyx":671
 * 
 * def GenerateSyncPulse(XLportHandle portHandle, XLaccess accessMask):
 *     return xlGenerateSyncPulse(portHandle, accessMask)             # <<<<<<<<<<<<<<
 * 
 * #def GetEventString(dict pXLevent):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlGenerateSyncPulse(__pyx_v_portHandle, __pyx_v_accessMask)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":670
 *     return status
 * 
 * def GenerateSyncPulse(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlGenerateSyncPulse(portHandle, accessMask)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.GenerateSyncPulse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":690
 *     #return xlGetEventString(&xlEvent)
 * 
 * def GetErrorString(XLstatus err):             # <<<<<<<<<<<<<<
 *     return xlGetErrorString(err)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_67GetErrorString(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_67GetErrorString = {"GetErrorString", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_67GetErrorString, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_67GetErrorString(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLstatus __pyx_v_err;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetErrorString (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_err,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_err)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 690, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetErrorString") < 0)) __PYX_ERR(0, 690, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_err = __Pyx_PyInt_As_XLstatus(values[0]); if (unlikely((__pyx_v_err == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 690, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetErrorString", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 690, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetErrorString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_66GetErrorString(__pyx_self, __pyx_v_err);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_66GetErrorString(CYTHON_UNUSED PyObject *__pyx_self, XLstatus __pyx_v_err) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetErrorString", 1);

  /* "vxlapi.pyx":691
 * 
 * def GetErrorString(XLstatus err):
 *     return xlGetErrorString(err)             # <<<<<<<<<<<<<<
 * 
 * def GetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(xlGetErrorString(__pyx_v_err)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":690
 *     #return xlGetEventString(&xlEvent)
 * 
 * def GetErrorString(XLstatus err):             # <<<<<<<<<<<<<<
 *     return xlGetErrorString(err)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.GetErrorString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":693
 *     return xlGetErrorString(err)
 * 
 * def GetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int hwType    = pHwType[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_69GetApplConfig(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_69GetApplConfig = {"GetApplConfig", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_69GetApplConfig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_69GetApplConfig(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  char *__pyx_v_appName;
  unsigned int __pyx_v_appChannel;
  PyObject *__pyx_v_pHwType = 0;
  PyObject *__pyx_v_pHwIndex = 0;
  PyObject *__pyx_v_pHwChannel = 0;
  unsigned int __pyx_v_busType;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetApplConfig (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_appName,&__pyx_n_s_appChannel,&__pyx_n_s_pHwType,&__pyx_n_s_pHwIndex,&__pyx_n_s_pHwChannel,&__pyx_n_s_busType,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_appName)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_appChannel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetApplConfig", 1, 6, 6, 1); __PYX_ERR(0, 693, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pHwType)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetApplConfig", 1, 6, 6, 2); __PYX_ERR(0, 693, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pHwIndex)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetApplConfig", 1, 6, 6, 3); __PYX_ERR(0, 693, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pHwChannel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetApplConfig", 1, 6, 6, 4); __PYX_ERR(0, 693, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_busType)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetApplConfig", 1, 6, 6, 5); __PYX_ERR(0, 693, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetApplConfig") < 0)) __PYX_ERR(0, 693, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 6)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
    }
    __pyx_v_appName = __Pyx_PyObject_AsWritableString(values[0]); if (unlikely((!__pyx_v_appName) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
    __pyx_v_appChannel = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_appChannel == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
    __pyx_v_pHwType = ((PyObject*)values[2]);
    __pyx_v_pHwIndex = ((PyObject*)values[3]);
    __pyx_v_pHwChannel = ((PyObject*)values[4]);
    __pyx_v_busType = __Pyx_PyInt_As_unsigned_int(values[5]); if (unlikely((__pyx_v_busType == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetApplConfig", 1, 6, 6, __pyx_nargs); __PYX_ERR(0, 693, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetApplConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pHwType), (&PyList_Type), 1, "pHwType", 1))) __PYX_ERR(0, 693, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pHwIndex), (&PyList_Type), 1, "pHwIndex", 1))) __PYX_ERR(0, 693, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pHwChannel), (&PyList_Type), 1, "pHwChannel", 1))) __PYX_ERR(0, 693, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_68GetApplConfig(__pyx_self, __pyx_v_appName, __pyx_v_appChannel, __pyx_v_pHwType, __pyx_v_pHwIndex, __pyx_v_pHwChannel, __pyx_v_busType);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_68GetApplConfig(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_appName, unsigned int __pyx_v_appChannel, PyObject *__pyx_v_pHwType, PyObject *__pyx_v_pHwIndex, PyObject *__pyx_v_pHwChannel, unsigned int __pyx_v_busType) {
  XLstatus __pyx_v_status;
  unsigned int __pyx_v_hwType;
  unsigned int __pyx_v_hwIndex;
  unsigned int __pyx_v_hwChannel;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetApplConfig", 1);

  /* "vxlapi.pyx":694
 * 
 * def GetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef unsigned int hwType    = pHwType[0]
 *     cdef unsigned int hwIndex   = pHwIndex[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":695
 * def GetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int hwType    = pHwType[0]             # <<<<<<<<<<<<<<
 *     cdef unsigned int hwIndex   = pHwIndex[0]
 *     cdef unsigned int hwChannel = pHwChannel[0]
 */
  if (unlikely(__pyx_v_pHwType == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 695, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_pHwType, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_hwType = __pyx_t_3;

  /* "vxlapi.pyx":696
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int hwType    = pHwType[0]
 *     cdef unsigned int hwIndex   = pHwIndex[0]             # <<<<<<<<<<<<<<
 *     cdef unsigned int hwChannel = pHwChannel[0]
 * 
 */
  if (unlikely(__pyx_v_pHwIndex == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 696, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_pHwIndex, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_hwIndex = __pyx_t_3;

  /* "vxlapi.pyx":697
 *     cdef unsigned int hwType    = pHwType[0]
 *     cdef unsigned int hwIndex   = pHwIndex[0]
 *     cdef unsigned int hwChannel = pHwChannel[0]             # <<<<<<<<<<<<<<
 * 
 *     status = xlGetApplConfig(appName, appChannel, &hwType, &hwIndex, &hwChannel, busType)
 */
  if (unlikely(__pyx_v_pHwChannel == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 697, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_pHwChannel, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_hwChannel = __pyx_t_3;

  /* "vxlapi.pyx":699
 *     cdef unsigned int hwChannel = pHwChannel[0]
 * 
 *     status = xlGetApplConfig(appName, appChannel, &hwType, &hwIndex, &hwChannel, busType)             # <<<<<<<<<<<<<<
 *     pHwType[0]    = hwType
 *     pHwIndex[0]   = hwIndex
 */
  __pyx_v_status = xlGetApplConfig(__pyx_v_appName, __pyx_v_appChannel, (&__pyx_v_hwType), (&__pyx_v_hwIndex), (&__pyx_v_hwChannel), __pyx_v_busType);

  /* "vxlapi.pyx":700
 * 
 *     status = xlGetApplConfig(appName, appChannel, &hwType, &hwIndex, &hwChannel, busType)
 *     pHwType[0]    = hwType             # <<<<<<<<<<<<<<
 *     pHwIndex[0]   = hwIndex
 *     pHwChannel[0] = hwChannel
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_hwType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pHwType == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 700, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pHwType, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":701
 *     status = xlGetApplConfig(appName, appChannel, &hwType, &hwIndex, &hwChannel, busType)
 *     pHwType[0]    = hwType
 *     pHwIndex[0]   = hwIndex             # <<<<<<<<<<<<<<
 *     pHwChannel[0] = hwChannel
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_hwIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pHwIndex == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 701, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pHwIndex, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":702
 *     pHwType[0]    = hwType
 *     pHwIndex[0]   = hwIndex
 *     pHwChannel[0] = hwChannel             # <<<<<<<<<<<<<<
 * 
 *     return status
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_hwChannel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pHwChannel == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 702, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pHwChannel, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":704
 *     pHwChannel[0] = hwChannel
 * 
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def SetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":693
 *     return xlGetErrorString(err)
 * 
 * def GetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int hwType    = pHwType[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.GetApplConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":706
 *     return status
 * 
 * def SetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):             # <<<<<<<<<<<<<<
 *     return xlSetApplConfig(appName, appChannel, pHwType[0], pHwIndex[0], pHwChannel[0], busType)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_71SetApplConfig(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_71SetApplConfig = {"SetApplConfig", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_71SetApplConfig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_71SetApplConfig(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  char *__pyx_v_appName;
  unsigned int __pyx_v_appChannel;
  PyObject *__pyx_v_pHwType = 0;
  PyObject *__pyx_v_pHwIndex = 0;
  PyObject *__pyx_v_pHwChannel = 0;
  unsigned int __pyx_v_busType;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetApplConfig (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_appName,&__pyx_n_s_appChannel,&__pyx_n_s_pHwType,&__pyx_n_s_pHwIndex,&__pyx_n_s_pHwChannel,&__pyx_n_s_busType,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_appName)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_appChannel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetApplConfig", 1, 6, 6, 1); __PYX_ERR(0, 706, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pHwType)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetApplConfig", 1, 6, 6, 2); __PYX_ERR(0, 706, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pHwIndex)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetApplConfig", 1, 6, 6, 3); __PYX_ERR(0, 706, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pHwChannel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetApplConfig", 1, 6, 6, 4); __PYX_ERR(0, 706, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_busType)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetApplConfig", 1, 6, 6, 5); __PYX_ERR(0, 706, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetApplConfig") < 0)) __PYX_ERR(0, 706, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 6)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
    }
    __pyx_v_appName = __Pyx_PyObject_AsWritableString(values[0]); if (unlikely((!__pyx_v_appName) && PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
    __pyx_v_appChannel = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_appChannel == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
    __pyx_v_pHwType = ((PyObject*)values[2]);
    __pyx_v_pHwIndex = ((PyObject*)values[3]);
    __pyx_v_pHwChannel = ((PyObject*)values[4]);
    __pyx_v_busType = __Pyx_PyInt_As_unsigned_int(values[5]); if (unlikely((__pyx_v_busType == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetApplConfig", 1, 6, 6, __pyx_nargs); __PYX_ERR(0, 706, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.SetApplConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pHwType), (&PyList_Type), 1, "pHwType", 1))) __PYX_ERR(0, 706, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pHwIndex), (&PyList_Type), 1, "pHwIndex", 1))) __PYX_ERR(0, 706, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pHwChannel), (&PyList_Type), 1, "pHwChannel", 1))) __PYX_ERR(0, 706, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_70SetApplConfig(__pyx_self, __pyx_v_appName, __pyx_v_appChannel, __pyx_v_pHwType, __pyx_v_pHwIndex, __pyx_v_pHwChannel, __pyx_v_busType);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_70SetApplConfig(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_appName, unsigned int __pyx_v_appChannel, PyObject *__pyx_v_pHwType, PyObject *__pyx_v_pHwIndex, PyObject *__pyx_v_pHwChannel, unsigned int __pyx_v_busType) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  unsigned int __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetApplConfig", 1);

  /* "vxlapi.pyx":707
 * 
 * def SetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):
 *     return xlSetApplConfig(appName, appChannel, pHwType[0], pHwIndex[0], pHwChannel[0], busType)             # <<<<<<<<<<<<<<
 * 
 * def GetDriverConfig(dict pDriverConfig):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_pHwType == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 707, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_pHwType, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_pHwIndex == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 707, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_pHwIndex, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_pHwChannel == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 707, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_pHwChannel, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlSetApplConfig(__pyx_v_appName, __pyx_v_appChannel, __pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_v_busType)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":706
 *     return status
 * 
 * def SetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):             # <<<<<<<<<<<<<<
 *     return xlSetApplConfig(appName, appChannel, pHwType[0], pHwIndex[0], pHwChannel[0], busType)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.SetApplConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":709
 *     return xlSetApplConfig(appName, appChannel, pHwType[0], pHwIndex[0], pHwChannel[0], busType)
 * 
 * def GetDriverConfig(dict pDriverConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef XLdriverConfig driverConfig
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_73GetDriverConfig(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_73GetDriverConfig = {"GetDriverConfig", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_73GetDriverConfig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_73GetDriverConfig(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_pDriverConfig = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetDriverConfig (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pDriverConfig,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pDriverConfig)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetDriverConfig") < 0)) __PYX_ERR(0, 709, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_pDriverConfig = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetDriverConfig", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 709, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetDriverConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pDriverConfig), (&PyDict_Type), 1, "pDriverConfig", 1))) __PYX_ERR(0, 709, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_72GetDriverConfig(__pyx_self, __pyx_v_pDriverConfig);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_72GetDriverConfig(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pDriverConfig) {
  XLstatus __pyx_v_status;
  XLdriverConfig __pyx_v_driverConfig;
  PyObject *__pyx_v_channel = NULL;
  int __pyx_v_channelCount;
  int __pyx_v_i;
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_v_busParams = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_canFD = NULL;
  PyObject *__pyx_v_can = NULL;
  PyObject *__pyx_v_flexray = NULL;
  PyObject *__pyx_v_most = NULL;
  PyObject *__pyx_v_ethernet = NULL;
  PyObject *__pyx_v_a429 = NULL;
  PyObject *__pyx_v_dir = NULL;
  long __pyx_8genexpr1__pyx_v_i;
  long __pyx_8genexpr2__pyx_v_j;
  long __pyx_8genexpr3__pyx_v_j;
  long __pyx_8genexpr4__pyx_v_j;
  long __pyx_8genexpr5__pyx_v_j;
  long __pyx_8genexpr6__pyx_v_j;
  long __pyx_8genexpr7__pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetDriverConfig", 1);

  /* "vxlapi.pyx":713
 *     cdef XLdriverConfig driverConfig
 * 
 *     status = xlGetDriverConfig(&driverConfig)             # <<<<<<<<<<<<<<
 * 
 *     pDriverConfig["dllVersion"]   = driverConfig.dllVersion
 */
  __pyx_v_status = xlGetDriverConfig((&__pyx_v_driverConfig));

  /* "vxlapi.pyx":715
 *     status = xlGetDriverConfig(&driverConfig)
 * 
 *     pDriverConfig["dllVersion"]   = driverConfig.dllVersion             # <<<<<<<<<<<<<<
 *     pDriverConfig["channelCount"] = driverConfig.channelCount
 *     pDriverConfig["reserved[10]"] = [driverConfig.reserved[i] for i in range(10)]
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_driverConfig.dllVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pDriverConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 715, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_pDriverConfig, __pyx_n_s_dllVersion, __pyx_t_1) < 0))) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":716
 * 
 *     pDriverConfig["dllVersion"]   = driverConfig.dllVersion
 *     pDriverConfig["channelCount"] = driverConfig.channelCount             # <<<<<<<<<<<<<<
 *     pDriverConfig["reserved[10]"] = [driverConfig.reserved[i] for i in range(10)]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_driverConfig.channelCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pDriverConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 716, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_pDriverConfig, __pyx_n_s_channelCount, __pyx_t_1) < 0))) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":717
 *     pDriverConfig["dllVersion"]   = driverConfig.dllVersion
 *     pDriverConfig["channelCount"] = driverConfig.channelCount
 *     pDriverConfig["reserved[10]"] = [driverConfig.reserved[i] for i in range(10)]             # <<<<<<<<<<<<<<
 * 
 *     channel = []
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    for (__pyx_t_2 = 0; __pyx_t_2 < 10; __pyx_t_2+=1) {
      __pyx_8genexpr1__pyx_v_i = __pyx_t_2;
      __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.reserved[__pyx_8genexpr1__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 717, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  } /* exit inner scope */
  if (unlikely(__pyx_v_pDriverConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 717, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_pDriverConfig, __pyx_kp_s_reserved_10, __pyx_t_1) < 0))) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":719
 *     pDriverConfig["reserved[10]"] = [driverConfig.reserved[i] for i in range(10)]
 * 
 *     channel = []             # <<<<<<<<<<<<<<
 *     cdef int channelCount = driverConfig.channelCount
 *     for i in range(channelCount):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_channel = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":720
 * 
 *     channel = []
 *     cdef int channelCount = driverConfig.channelCount             # <<<<<<<<<<<<<<
 *     for i in range(channelCount):
 *         ch = {}
 */
  __pyx_t_4 = __pyx_v_driverConfig.channelCount;
  __pyx_v_channelCount = __pyx_t_4;

  /* "vxlapi.pyx":721
 *     channel = []
 *     cdef int channelCount = driverConfig.channelCount
 *     for i in range(channelCount):             # <<<<<<<<<<<<<<
 *         ch = {}
 *         ch["name"]                   = bytes(driverConfig.channel[i].name)
 */
  __pyx_t_5 = __pyx_v_channelCount;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "vxlapi.pyx":722
 *     cdef int channelCount = driverConfig.channelCount
 *     for i in range(channelCount):
 *         ch = {}             # <<<<<<<<<<<<<<
 *         ch["name"]                   = bytes(driverConfig.channel[i].name)
 *         ch["hwType"]                 = driverConfig.channel[i].hwType
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_ch, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "vxlapi.pyx":723
 *     for i in range(channelCount):
 *         ch = {}
 *         ch["name"]                   = bytes(driverConfig.channel[i].name)             # <<<<<<<<<<<<<<
 *         ch["hwType"]                 = driverConfig.channel[i].hwType
 *         ch["hwIndex"]                = driverConfig.channel[i].hwIndex
 */
    __pyx_t_1 = __Pyx_PyObject_FromString((__pyx_v_driverConfig.channel[__pyx_v_i]).name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_name, __pyx_t_3) < 0))) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":724
 *         ch = {}
 *         ch["name"]                   = bytes(driverConfig.channel[i].name)
 *         ch["hwType"]                 = driverConfig.channel[i].hwType             # <<<<<<<<<<<<<<
 *         ch["hwIndex"]                = driverConfig.channel[i].hwIndex
 *         ch["hwChannel"]              = driverConfig.channel[i].hwChannel
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).hwType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_hwType, __pyx_t_3) < 0))) __PYX_ERR(0, 724, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":725
 *         ch["name"]                   = bytes(driverConfig.channel[i].name)
 *         ch["hwType"]                 = driverConfig.channel[i].hwType
 *         ch["hwIndex"]                = driverConfig.channel[i].hwIndex             # <<<<<<<<<<<<<<
 *         ch["hwChannel"]              = driverConfig.channel[i].hwChannel
 *         ch["transceiverType"]        = driverConfig.channel[i].transceiverType
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).hwIndex); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_hwIndex, __pyx_t_3) < 0))) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":726
 *         ch["hwType"]                 = driverConfig.channel[i].hwType
 *         ch["hwIndex"]                = driverConfig.channel[i].hwIndex
 *         ch["hwChannel"]              = driverConfig.channel[i].hwChannel             # <<<<<<<<<<<<<<
 *         ch["transceiverType"]        = driverConfig.channel[i].transceiverType
 *         ch["transceiverState"]       = driverConfig.channel[i].transceiverState
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).hwChannel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_hwChannel, __pyx_t_3) < 0))) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":727
 *         ch["hwIndex"]                = driverConfig.channel[i].hwIndex
 *         ch["hwChannel"]              = driverConfig.channel[i].hwChannel
 *         ch["transceiverType"]        = driverConfig.channel[i].transceiverType             # <<<<<<<<<<<<<<
 *         ch["transceiverState"]       = driverConfig.channel[i].transceiverState
 *         ch["configError"]            = driverConfig.channel[i].configError
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).transceiverType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 727, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_transceiverType, __pyx_t_3) < 0))) __PYX_ERR(0, 727, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":728
 *         ch["hwChannel"]              = driverConfig.channel[i].hwChannel
 *         ch["transceiverType"]        = driverConfig.channel[i].transceiverType
 *         ch["transceiverState"]       = driverConfig.channel[i].transceiverState             # <<<<<<<<<<<<<<
 *         ch["configError"]            = driverConfig.channel[i].configError
 *         ch["channelIndex"]           = driverConfig.channel[i].channelIndex
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).transceiverState); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_transceiverState, __pyx_t_3) < 0))) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":729
 *         ch["transceiverType"]        = driverConfig.channel[i].transceiverType
 *         ch["transceiverState"]       = driverConfig.channel[i].transceiverState
 *         ch["configError"]            = driverConfig.channel[i].configError             # <<<<<<<<<<<<<<
 *         ch["channelIndex"]           = driverConfig.channel[i].channelIndex
 *         ch["channelMask"]            = driverConfig.channel[i].channelMask
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).configError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_configError, __pyx_t_3) < 0))) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":730
 *         ch["transceiverState"]       = driverConfig.channel[i].transceiverState
 *         ch["configError"]            = driverConfig.channel[i].configError
 *         ch["channelIndex"]           = driverConfig.channel[i].channelIndex             # <<<<<<<<<<<<<<
 *         ch["channelMask"]            = driverConfig.channel[i].channelMask
 *         ch["channelCapabilities"]    = driverConfig.channel[i].channelCapabilities
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).channelIndex); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_channelIndex, __pyx_t_3) < 0))) __PYX_ERR(0, 730, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":731
 *         ch["configError"]            = driverConfig.channel[i].configError
 *         ch["channelIndex"]           = driverConfig.channel[i].channelIndex
 *         ch["channelMask"]            = driverConfig.channel[i].channelMask             # <<<<<<<<<<<<<<
 *         ch["channelCapabilities"]    = driverConfig.channel[i].channelCapabilities
 *         ch["channelBusCapabilities"] = driverConfig.channel[i].channelBusCapabilities
 */
    __pyx_t_3 = __Pyx_PyInt_From_XLuint64((__pyx_v_driverConfig.channel[__pyx_v_i]).channelMask); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_channelMask, __pyx_t_3) < 0))) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":732
 *         ch["channelIndex"]           = driverConfig.channel[i].channelIndex
 *         ch["channelMask"]            = driverConfig.channel[i].channelMask
 *         ch["channelCapabilities"]    = driverConfig.channel[i].channelCapabilities             # <<<<<<<<<<<<<<
 *         ch["channelBusCapabilities"] = driverConfig.channel[i].channelBusCapabilities
 *         ch["isOnBus"]                = driverConfig.channel[i].isOnBus
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).channelCapabilities); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_channelCapabilities, __pyx_t_3) < 0))) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":733
 *         ch["channelMask"]            = driverConfig.channel[i].channelMask
 *         ch["channelCapabilities"]    = driverConfig.channel[i].channelCapabilities
 *         ch["channelBusCapabilities"] = driverConfig.channel[i].channelBusCapabilities             # <<<<<<<<<<<<<<
 *         ch["isOnBus"]                = driverConfig.channel[i].isOnBus
 *         ch["connectedBusType"]       = driverConfig.channel[i].connectedBusType
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).channelBusCapabilities); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_channelBusCapabilities, __pyx_t_3) < 0))) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":734
 *         ch["channelCapabilities"]    = driverConfig.channel[i].channelCapabilities
 *         ch["channelBusCapabilities"] = driverConfig.channel[i].channelBusCapabilities
 *         ch["isOnBus"]                = driverConfig.channel[i].isOnBus             # <<<<<<<<<<<<<<
 *         ch["connectedBusType"]       = driverConfig.channel[i].connectedBusType
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).isOnBus); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_isOnBus, __pyx_t_3) < 0))) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":735
 *         ch["channelBusCapabilities"] = driverConfig.channel[i].channelBusCapabilities
 *         ch["isOnBus"]                = driverConfig.channel[i].isOnBus
 *         ch["connectedBusType"]       = driverConfig.channel[i].connectedBusType             # <<<<<<<<<<<<<<
 * 
 *         busParams = {}
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).connectedBusType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_connectedBusType, __pyx_t_3) < 0))) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":737
 *         ch["connectedBusType"]       = driverConfig.channel[i].connectedBusType
 * 
 *         busParams = {}             # <<<<<<<<<<<<<<
 *         busParams["busType"] = driverConfig.channel[i].busParams.busType
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_busParams, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "vxlapi.pyx":738
 * 
 *         busParams = {}
 *         busParams["busType"] = driverConfig.channel[i].busParams.busType             # <<<<<<<<<<<<<<
 * 
 *         data = {}
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.busType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_busParams, __pyx_n_s_busType, __pyx_t_3) < 0))) __PYX_ERR(0, 738, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":740
 *         busParams["busType"] = driverConfig.channel[i].busParams.busType
 * 
 *         data = {}             # <<<<<<<<<<<<<<
 *         if busParams["busType"]   == XL_BUS_TYPE_NONE:
 *             pass
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_data, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "vxlapi.pyx":741
 * 
 *         data = {}
 *         if busParams["busType"]   == XL_BUS_TYPE_NONE:             # <<<<<<<<<<<<<<
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_BUS_TYPE_NONE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":743
 *         if busParams["busType"]   == XL_BUS_TYPE_NONE:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:             # <<<<<<<<<<<<<<
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:
 *                 canFD = {}
 */
    __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_BUS_TYPE_CAN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_9) {

      /* "vxlapi.pyx":744
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:             # <<<<<<<<<<<<<<
 *                 canFD = {}
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate
 */
      __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.canOpMode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CANFD); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 744, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 744, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {

        /* "vxlapi.pyx":745
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:
 *                 canFD = {}             # <<<<<<<<<<<<<<
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate
 *                 canFD["sjwAbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwAbr
 */
        __pyx_t_8 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 745, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_XDECREF_SET(__pyx_v_canFD, ((PyObject*)__pyx_t_8));
        __pyx_t_8 = 0;

        /* "vxlapi.pyx":746
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:
 *                 canFD = {}
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate             # <<<<<<<<<<<<<<
 *                 canFD["sjwAbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwAbr
 *                 canFD["tseg1Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Abr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.arbitrationBitRate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_arbitrationBitRate, __pyx_t_8) < 0))) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":747
 *                 canFD = {}
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate
 *                 canFD["sjwAbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwAbr             # <<<<<<<<<<<<<<
 *                 canFD["tseg1Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Abr
 *                 canFD["tseg2Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Abr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.sjwAbr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 747, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_sjwAbr, __pyx_t_8) < 0))) __PYX_ERR(0, 747, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":748
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate
 *                 canFD["sjwAbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwAbr
 *                 canFD["tseg1Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Abr             # <<<<<<<<<<<<<<
 *                 canFD["tseg2Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Abr
 *                 canFD["samAbr"]             = driverConfig.channel[i].busParams.data.canFD.samAbr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.tseg1Abr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_tseg1Abr, __pyx_t_8) < 0))) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":749
 *                 canFD["sjwAbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwAbr
 *                 canFD["tseg1Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Abr
 *                 canFD["tseg2Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Abr             # <<<<<<<<<<<<<<
 *                 canFD["samAbr"]             = driverConfig.channel[i].busParams.data.canFD.samAbr
 *                 canFD["outputMode"]         = driverConfig.channel[i].busParams.data.canFD.outputMode
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.tseg2Abr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_tseg2Abr, __pyx_t_8) < 0))) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":750
 *                 canFD["tseg1Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Abr
 *                 canFD["tseg2Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Abr
 *                 canFD["samAbr"]             = driverConfig.channel[i].busParams.data.canFD.samAbr             # <<<<<<<<<<<<<<
 *                 canFD["outputMode"]         = driverConfig.channel[i].busParams.data.canFD.outputMode
 *                 canFD["sjwDbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwDbr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.samAbr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 750, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_samAbr, __pyx_t_8) < 0))) __PYX_ERR(0, 750, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":751
 *                 canFD["tseg2Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Abr
 *                 canFD["samAbr"]             = driverConfig.channel[i].busParams.data.canFD.samAbr
 *                 canFD["outputMode"]         = driverConfig.channel[i].busParams.data.canFD.outputMode             # <<<<<<<<<<<<<<
 *                 canFD["sjwDbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwDbr
 *                 canFD["tseg1Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Dbr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.outputMode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 751, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_outputMode, __pyx_t_8) < 0))) __PYX_ERR(0, 751, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":752
 *                 canFD["samAbr"]             = driverConfig.channel[i].busParams.data.canFD.samAbr
 *                 canFD["outputMode"]         = driverConfig.channel[i].busParams.data.canFD.outputMode
 *                 canFD["sjwDbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwDbr             # <<<<<<<<<<<<<<
 *                 canFD["tseg1Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Dbr
 *                 canFD["tseg2Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Dbr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.sjwDbr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 752, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_sjwDbr, __pyx_t_8) < 0))) __PYX_ERR(0, 752, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":753
 *                 canFD["outputMode"]         = driverConfig.channel[i].busParams.data.canFD.outputMode
 *                 canFD["sjwDbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwDbr
 *                 canFD["tseg1Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Dbr             # <<<<<<<<<<<<<<
 *                 canFD["tseg2Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Dbr
 *                 canFD["dataBitRate"]        = driverConfig.channel[i].busParams.data.canFD.dataBitRate
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.tseg1Dbr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 753, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_tseg1Dbr, __pyx_t_8) < 0))) __PYX_ERR(0, 753, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":754
 *                 canFD["sjwDbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwDbr
 *                 canFD["tseg1Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Dbr
 *                 canFD["tseg2Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Dbr             # <<<<<<<<<<<<<<
 *                 canFD["dataBitRate"]        = driverConfig.channel[i].busParams.data.canFD.dataBitRate
 *                 canFD["canOpMode"]          = driverConfig.channel[i].busParams.data.canFD.canOpMode
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.tseg2Dbr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_tseg2Dbr, __pyx_t_8) < 0))) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":755
 *                 canFD["tseg1Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Dbr
 *                 canFD["tseg2Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Dbr
 *                 canFD["dataBitRate"]        = driverConfig.channel[i].busParams.data.canFD.dataBitRate             # <<<<<<<<<<<<<<
 *                 canFD["canOpMode"]          = driverConfig.channel[i].busParams.data.canFD.canOpMode
 *                 data["canFD"] = canFD
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.dataBitRate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 755, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_dataBitRate, __pyx_t_8) < 0))) __PYX_ERR(0, 755, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":756
 *                 canFD["tseg2Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Dbr
 *                 canFD["dataBitRate"]        = driverConfig.channel[i].busParams.data.canFD.dataBitRate
 *                 canFD["canOpMode"]          = driverConfig.channel[i].busParams.data.canFD.canOpMode             # <<<<<<<<<<<<<<
 *                 data["canFD"] = canFD
 *             else:
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.canOpMode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 756, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_canOpMode, __pyx_t_8) < 0))) __PYX_ERR(0, 756, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":757
 *                 canFD["dataBitRate"]        = driverConfig.channel[i].busParams.data.canFD.dataBitRate
 *                 canFD["canOpMode"]          = driverConfig.channel[i].busParams.data.canFD.canOpMode
 *                 data["canFD"] = canFD             # <<<<<<<<<<<<<<
 *             else:
 *                 can = {}
 */
        if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_canFD, __pyx_v_canFD) < 0))) __PYX_ERR(0, 757, __pyx_L1_error)

        /* "vxlapi.pyx":744
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:             # <<<<<<<<<<<<<<
 *                 canFD = {}
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate
 */
        goto __pyx_L8;
      }

      /* "vxlapi.pyx":759
 *                 data["canFD"] = canFD
 *             else:
 *                 can = {}             # <<<<<<<<<<<<<<
 *                 can["bitRate"]    = driverConfig.channel[i].busParams.data.can.bitRate
 *                 can["sjw"]        = driverConfig.channel[i].busParams.data.can.sjw
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_XDECREF_SET(__pyx_v_can, ((PyObject*)__pyx_t_8));
        __pyx_t_8 = 0;

        /* "vxlapi.pyx":760
 *             else:
 *                 can = {}
 *                 can["bitRate"]    = driverConfig.channel[i].busParams.data.can.bitRate             # <<<<<<<<<<<<<<
 *                 can["sjw"]        = driverConfig.channel[i].busParams.data.can.sjw
 *                 can["tseg1"]      = driverConfig.channel[i].busParams.data.can.tseg1
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.bitRate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 760, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_bitRate, __pyx_t_8) < 0))) __PYX_ERR(0, 760, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":761
 *                 can = {}
 *                 can["bitRate"]    = driverConfig.channel[i].busParams.data.can.bitRate
 *                 can["sjw"]        = driverConfig.channel[i].busParams.data.can.sjw             # <<<<<<<<<<<<<<
 *                 can["tseg1"]      = driverConfig.channel[i].busParams.data.can.tseg1
 *                 can["tseg2"]      = driverConfig.channel[i].busParams.data.can.tseg2
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.sjw); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_sjw, __pyx_t_8) < 0))) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":762
 *                 can["bitRate"]    = driverConfig.channel[i].busParams.data.can.bitRate
 *                 can["sjw"]        = driverConfig.channel[i].busParams.data.can.sjw
 *                 can["tseg1"]      = driverConfig.channel[i].busParams.data.can.tseg1             # <<<<<<<<<<<<<<
 *                 can["tseg2"]      = driverConfig.channel[i].busParams.data.can.tseg2
 *                 can["sam"]        = driverConfig.channel[i].busParams.data.can.sam
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.tseg1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_tseg1, __pyx_t_8) < 0))) __PYX_ERR(0, 762, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":763
 *                 can["sjw"]        = driverConfig.channel[i].busParams.data.can.sjw
 *                 can["tseg1"]      = driverConfig.channel[i].busParams.data.can.tseg1
 *                 can["tseg2"]      = driverConfig.channel[i].busParams.data.can.tseg2             # <<<<<<<<<<<<<<
 *                 can["sam"]        = driverConfig.channel[i].busParams.data.can.sam
 *                 can["outputMode"] = driverConfig.channel[i].busParams.data.can.outputMode
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.tseg2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 763, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_tseg2, __pyx_t_8) < 0))) __PYX_ERR(0, 763, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":764
 *                 can["tseg1"]      = driverConfig.channel[i].busParams.data.can.tseg1
 *                 can["tseg2"]      = driverConfig.channel[i].busParams.data.can.tseg2
 *                 can["sam"]        = driverConfig.channel[i].busParams.data.can.sam             # <<<<<<<<<<<<<<
 *                 can["outputMode"] = driverConfig.channel[i].busParams.data.can.outputMode
 *                 can["reserved1[7]"]= bytearray([driverConfig.channel[i].busParams.data.can.reserved1[j] for j in range(7)])
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.sam); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 764, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_sam, __pyx_t_8) < 0))) __PYX_ERR(0, 764, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":765
 *                 can["tseg2"]      = driverConfig.channel[i].busParams.data.can.tseg2
 *                 can["sam"]        = driverConfig.channel[i].busParams.data.can.sam
 *                 can["outputMode"] = driverConfig.channel[i].busParams.data.can.outputMode             # <<<<<<<<<<<<<<
 *                 can["reserved1[7]"]= bytearray([driverConfig.channel[i].busParams.data.can.reserved1[j] for j in range(7)])
 *                 can["canOpMode"]  = driverConfig.channel[i].busParams.data.can.canOpMode
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.outputMode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 765, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_outputMode, __pyx_t_8) < 0))) __PYX_ERR(0, 765, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":766
 *                 can["sam"]        = driverConfig.channel[i].busParams.data.can.sam
 *                 can["outputMode"] = driverConfig.channel[i].busParams.data.can.outputMode
 *                 can["reserved1[7]"]= bytearray([driverConfig.channel[i].busParams.data.can.reserved1[j] for j in range(7)])             # <<<<<<<<<<<<<<
 *                 can["canOpMode"]  = driverConfig.channel[i].busParams.data.can.canOpMode
 *                 data["can"] = can
 */
        { /* enter inner scope */
          __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 766, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          for (__pyx_t_2 = 0; __pyx_t_2 < 7; __pyx_t_2+=1) {
            __pyx_8genexpr2__pyx_v_j = __pyx_t_2;
            __pyx_t_1 = __Pyx_PyInt_From_unsigned_char(((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.reserved1[__pyx_8genexpr2__pyx_v_j])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 766, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 766, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
        } /* exit inner scope */
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_kp_s_reserved1_7, __pyx_t_1) < 0))) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":767
 *                 can["outputMode"] = driverConfig.channel[i].busParams.data.can.outputMode
 *                 can["reserved1[7]"]= bytearray([driverConfig.channel[i].busParams.data.can.reserved1[j] for j in range(7)])
 *                 can["canOpMode"]  = driverConfig.channel[i].busParams.data.can.canOpMode             # <<<<<<<<<<<<<<
 *                 data["can"] = can
 *         elif busParams["busType"] == XL_BUS_TYPE_LIN:
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.canOpMode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 767, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_canOpMode, __pyx_t_1) < 0))) __PYX_ERR(0, 767, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":768
 *                 can["reserved1[7]"]= bytearray([driverConfig.channel[i].busParams.data.can.reserved1[j] for j in range(7)])
 *                 can["canOpMode"]  = driverConfig.channel[i].busParams.data.can.canOpMode
 *                 data["can"] = can             # <<<<<<<<<<<<<<
 *         elif busParams["busType"] == XL_BUS_TYPE_LIN:
 *             pass
 */
        if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_can, __pyx_v_can) < 0))) __PYX_ERR(0, 768, __pyx_L1_error)
      }
      __pyx_L8:;

      /* "vxlapi.pyx":743
 *         if busParams["busType"]   == XL_BUS_TYPE_NONE:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:             # <<<<<<<<<<<<<<
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:
 *                 canFD = {}
 */
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":769
 *                 can["canOpMode"]  = driverConfig.channel[i].busParams.data.can.canOpMode
 *                 data["can"] = can
 *         elif busParams["busType"] == XL_BUS_TYPE_LIN:             # <<<<<<<<<<<<<<
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_FLEXRAY:
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_LIN); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":771
 *         elif busParams["busType"] == XL_BUS_TYPE_LIN:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_FLEXRAY:             # <<<<<<<<<<<<<<
 *             flexray = {}
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_FLEXRAY); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {

      /* "vxlapi.pyx":772
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_FLEXRAY:
 *             flexray = {}             # <<<<<<<<<<<<<<
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status
 *             flexray["cfgMode"]  = driverConfig.channel[i].busParams.data.flexray.cfgMode
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_flexray, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "vxlapi.pyx":773
 *         elif busParams["busType"] == XL_BUS_TYPE_FLEXRAY:
 *             flexray = {}
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status             # <<<<<<<<<<<<<<
 *             flexray["cfgMode"]  = driverConfig.channel[i].busParams.data.flexray.cfgMode
 *             flexray["baudrate"] = driverConfig.channel[i].busParams.data.flexray.baudrate
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.flexray.status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_flexray, __pyx_n_s_status, __pyx_t_1) < 0))) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":774
 *             flexray = {}
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status
 *             flexray["cfgMode"]  = driverConfig.channel[i].busParams.data.flexray.cfgMode             # <<<<<<<<<<<<<<
 *             flexray["baudrate"] = driverConfig.channel[i].busParams.data.flexray.baudrate
 *             data["flexray"] = flexray
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.flexray.cfgMode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_flexray, __pyx_n_s_cfgMode, __pyx_t_1) < 0))) __PYX_ERR(0, 774, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":775
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status
 *             flexray["cfgMode"]  = driverConfig.channel[i].busParams.data.flexray.cfgMode
 *             flexray["baudrate"] = driverConfig.channel[i].busParams.data.flexray.baudrate             # <<<<<<<<<<<<<<
 *             data["flexray"] = flexray
 *         elif busParams["busType"] == XL_BUS_TYPE_AFDX:
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.flexray.baudrate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_flexray, __pyx_n_s_baudrate, __pyx_t_1) < 0))) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":776
 *             flexray["cfgMode"]  = driverConfig.channel[i].busParams.data.flexray.cfgMode
 *             flexray["baudrate"] = driverConfig.channel[i].busParams.data.flexray.baudrate
 *             data["flexray"] = flexray             # <<<<<<<<<<<<<<
 *         elif busParams["busType"] == XL_BUS_TYPE_AFDX:
 *             pass
 */
      if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_flexray, __pyx_v_flexray) < 0))) __PYX_ERR(0, 776, __pyx_L1_error)

      /* "vxlapi.pyx":771
 *         elif busParams["busType"] == XL_BUS_TYPE_LIN:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_FLEXRAY:             # <<<<<<<<<<<<<<
 *             flexray = {}
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status
 */
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":777
 *             flexray["baudrate"] = driverConfig.channel[i].busParams.data.flexray.baudrate
 *             data["flexray"] = flexray
 *         elif busParams["busType"] == XL_BUS_TYPE_AFDX:             # <<<<<<<<<<<<<<
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_MOST:
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_AFDX); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":779
 *         elif busParams["busType"] == XL_BUS_TYPE_AFDX:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_MOST:             # <<<<<<<<<<<<<<
 *             most = {}
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_MOST); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {

      /* "vxlapi.pyx":780
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_MOST:
 *             most = {}             # <<<<<<<<<<<<<<
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade
 *             most["compatibleSpeedGrade"] = driverConfig.channel[i].busParams.data.most.compatibleSpeedGrade
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_most, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "vxlapi.pyx":781
 *         elif busParams["busType"] == XL_BUS_TYPE_MOST:
 *             most = {}
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade             # <<<<<<<<<<<<<<
 *             most["compatibleSpeedGrade"] = driverConfig.channel[i].busParams.data.most.compatibleSpeedGrade
 *             most["inicFwVersion"]        = driverConfig.channel[i].busParams.data.most.inicFwVersion
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.most.activeSpeedGrade); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_most, __pyx_n_s_activeSpeedGrade, __pyx_t_1) < 0))) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":782
 *             most = {}
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade
 *             most["compatibleSpeedGrade"] = driverConfig.channel[i].busParams.data.most.compatibleSpeedGrade             # <<<<<<<<<<<<<<
 *             most["inicFwVersion"]        = driverConfig.channel[i].busParams.data.most.inicFwVersion
 *             data["most"] = most
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.most.compatibleSpeedGrade); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_most, __pyx_n_s_compatibleSpeedGrade, __pyx_t_1) < 0))) __PYX_ERR(0, 782, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":783
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade
 *             most["compatibleSpeedGrade"] = driverConfig.channel[i].busParams.data.most.compatibleSpeedGrade
 *             most["inicFwVersion"]        = driverConfig.channel[i].busParams.data.most.inicFwVersion             # <<<<<<<<<<<<<<
 *             data["most"] = most
 *         elif busParams["busType"] == XL_BUS_TYPE_DAIO:
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.most.inicFwVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_most, __pyx_n_s_inicFwVersion, __pyx_t_1) < 0))) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":784
 *             most["compatibleSpeedGrade"] = driverConfig.channel[i].busParams.data.most.compatibleSpeedGrade
 *             most["inicFwVersion"]        = driverConfig.channel[i].busParams.data.most.inicFwVersion
 *             data["most"] = most             # <<<<<<<<<<<<<<
 *         elif busParams["busType"] == XL_BUS_TYPE_DAIO:
 *             pass
 */
      if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_most, __pyx_v_most) < 0))) __PYX_ERR(0, 784, __pyx_L1_error)

      /* "vxlapi.pyx":779
 *         elif busParams["busType"] == XL_BUS_TYPE_AFDX:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_MOST:             # <<<<<<<<<<<<<<
 *             most = {}
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade
 */
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":785
 *             most["inicFwVersion"]        = driverConfig.channel[i].busParams.data.most.inicFwVersion
 *             data["most"] = most
 *         elif busParams["busType"] == XL_BUS_TYPE_DAIO:             # <<<<<<<<<<<<<<
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_J1708:
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_DAIO); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":787
 *         elif busParams["busType"] == XL_BUS_TYPE_DAIO:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_J1708:             # <<<<<<<<<<<<<<
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_ETHERNET:
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_J1708); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":789
 *         elif busParams["busType"] == XL_BUS_TYPE_J1708:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_ETHERNET:             # <<<<<<<<<<<<<<
 *             ethernet = {}
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_ETHERNET); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_9) {

      /* "vxlapi.pyx":790
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_ETHERNET:
 *             ethernet = {}             # <<<<<<<<<<<<<<
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])
 *             ethernet["connector"]       = driverConfig.channel[i].busParams.data.ethernet.connector
 */
      __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_ethernet, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "vxlapi.pyx":791
 *         elif busParams["busType"] == XL_BUS_TYPE_ETHERNET:
 *             ethernet = {}
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])             # <<<<<<<<<<<<<<
 *             ethernet["connector"]       = driverConfig.channel[i].busParams.data.ethernet.connector
 *             ethernet["phy"]             = driverConfig.channel[i].busParams.data.ethernet.phy
 */
      { /* enter inner scope */
        __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        for (__pyx_t_2 = 0; __pyx_t_2 < 6; __pyx_t_2+=1) {
          __pyx_8genexpr3__pyx_v_j = __pyx_t_2;
          __pyx_t_8 = __Pyx_PyInt_From_unsigned_char(((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.macAddr[__pyx_8genexpr3__pyx_v_j])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 791, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 791, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 791, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_kp_s_macAddr_6, __pyx_t_8) < 0))) __PYX_ERR(0, 791, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":792
 *             ethernet = {}
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])
 *             ethernet["connector"]       = driverConfig.channel[i].busParams.data.ethernet.connector             # <<<<<<<<<<<<<<
 *             ethernet["phy"]             = driverConfig.channel[i].busParams.data.ethernet.phy
 *             ethernet["link"]            = driverConfig.channel[i].busParams.data.ethernet.link
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.connector); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 792, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_connector, __pyx_t_8) < 0))) __PYX_ERR(0, 792, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":793
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])
 *             ethernet["connector"]       = driverConfig.channel[i].busParams.data.ethernet.connector
 *             ethernet["phy"]             = driverConfig.channel[i].busParams.data.ethernet.phy             # <<<<<<<<<<<<<<
 *             ethernet["link"]            = driverConfig.channel[i].busParams.data.ethernet.link
 *             ethernet["speed"]           = driverConfig.channel[i].busParams.data.ethernet.speed
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.phy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 793, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_phy, __pyx_t_8) < 0))) __PYX_ERR(0, 793, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":794
 *             ethernet["connector"]       = driverConfig.channel[i].busParams.data.ethernet.connector
 *             ethernet["phy"]             = driverConfig.channel[i].busParams.data.ethernet.phy
 *             ethernet["link"]            = driverConfig.channel[i].busParams.data.ethernet.link             # <<<<<<<<<<<<<<
 *             ethernet["speed"]           = driverConfig.channel[i].busParams.data.ethernet.speed
 *             ethernet["clockMode"]       = driverConfig.channel[i].busParams.data.ethernet.clockMode
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.link); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 794, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_link, __pyx_t_8) < 0))) __PYX_ERR(0, 794, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":795
 *             ethernet["phy"]             = driverConfig.channel[i].busParams.data.ethernet.phy
 *             ethernet["link"]            = driverConfig.channel[i].busParams.data.ethernet.link
 *             ethernet["speed"]           = driverConfig.channel[i].busParams.data.ethernet.speed             # <<<<<<<<<<<<<<
 *             ethernet["clockMode"]       = driverConfig.channel[i].busParams.data.ethernet.clockMode
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.speed); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_speed, __pyx_t_8) < 0))) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":796
 *             ethernet["link"]            = driverConfig.channel[i].busParams.data.ethernet.link
 *             ethernet["speed"]           = driverConfig.channel[i].busParams.data.ethernet.speed
 *             ethernet["clockMode"]       = driverConfig.channel[i].busParams.data.ethernet.clockMode             # <<<<<<<<<<<<<<
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass
 *             data["ethernet"] = ethernet
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.clockMode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_clockMode, __pyx_t_8) < 0))) __PYX_ERR(0, 796, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":797
 *             ethernet["speed"]           = driverConfig.channel[i].busParams.data.ethernet.speed
 *             ethernet["clockMode"]       = driverConfig.channel[i].busParams.data.ethernet.clockMode
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass             # <<<<<<<<<<<<<<
 *             data["ethernet"] = ethernet
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.bypass); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 797, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_bypass, __pyx_t_8) < 0))) __PYX_ERR(0, 797, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":798
 *             ethernet["clockMode"]       = driverConfig.channel[i].busParams.data.ethernet.clockMode
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass
 *             data["ethernet"] = ethernet             # <<<<<<<<<<<<<<
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:
 *             a429 = {}
 */
      if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_ethernet, __pyx_v_ethernet) < 0))) __PYX_ERR(0, 798, __pyx_L1_error)

      /* "vxlapi.pyx":789
 *         elif busParams["busType"] == XL_BUS_TYPE_J1708:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_ETHERNET:             # <<<<<<<<<<<<<<
 *             ethernet = {}
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])
 */
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":799
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass
 *             data["ethernet"] = ethernet
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:             # <<<<<<<<<<<<<<
 *             a429 = {}
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1
 */
    __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_XL_BUS_TYPE_A429); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {

      /* "vxlapi.pyx":800
 *             data["ethernet"] = ethernet
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:
 *             a429 = {}             # <<<<<<<<<<<<<<
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_a429, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "vxlapi.pyx":801
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:
 *             a429 = {}
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1             # <<<<<<<<<<<<<<
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection
 *             dir = {}
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.res1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_a429, __pyx_n_s_res1, __pyx_t_1) < 0))) __PYX_ERR(0, 801, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":802
 *             a429 = {}
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection             # <<<<<<<<<<<<<<
 *             dir = {}
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.channelDirection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_a429, __pyx_n_s_channelDirection, __pyx_t_1) < 0))) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":803
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection
 *             dir = {}             # <<<<<<<<<<<<<<
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_dir, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "vxlapi.pyx":804
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection
 *             dir = {}
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:             # <<<<<<<<<<<<<<
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_a429, __pyx_n_s_channelDirection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_XL_A429_MSG_CHANNEL_DIR_TX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {

        /* "vxlapi.pyx":805
 *             dir = {}
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate             # <<<<<<<<<<<<<<
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.tx.bitrate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 805, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_bitrate, __pyx_t_8) < 0))) __PYX_ERR(0, 805, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":806
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity             # <<<<<<<<<<<<<<
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.tx.parity); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_parity, __pyx_t_8) < 0))) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":807
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap             # <<<<<<<<<<<<<<
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.tx.minGap); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 807, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_minGap, __pyx_t_8) < 0))) __PYX_ERR(0, 807, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":804
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection
 *             dir = {}
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:             # <<<<<<<<<<<<<<
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 */
        goto __pyx_L13;
      }

      /* "vxlapi.pyx":808
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:             # <<<<<<<<<<<<<<
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.channelDirection); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_XL_A429_MSG_CHANNEL_DIR_RX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_9) {

        /* "vxlapi.pyx":809
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate             # <<<<<<<<<<<<<<
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate
 *                 dir["maxBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.maxBitrate
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.bitrate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_bitrate, __pyx_t_1) < 0))) __PYX_ERR(0, 809, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":810
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate             # <<<<<<<<<<<<<<
 *                 dir["maxBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.maxBitrate
 *                 dir["parity"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.parity
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.minBitrate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_minBitrate, __pyx_t_1) < 0))) __PYX_ERR(0, 810, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":811
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate
 *                 dir["maxBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.maxBitrate             # <<<<<<<<<<<<<<
 *                 dir["parity"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.parity
 *                 dir["minGap"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.minGap
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.maxBitrate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_maxBitrate, __pyx_t_1) < 0))) __PYX_ERR(0, 811, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":812
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate
 *                 dir["maxBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.maxBitrate
 *                 dir["parity"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.parity             # <<<<<<<<<<<<<<
 *                 dir["minGap"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.minGap
 *                 dir["autoBaudrate"]= driverConfig.channel[i].busParams.data.a429.dir.rx.autoBaudrate
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.parity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_parity, __pyx_t_1) < 0))) __PYX_ERR(0, 812, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":813
 *                 dir["maxBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.maxBitrate
 *                 dir["parity"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.parity
 *                 dir["minGap"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.minGap             # <<<<<<<<<<<<<<
 *                 dir["autoBaudrate"]= driverConfig.channel[i].busParams.data.a429.dir.rx.autoBaudrate
 *             else:
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.minGap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_minGap, __pyx_t_1) < 0))) __PYX_ERR(0, 813, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":814
 *                 dir["parity"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.parity
 *                 dir["minGap"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.minGap
 *                 dir["autoBaudrate"]= driverConfig.channel[i].busParams.data.a429.dir.rx.autoBaudrate             # <<<<<<<<<<<<<<
 *             else:
 *                 pass
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.autoBaudrate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_autoBaudrate, __pyx_t_1) < 0))) __PYX_ERR(0, 814, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":808
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:             # <<<<<<<<<<<<<<
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate
 */
        goto __pyx_L13;
      }

      /* "vxlapi.pyx":816
 *                 dir["autoBaudrate"]= driverConfig.channel[i].busParams.data.a429.dir.rx.autoBaudrate
 *             else:
 *                 pass             # <<<<<<<<<<<<<<
 *             dir["raw[24]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(24)])
 *             a429["dir"]  = dir
 */
      /*else*/ {
      }
      __pyx_L13:;

      /* "vxlapi.pyx":817
 *             else:
 *                 pass
 *             dir["raw[24]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(24)])             # <<<<<<<<<<<<<<
 *             a429["dir"]  = dir
 *             data["a429"] = a429
 */
      { /* enter inner scope */
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        for (__pyx_t_2 = 0; __pyx_t_2 < 24; __pyx_t_2+=1) {
          __pyx_8genexpr4__pyx_v_j = __pyx_t_2;
          __pyx_t_3 = __Pyx_PyInt_From_unsigned_char(((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.raw[__pyx_8genexpr4__pyx_v_j])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 817, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_kp_s_raw_24, __pyx_t_3) < 0))) __PYX_ERR(0, 817, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "vxlapi.pyx":818
 *                 pass
 *             dir["raw[24]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(24)])
 *             a429["dir"]  = dir             # <<<<<<<<<<<<<<
 *             data["a429"] = a429
 *         else:
 */
      if (unlikely((PyDict_SetItem(__pyx_v_a429, __pyx_n_s_dir, __pyx_v_dir) < 0))) __PYX_ERR(0, 818, __pyx_L1_error)

      /* "vxlapi.pyx":819
 *             dir["raw[24]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(24)])
 *             a429["dir"]  = dir
 *             data["a429"] = a429             # <<<<<<<<<<<<<<
 *         else:
 *             pass
 */
      if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_a429, __pyx_v_a429) < 0))) __PYX_ERR(0, 819, __pyx_L1_error)

      /* "vxlapi.pyx":799
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass
 *             data["ethernet"] = ethernet
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:             # <<<<<<<<<<<<<<
 *             a429 = {}
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1
 */
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":821
 *             data["a429"] = a429
 *         else:
 *             pass             # <<<<<<<<<<<<<<
 * 
 *         data["raw[28]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(28)])
 */
    /*else*/ {
    }
    __pyx_L7:;

    /* "vxlapi.pyx":823
 *             pass
 * 
 *         data["raw[28]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(28)])             # <<<<<<<<<<<<<<
 *         busParams["data"] = data
 *         ch["busParams"] = busParams
 */
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      for (__pyx_t_2 = 0; __pyx_t_2 < 28; __pyx_t_2+=1) {
        __pyx_8genexpr5__pyx_v_j = __pyx_t_2;
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_char(((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.raw[__pyx_8genexpr5__pyx_v_j])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    } /* exit inner scope */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_kp_s_raw_28, __pyx_t_1) < 0))) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":824
 * 
 *         data["raw[28]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(28)])
 *         busParams["data"] = data             # <<<<<<<<<<<<<<
 *         ch["busParams"] = busParams
 * 
 */
    if (unlikely((PyDict_SetItem(__pyx_v_busParams, __pyx_n_s_data, __pyx_v_data) < 0))) __PYX_ERR(0, 824, __pyx_L1_error)

    /* "vxlapi.pyx":825
 *         data["raw[28]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(28)])
 *         busParams["data"] = data
 *         ch["busParams"] = busParams             # <<<<<<<<<<<<<<
 * 
 *         ch["_doNotUse"]                     = driverConfig.channel[i]._doNotUse
 */
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_busParams, __pyx_v_busParams) < 0))) __PYX_ERR(0, 825, __pyx_L1_error)

    /* "vxlapi.pyx":827
 *         ch["busParams"] = busParams
 * 
 *         ch["_doNotUse"]                     = driverConfig.channel[i]._doNotUse             # <<<<<<<<<<<<<<
 *         ch["driverVersion"]                 = driverConfig.channel[i].driverVersion
 *         ch["interfaceVersion"]              = driverConfig.channel[i].interfaceVersion
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i])._doNotUse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_doNotUse, __pyx_t_1) < 0))) __PYX_ERR(0, 827, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":828
 * 
 *         ch["_doNotUse"]                     = driverConfig.channel[i]._doNotUse
 *         ch["driverVersion"]                 = driverConfig.channel[i].driverVersion             # <<<<<<<<<<<<<<
 *         ch["interfaceVersion"]              = driverConfig.channel[i].interfaceVersion
 *         ch["raw_data[10]"]                  = [driverConfig.channel[i].raw_data[j] for j in range(10)]
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).driverVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_driverVersion, __pyx_t_1) < 0))) __PYX_ERR(0, 828, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":829
 *         ch["_doNotUse"]                     = driverConfig.channel[i]._doNotUse
 *         ch["driverVersion"]                 = driverConfig.channel[i].driverVersion
 *         ch["interfaceVersion"]              = driverConfig.channel[i].interfaceVersion             # <<<<<<<<<<<<<<
 *         ch["raw_data[10]"]                  = [driverConfig.channel[i].raw_data[j] for j in range(10)]
 *         ch["serialNumber"]                  = driverConfig.channel[i].serialNumber
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).interfaceVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_interfaceVersion, __pyx_t_1) < 0))) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":830
 *         ch["driverVersion"]                 = driverConfig.channel[i].driverVersion
 *         ch["interfaceVersion"]              = driverConfig.channel[i].interfaceVersion
 *         ch["raw_data[10]"]                  = [driverConfig.channel[i].raw_data[j] for j in range(10)]             # <<<<<<<<<<<<<<
 *         ch["serialNumber"]                  = driverConfig.channel[i].serialNumber
 *         ch["articleNumber"]                 = driverConfig.channel[i].articleNumber
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      for (__pyx_t_2 = 0; __pyx_t_2 < 10; __pyx_t_2+=1) {
        __pyx_8genexpr6__pyx_v_j = __pyx_t_2;
        __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(((__pyx_v_driverConfig.channel[__pyx_v_i]).raw_data[__pyx_8genexpr6__pyx_v_j])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 830, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 830, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    } /* exit inner scope */
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_kp_s_raw_data_10, __pyx_t_1) < 0))) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":831
 *         ch["interfaceVersion"]              = driverConfig.channel[i].interfaceVersion
 *         ch["raw_data[10]"]                  = [driverConfig.channel[i].raw_data[j] for j in range(10)]
 *         ch["serialNumber"]                  = driverConfig.channel[i].serialNumber             # <<<<<<<<<<<<<<
 *         ch["articleNumber"]                 = driverConfig.channel[i].articleNumber
 *         ch["transceiverName"]               = bytes(driverConfig.channel[i].transceiverName)
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).serialNumber); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_serialNumber, __pyx_t_1) < 0))) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":832
 *         ch["raw_data[10]"]                  = [driverConfig.channel[i].raw_data[j] for j in range(10)]
 *         ch["serialNumber"]                  = driverConfig.channel[i].serialNumber
 *         ch["articleNumber"]                 = driverConfig.channel[i].articleNumber             # <<<<<<<<<<<<<<
 *         ch["transceiverName"]               = bytes(driverConfig.channel[i].transceiverName)
 *         ch["specialCabFlags"]               = driverConfig.channel[i].specialCabFlags
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).articleNumber); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_articleNumber, __pyx_t_1) < 0))) __PYX_ERR(0, 832, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":833
 *         ch["serialNumber"]                  = driverConfig.channel[i].serialNumber
 *         ch["articleNumber"]                 = driverConfig.channel[i].articleNumber
 *         ch["transceiverName"]               = bytes(driverConfig.channel[i].transceiverName)             # <<<<<<<<<<<<<<
 *         ch["specialCabFlags"]               = driverConfig.channel[i].specialCabFlags
 *         ch["dominantTimeout"]               = driverConfig.channel[i].dominantTimeout
 */
    __pyx_t_1 = __Pyx_PyObject_FromString((__pyx_v_driverConfig.channel[__pyx_v_i]).transceiverName); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_transceiverName, __pyx_t_3) < 0))) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":834
 *         ch["articleNumber"]                 = driverConfig.channel[i].articleNumber
 *         ch["transceiverName"]               = bytes(driverConfig.channel[i].transceiverName)
 *         ch["specialCabFlags"]               = driverConfig.channel[i].specialCabFlags             # <<<<<<<<<<<<<<
 *         ch["dominantTimeout"]               = driverConfig.channel[i].dominantTimeout
 *         ch["dominantRecessiveDelay"]        = driverConfig.channel[i].dominantRecessiveDelay
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).specialCabFlags); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 834, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_specialCabFlags, __pyx_t_3) < 0))) __PYX_ERR(0, 834, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":835
 *         ch["transceiverName"]               = bytes(driverConfig.channel[i].transceiverName)
 *         ch["specialCabFlags"]               = driverConfig.channel[i].specialCabFlags
 *         ch["dominantTimeout"]               = driverConfig.channel[i].dominantTimeout             # <<<<<<<<<<<<<<
 *         ch["dominantRecessiveDelay"]        = driverConfig.channel[i].dominantRecessiveDelay
 *         ch["recessiveDominantDelay"]        = driverConfig.channel[i].recessiveDominantDelay
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).dominantTimeout); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 835, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_dominantTimeout, __pyx_t_3) < 0))) __PYX_ERR(0, 835, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":836
 *         ch["specialCabFlags"]               = driverConfig.channel[i].specialCabFlags
 *         ch["dominantTimeout"]               = driverConfig.channel[i].dominantTimeout
 *         ch["dominantRecessiveDelay"]        = driverConfig.channel[i].dominantRecessiveDelay             # <<<<<<<<<<<<<<
 *         ch["recessiveDominantDelay"]        = driverConfig.channel[i].recessiveDominantDelay
 *         ch["connectionInfo"]                = driverConfig.channel[i].connectionInfo
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).dominantRecessiveDelay); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_dominantRecessiveDelay, __pyx_t_3) < 0))) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":837
 *         ch["dominantTimeout"]               = driverConfig.channel[i].dominantTimeout
 *         ch["dominantRecessiveDelay"]        = driverConfig.channel[i].dominantRecessiveDelay
 *         ch["recessiveDominantDelay"]        = driverConfig.channel[i].recessiveDominantDelay             # <<<<<<<<<<<<<<
 *         ch["connectionInfo"]                = driverConfig.channel[i].connectionInfo
 *         ch["currentlyAvailableTimestamps"]  = driverConfig.channel[i].currentlyAvailableTimestamps
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).recessiveDominantDelay); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_recessiveDominantDelay, __pyx_t_3) < 0))) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":838
 *         ch["dominantRecessiveDelay"]        = driverConfig.channel[i].dominantRecessiveDelay
 *         ch["recessiveDominantDelay"]        = driverConfig.channel[i].recessiveDominantDelay
 *         ch["connectionInfo"]                = driverConfig.channel[i].connectionInfo             # <<<<<<<<<<<<<<
 *         ch["currentlyAvailableTimestamps"]  = driverConfig.channel[i].currentlyAvailableTimestamps
 *         ch["minimalSupplyVoltage"]          = driverConfig.channel[i].minimalSupplyVoltage
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).connectionInfo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_connectionInfo, __pyx_t_3) < 0))) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":839
 *         ch["recessiveDominantDelay"]        = driverConfig.channel[i].recessiveDominantDelay
 *         ch["connectionInfo"]                = driverConfig.channel[i].connectionInfo
 *         ch["currentlyAvailableTimestamps"]  = driverConfig.channel[i].currentlyAvailableTimestamps             # <<<<<<<<<<<<<<
 *         ch["minimalSupplyVoltage"]          = driverConfig.channel[i].minimalSupplyVoltage
 *         ch["maximalSupplyVoltage"]          = driverConfig.channel[i].maximalSupplyVoltage
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).currentlyAvailableTimestamps); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_currentlyAvailableTimestamps, __pyx_t_3) < 0))) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":840
 *         ch["connectionInfo"]                = driverConfig.channel[i].connectionInfo
 *         ch["currentlyAvailableTimestamps"]  = driverConfig.channel[i].currentlyAvailableTimestamps
 *         ch["minimalSupplyVoltage"]          = driverConfig.channel[i].minimalSupplyVoltage             # <<<<<<<<<<<<<<
 *         ch["maximalSupplyVoltage"]          = driverConfig.channel[i].maximalSupplyVoltage
 *         ch["maximalBaudrate"]               = driverConfig.channel[i].maximalBaudrate
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).minimalSupplyVoltage); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_minimalSupplyVoltage, __pyx_t_3) < 0))) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":841
 *         ch["currentlyAvailableTimestamps"]  = driverConfig.channel[i].currentlyAvailableTimestamps
 *         ch["minimalSupplyVoltage"]          = driverConfig.channel[i].minimalSupplyVoltage
 *         ch["maximalSupplyVoltage"]          = driverConfig.channel[i].maximalSupplyVoltage             # <<<<<<<<<<<<<<
 *         ch["maximalBaudrate"]               = driverConfig.channel[i].maximalBaudrate
 *         ch["fpgaCoreCapabilities"]          = driverConfig.channel[i].fpgaCoreCapabilities
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).maximalSupplyVoltage); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_maximalSupplyVoltage, __pyx_t_3) < 0))) __PYX_ERR(0, 841, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":842
 *         ch["minimalSupplyVoltage"]          = driverConfig.channel[i].minimalSupplyVoltage
 *         ch["maximalSupplyVoltage"]          = driverConfig.channel[i].maximalSupplyVoltage
 *         ch["maximalBaudrate"]               = driverConfig.channel[i].maximalBaudrate             # <<<<<<<<<<<<<<
 *         ch["fpgaCoreCapabilities"]          = driverConfig.channel[i].fpgaCoreCapabilities
 *         ch["specialDeviceStatus"]           = driverConfig.channel[i].specialDeviceStatus
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).maximalBaudrate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_maximalBaudrate, __pyx_t_3) < 0))) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":843
 *         ch["maximalSupplyVoltage"]          = driverConfig.channel[i].maximalSupplyVoltage
 *         ch["maximalBaudrate"]               = driverConfig.channel[i].maximalBaudrate
 *         ch["fpgaCoreCapabilities"]          = driverConfig.channel[i].fpgaCoreCapabilities             # <<<<<<<<<<<<<<
 *         ch["specialDeviceStatus"]           = driverConfig.channel[i].specialDeviceStatus
 *         ch["channelBusActiveCapabilities"]  = driverConfig.channel[i].channelBusActiveCapabilities
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).fpgaCoreCapabilities); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_fpgaCoreCapabilities, __pyx_t_3) < 0))) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":844
 *         ch["maximalBaudrate"]               = driverConfig.channel[i].maximalBaudrate
 *         ch["fpgaCoreCapabilities"]          = driverConfig.channel[i].fpgaCoreCapabilities
 *         ch["specialDeviceStatus"]           = driverConfig.channel[i].specialDeviceStatus             # <<<<<<<<<<<<<<
 *         ch["channelBusActiveCapabilities"]  = driverConfig.channel[i].channelBusActiveCapabilities
 *         ch["breakOffset"]                   = driverConfig.channel[i].breakOffset
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).specialDeviceStatus); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_specialDeviceStatus, __pyx_t_3) < 0))) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":845
 *         ch["fpgaCoreCapabilities"]          = driverConfig.channel[i].fpgaCoreCapabilities
 *         ch["specialDeviceStatus"]           = driverConfig.channel[i].specialDeviceStatus
 *         ch["channelBusActiveCapabilities"]  = driverConfig.channel[i].channelBusActiveCapabilities             # <<<<<<<<<<<<<<
 *         ch["breakOffset"]                   = driverConfig.channel[i].breakOffset
 *         ch["delimiterOffset"]               = driverConfig.channel[i].delimiterOffset
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).channelBusActiveCapabilities); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_channelBusActiveCapabilities, __pyx_t_3) < 0))) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":846
 *         ch["specialDeviceStatus"]           = driverConfig.channel[i].specialDeviceStatus
 *         ch["channelBusActiveCapabilities"]  = driverConfig.channel[i].channelBusActiveCapabilities
 *         ch["breakOffset"]                   = driverConfig.channel[i].breakOffset             # <<<<<<<<<<<<<<
 *         ch["delimiterOffset"]               = driverConfig.channel[i].delimiterOffset
 *         ch["reserved[3]"]                      = bytearray([driverConfig.channel[i].reserved[j] for j in range(3)])
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).breakOffset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_breakOffset, __pyx_t_3) < 0))) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":847
 *         ch["channelBusActiveCapabilities"]  = driverConfig.channel[i].channelBusActiveCapabilities
 *         ch["breakOffset"]                   = driverConfig.channel[i].breakOffset
 *         ch["delimiterOffset"]               = driverConfig.channel[i].delimiterOffset             # <<<<<<<<<<<<<<
 *         ch["reserved[3]"]                      = bytearray([driverConfig.channel[i].reserved[j] for j in range(3)])
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).delimiterOffset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_delimiterOffset, __pyx_t_3) < 0))) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":848
 *         ch["breakOffset"]                   = driverConfig.channel[i].breakOffset
 *         ch["delimiterOffset"]               = driverConfig.channel[i].delimiterOffset
 *         ch["reserved[3]"]                      = bytearray([driverConfig.channel[i].reserved[j] for j in range(3)])             # <<<<<<<<<<<<<<
 * 
 * 
 */
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {
        __pyx_8genexpr7__pyx_v_j = __pyx_t_2;
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(((__pyx_v_driverConfig.channel[__pyx_v_i]).reserved[__pyx_8genexpr7__pyx_v_j])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 848, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    } /* exit inner scope */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_kp_s_reserved_3, __pyx_t_1) < 0))) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":854
 * 
 * 
 *         channel.append(ch)             # <<<<<<<<<<<<<<
 * 
 *     pDriverConfig["channel"] = channel
 */
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_channel, __pyx_v_ch); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 854, __pyx_L1_error)
  }

  /* "vxlapi.pyx":856
 *         channel.append(ch)
 * 
 *     pDriverConfig["channel"] = channel             # <<<<<<<<<<<<<<
 * 
 *     return status
 */
  if (unlikely(__pyx_v_pDriverConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 856, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_pDriverConfig, __pyx_n_s_channel, __pyx_v_channel) < 0))) __PYX_ERR(0, 856, __pyx_L1_error)

  /* "vxlapi.pyx":858
 *     pDriverConfig["channel"] = channel
 * 
 *     return status             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":709
 *     return xlSetApplConfig(appName, appChannel, pHwType[0], pHwIndex[0], pHwChannel[0], busType)
 * 
 * def GetDriverConfig(dict pDriverConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef XLdriverConfig driverConfig
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("vxlapi.GetDriverConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_channel);
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XDECREF(__pyx_v_busParams);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_canFD);
  __Pyx_XDECREF(__pyx_v_can);
  __Pyx_XDECREF(__pyx_v_flexray);
  __Pyx_XDECREF(__pyx_v_most);
  __Pyx_XDECREF(__pyx_v_ethernet);
  __Pyx_XDECREF(__pyx_v_a429);
  __Pyx_XDECREF(__pyx_v_dir);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":861
 * 
 * 
 * def GetRemoteDriverConfig(dict pDriverConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef XLdriverConfig driverConfig
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_75GetRemoteDriverConfig(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_75GetRemoteDriverConfig = {"GetRemoteDriverConfig", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_75GetRemoteDriverConfig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_75GetRemoteDriverConfig(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_pDriverConfig = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetRemoteDriverConfig (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pDriverConfig,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pDriverConfig)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 861, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetRemoteDriverConfig") < 0)) __PYX_ERR(0, 861, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_pDriverConfig = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetRemoteDriverConfig", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 861, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetRemoteDriverConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pDriverConfig), (&PyDict_Type), 1, "pDriverConfig", 1))) __PYX_ERR(0, 861, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_74GetRemoteDriverConfig(__pyx_self, __pyx_v_pDriverConfig);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_74GetRemoteDriverConfig(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pDriverConfig) {
  XLstatus __pyx_v_status;
  XLdriverConfig __pyx_v_driverConfig;
  PyObject *__pyx_v_channel = NULL;
  int __pyx_v_channelCount;
  int __pyx_v_i;
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_v_busParams = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_canFD = NULL;
  PyObject *__pyx_v_can = NULL;
  PyObject *__pyx_v_flexray = NULL;
  PyObject *__pyx_v_most = NULL;
  PyObject *__pyx_v_ethernet = NULL;
  PyObject *__pyx_v_a429 = NULL;
  PyObject *__pyx_v_dir = NULL;
  long __pyx_8genexpr8__pyx_v_i;
  long __pyx_8genexpr9__pyx_v_j;
  long __pyx_9genexpr10__pyx_v_j;
  long __pyx_9genexpr11__pyx_v_j;
  long __pyx_9genexpr12__pyx_v_j;
  long __pyx_9genexpr13__pyx_v_j;
  long __pyx_9genexpr14__pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetRemoteDriverConfig", 1);

  /* "vxlapi.pyx":865
 *     cdef XLdriverConfig driverConfig
 * 
 *     status = xlGetRemoteDriverConfig(&driverConfig)             # <<<<<<<<<<<<<<
 * 
 *     pDriverConfig["dllVersion"]   = driverConfig.dllVersion
 */
  __pyx_v_status = xlGetRemoteDriverConfig((&__pyx_v_driverConfig));

  /* "vxlapi.pyx":867
 *     status = xlGetRemoteDriverConfig(&driverConfig)
 * 
 *     pDriverConfig["dllVersion"]   = driverConfig.dllVersion             # <<<<<<<<<<<<<<
 *     pDriverConfig["channelCount"] = driverConfig.channelCount
 *     pDriverConfig["reserved[10]"] = [driverConfig.reserved[i] for i in range(10)]
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_driverConfig.dllVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pDriverConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 867, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_pDriverConfig, __pyx_n_s_dllVersion, __pyx_t_1) < 0))) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":868
 * 
 *     pDriverConfig["dllVersion"]   = driverConfig.dllVersion
 *     pDriverConfig["channelCount"] = driverConfig.channelCount             # <<<<<<<<<<<<<<
 *     pDriverConfig["reserved[10]"] = [driverConfig.reserved[i] for i in range(10)]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_driverConfig.channelCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pDriverConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 868, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_pDriverConfig, __pyx_n_s_channelCount, __pyx_t_1) < 0))) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":869
 *     pDriverConfig["dllVersion"]   = driverConfig.dllVersion
 *     pDriverConfig["channelCount"] = driverConfig.channelCount
 *     pDriverConfig["reserved[10]"] = [driverConfig.reserved[i] for i in range(10)]             # <<<<<<<<<<<<<<
 * 
 *     channel = []
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    for (__pyx_t_2 = 0; __pyx_t_2 < 10; __pyx_t_2+=1) {
      __pyx_8genexpr8__pyx_v_i = __pyx_t_2;
      __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.reserved[__pyx_8genexpr8__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 869, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  } /* exit inner scope */
  if (unlikely(__pyx_v_pDriverConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 869, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_pDriverConfig, __pyx_kp_s_reserved_10, __pyx_t_1) < 0))) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":871
 *     pDriverConfig["reserved[10]"] = [driverConfig.reserved[i] for i in range(10)]
 * 
 *     channel = []             # <<<<<<<<<<<<<<
 *     cdef int channelCount = driverConfig.channelCount
 *     for i in range(channelCount):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_channel = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":872
 * 
 *     channel = []
 *     cdef int channelCount = driverConfig.channelCount             # <<<<<<<<<<<<<<
 *     for i in range(channelCount):
 *         ch = {}
 */
  __pyx_t_4 = __pyx_v_driverConfig.channelCount;
  __pyx_v_channelCount = __pyx_t_4;

  /* "vxlapi.pyx":873
 *     channel = []
 *     cdef int channelCount = driverConfig.channelCount
 *     for i in range(channelCount):             # <<<<<<<<<<<<<<
 *         ch = {}
 *         ch["name"]                   = bytes(driverConfig.channel[i].name)
 */
  __pyx_t_5 = __pyx_v_channelCount;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "vxlapi.pyx":874
 *     cdef int channelCount = driverConfig.channelCount
 *     for i in range(channelCount):
 *         ch = {}             # <<<<<<<<<<<<<<
 *         ch["name"]                   = bytes(driverConfig.channel[i].name)
 *         ch["hwType"]                 = driverConfig.channel[i].hwType
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_ch, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "vxlapi.pyx":875
 *     for i in range(channelCount):
 *         ch = {}
 *         ch["name"]                   = bytes(driverConfig.channel[i].name)             # <<<<<<<<<<<<<<
 *         ch["hwType"]                 = driverConfig.channel[i].hwType
 *         ch["hwIndex"]                = driverConfig.channel[i].hwIndex
 */
    __pyx_t_1 = __Pyx_PyObject_FromString((__pyx_v_driverConfig.channel[__pyx_v_i]).name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_name, __pyx_t_3) < 0))) __PYX_ERR(0, 875, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":876
 *         ch = {}
 *         ch["name"]                   = bytes(driverConfig.channel[i].name)
 *         ch["hwType"]                 = driverConfig.channel[i].hwType             # <<<<<<<<<<<<<<
 *         ch["hwIndex"]                = driverConfig.channel[i].hwIndex
 *         ch["hwChannel"]              = driverConfig.channel[i].hwChannel
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).hwType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_hwType, __pyx_t_3) < 0))) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":877
 *         ch["name"]                   = bytes(driverConfig.channel[i].name)
 *         ch["hwType"]                 = driverConfig.channel[i].hwType
 *         ch["hwIndex"]                = driverConfig.channel[i].hwIndex             # <<<<<<<<<<<<<<
 *         ch["hwChannel"]              = driverConfig.channel[i].hwChannel
 *         ch["transceiverType"]        = driverConfig.channel[i].transceiverType
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).hwIndex); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 877, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_hwIndex, __pyx_t_3) < 0))) __PYX_ERR(0, 877, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":878
 *         ch["hwType"]                 = driverConfig.channel[i].hwType
 *         ch["hwIndex"]                = driverConfig.channel[i].hwIndex
 *         ch["hwChannel"]              = driverConfig.channel[i].hwChannel             # <<<<<<<<<<<<<<
 *         ch["transceiverType"]        = driverConfig.channel[i].transceiverType
 *         ch["transceiverState"]       = driverConfig.channel[i].transceiverState
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).hwChannel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_hwChannel, __pyx_t_3) < 0))) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":879
 *         ch["hwIndex"]                = driverConfig.channel[i].hwIndex
 *         ch["hwChannel"]              = driverConfig.channel[i].hwChannel
 *         ch["transceiverType"]        = driverConfig.channel[i].transceiverType             # <<<<<<<<<<<<<<
 *         ch["transceiverState"]       = driverConfig.channel[i].transceiverState
 *         ch["configError"]            = driverConfig.channel[i].configError
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).transceiverType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_transceiverType, __pyx_t_3) < 0))) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":880
 *         ch["hwChannel"]              = driverConfig.channel[i].hwChannel
 *         ch["transceiverType"]        = driverConfig.channel[i].transceiverType
 *         ch["transceiverState"]       = driverConfig.channel[i].transceiverState             # <<<<<<<<<<<<<<
 *         ch["configError"]            = driverConfig.channel[i].configError
 *         ch["channelIndex"]           = driverConfig.channel[i].channelIndex
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).transceiverState); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_transceiverState, __pyx_t_3) < 0))) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":881
 *         ch["transceiverType"]        = driverConfig.channel[i].transceiverType
 *         ch["transceiverState"]       = driverConfig.channel[i].transceiverState
 *         ch["configError"]            = driverConfig.channel[i].configError             # <<<<<<<<<<<<<<
 *         ch["channelIndex"]           = driverConfig.channel[i].channelIndex
 *         ch["channelMask"]            = driverConfig.channel[i].channelMask
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).configError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_configError, __pyx_t_3) < 0))) __PYX_ERR(0, 881, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":882
 *         ch["transceiverState"]       = driverConfig.channel[i].transceiverState
 *         ch["configError"]            = driverConfig.channel[i].configError
 *         ch["channelIndex"]           = driverConfig.channel[i].channelIndex             # <<<<<<<<<<<<<<
 *         ch["channelMask"]            = driverConfig.channel[i].channelMask
 *         ch["channelCapabilities"]    = driverConfig.channel[i].channelCapabilities
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).channelIndex); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_channelIndex, __pyx_t_3) < 0))) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":883
 *         ch["configError"]            = driverConfig.channel[i].configError
 *         ch["channelIndex"]           = driverConfig.channel[i].channelIndex
 *         ch["channelMask"]            = driverConfig.channel[i].channelMask             # <<<<<<<<<<<<<<
 *         ch["channelCapabilities"]    = driverConfig.channel[i].channelCapabilities
 *         ch["channelBusCapabilities"] = driverConfig.channel[i].channelBusCapabilities
 */
    __pyx_t_3 = __Pyx_PyInt_From_XLuint64((__pyx_v_driverConfig.channel[__pyx_v_i]).channelMask); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_channelMask, __pyx_t_3) < 0))) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":884
 *         ch["channelIndex"]           = driverConfig.channel[i].channelIndex
 *         ch["channelMask"]            = driverConfig.channel[i].channelMask
 *         ch["channelCapabilities"]    = driverConfig.channel[i].channelCapabilities             # <<<<<<<<<<<<<<
 *         ch["channelBusCapabilities"] = driverConfig.channel[i].channelBusCapabilities
 *         ch["isOnBus"]                = driverConfig.channel[i].isOnBus
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).channelCapabilities); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_channelCapabilities, __pyx_t_3) < 0))) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":885
 *         ch["channelMask"]            = driverConfig.channel[i].channelMask
 *         ch["channelCapabilities"]    = driverConfig.channel[i].channelCapabilities
 *         ch["channelBusCapabilities"] = driverConfig.channel[i].channelBusCapabilities             # <<<<<<<<<<<<<<
 *         ch["isOnBus"]                = driverConfig.channel[i].isOnBus
 *         ch["connectedBusType"]       = driverConfig.channel[i].connectedBusType
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).channelBusCapabilities); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_channelBusCapabilities, __pyx_t_3) < 0))) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":886
 *         ch["channelCapabilities"]    = driverConfig.channel[i].channelCapabilities
 *         ch["channelBusCapabilities"] = driverConfig.channel[i].channelBusCapabilities
 *         ch["isOnBus"]                = driverConfig.channel[i].isOnBus             # <<<<<<<<<<<<<<
 *         ch["connectedBusType"]       = driverConfig.channel[i].connectedBusType
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).isOnBus); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_isOnBus, __pyx_t_3) < 0))) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":887
 *         ch["channelBusCapabilities"] = driverConfig.channel[i].channelBusCapabilities
 *         ch["isOnBus"]                = driverConfig.channel[i].isOnBus
 *         ch["connectedBusType"]       = driverConfig.channel[i].connectedBusType             # <<<<<<<<<<<<<<
 * 
 *         busParams = {}
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).connectedBusType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_connectedBusType, __pyx_t_3) < 0))) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":889
 *         ch["connectedBusType"]       = driverConfig.channel[i].connectedBusType
 * 
 *         busParams = {}             # <<<<<<<<<<<<<<
 *         busParams["busType"] = driverConfig.channel[i].busParams.busType
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_busParams, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "vxlapi.pyx":890
 * 
 *         busParams = {}
 *         busParams["busType"] = driverConfig.channel[i].busParams.busType             # <<<<<<<<<<<<<<
 * 
 *         data = {}
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.busType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 890, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_busParams, __pyx_n_s_busType, __pyx_t_3) < 0))) __PYX_ERR(0, 890, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":892
 *         busParams["busType"] = driverConfig.channel[i].busParams.busType
 * 
 *         data = {}             # <<<<<<<<<<<<<<
 *         if busParams["busType"]   == XL_BUS_TYPE_NONE:
 *             pass
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 892, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_data, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "vxlapi.pyx":893
 * 
 *         data = {}
 *         if busParams["busType"]   == XL_BUS_TYPE_NONE:             # <<<<<<<<<<<<<<
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_BUS_TYPE_NONE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":895
 *         if busParams["busType"]   == XL_BUS_TYPE_NONE:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:             # <<<<<<<<<<<<<<
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:
 *                 canFD = {}
 */
    __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_BUS_TYPE_CAN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_9) {

      /* "vxlapi.pyx":896
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:             # <<<<<<<<<<<<<<
 *                 canFD = {}
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate
 */
      __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.canOpMode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CANFD); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {

        /* "vxlapi.pyx":897
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:
 *                 canFD = {}             # <<<<<<<<<<<<<<
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate
 *                 canFD["sjwAbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwAbr
 */
        __pyx_t_8 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 897, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_XDECREF_SET(__pyx_v_canFD, ((PyObject*)__pyx_t_8));
        __pyx_t_8 = 0;

        /* "vxlapi.pyx":898
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:
 *                 canFD = {}
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate             # <<<<<<<<<<<<<<
 *                 canFD["sjwAbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwAbr
 *                 canFD["tseg1Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Abr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.arbitrationBitRate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 898, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_arbitrationBitRate, __pyx_t_8) < 0))) __PYX_ERR(0, 898, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":899
 *                 canFD = {}
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate
 *                 canFD["sjwAbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwAbr             # <<<<<<<<<<<<<<
 *                 canFD["tseg1Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Abr
 *                 canFD["tseg2Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Abr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.sjwAbr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 899, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_sjwAbr, __pyx_t_8) < 0))) __PYX_ERR(0, 899, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":900
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate
 *                 canFD["sjwAbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwAbr
 *                 canFD["tseg1Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Abr             # <<<<<<<<<<<<<<
 *                 canFD["tseg2Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Abr
 *                 canFD["samAbr"]             = driverConfig.channel[i].busParams.data.canFD.samAbr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.tseg1Abr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 900, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_tseg1Abr, __pyx_t_8) < 0))) __PYX_ERR(0, 900, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":901
 *                 canFD["sjwAbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwAbr
 *                 canFD["tseg1Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Abr
 *                 canFD["tseg2Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Abr             # <<<<<<<<<<<<<<
 *                 canFD["samAbr"]             = driverConfig.channel[i].busParams.data.canFD.samAbr
 *                 canFD["outputMode"]         = driverConfig.channel[i].busParams.data.canFD.outputMode
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.tseg2Abr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_tseg2Abr, __pyx_t_8) < 0))) __PYX_ERR(0, 901, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":902
 *                 canFD["tseg1Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Abr
 *                 canFD["tseg2Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Abr
 *                 canFD["samAbr"]             = driverConfig.channel[i].busParams.data.canFD.samAbr             # <<<<<<<<<<<<<<
 *                 canFD["outputMode"]         = driverConfig.channel[i].busParams.data.canFD.outputMode
 *                 canFD["sjwDbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwDbr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.samAbr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 902, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_samAbr, __pyx_t_8) < 0))) __PYX_ERR(0, 902, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":903
 *                 canFD["tseg2Abr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Abr
 *                 canFD["samAbr"]             = driverConfig.channel[i].busParams.data.canFD.samAbr
 *                 canFD["outputMode"]         = driverConfig.channel[i].busParams.data.canFD.outputMode             # <<<<<<<<<<<<<<
 *                 canFD["sjwDbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwDbr
 *                 canFD["tseg1Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Dbr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.outputMode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 903, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_outputMode, __pyx_t_8) < 0))) __PYX_ERR(0, 903, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":904
 *                 canFD["samAbr"]             = driverConfig.channel[i].busParams.data.canFD.samAbr
 *                 canFD["outputMode"]         = driverConfig.channel[i].busParams.data.canFD.outputMode
 *                 canFD["sjwDbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwDbr             # <<<<<<<<<<<<<<
 *                 canFD["tseg1Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Dbr
 *                 canFD["tseg2Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Dbr
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.sjwDbr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 904, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_sjwDbr, __pyx_t_8) < 0))) __PYX_ERR(0, 904, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":905
 *                 canFD["outputMode"]         = driverConfig.channel[i].busParams.data.canFD.outputMode
 *                 canFD["sjwDbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwDbr
 *                 canFD["tseg1Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Dbr             # <<<<<<<<<<<<<<
 *                 canFD["tseg2Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Dbr
 *                 canFD["dataBitRate"]        = driverConfig.channel[i].busParams.data.canFD.dataBitRate
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.tseg1Dbr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 905, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_tseg1Dbr, __pyx_t_8) < 0))) __PYX_ERR(0, 905, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":906
 *                 canFD["sjwDbr"]             = driverConfig.channel[i].busParams.data.canFD.sjwDbr
 *                 canFD["tseg1Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Dbr
 *                 canFD["tseg2Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Dbr             # <<<<<<<<<<<<<<
 *                 canFD["dataBitRate"]        = driverConfig.channel[i].busParams.data.canFD.dataBitRate
 *                 canFD["canOpMode"]          = driverConfig.channel[i].busParams.data.canFD.canOpMode
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.tseg2Dbr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 906, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_tseg2Dbr, __pyx_t_8) < 0))) __PYX_ERR(0, 906, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":907
 *                 canFD["tseg1Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg1Dbr
 *                 canFD["tseg2Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Dbr
 *                 canFD["dataBitRate"]        = driverConfig.channel[i].busParams.data.canFD.dataBitRate             # <<<<<<<<<<<<<<
 *                 canFD["canOpMode"]          = driverConfig.channel[i].busParams.data.canFD.canOpMode
 *                 data["canFD"] = canFD
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.dataBitRate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 907, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_dataBitRate, __pyx_t_8) < 0))) __PYX_ERR(0, 907, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":908
 *                 canFD["tseg2Dbr"]           = driverConfig.channel[i].busParams.data.canFD.tseg2Dbr
 *                 canFD["dataBitRate"]        = driverConfig.channel[i].busParams.data.canFD.dataBitRate
 *                 canFD["canOpMode"]          = driverConfig.channel[i].busParams.data.canFD.canOpMode             # <<<<<<<<<<<<<<
 *                 data["canFD"] = canFD
 *             else:
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.canFD.canOpMode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_canFD, __pyx_n_s_canOpMode, __pyx_t_8) < 0))) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":909
 *                 canFD["dataBitRate"]        = driverConfig.channel[i].busParams.data.canFD.dataBitRate
 *                 canFD["canOpMode"]          = driverConfig.channel[i].busParams.data.canFD.canOpMode
 *                 data["canFD"] = canFD             # <<<<<<<<<<<<<<
 *             else:
 *                 can = {}
 */
        if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_canFD, __pyx_v_canFD) < 0))) __PYX_ERR(0, 909, __pyx_L1_error)

        /* "vxlapi.pyx":896
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:             # <<<<<<<<<<<<<<
 *                 canFD = {}
 *                 canFD["arbitrationBitRate"] = driverConfig.channel[i].busParams.data.canFD.arbitrationBitRate
 */
        goto __pyx_L8;
      }

      /* "vxlapi.pyx":911
 *                 data["canFD"] = canFD
 *             else:
 *                 can = {}             # <<<<<<<<<<<<<<
 *                 can["bitRate"]    = driverConfig.channel[i].busParams.data.can.bitRate
 *                 can["sjw"]        = driverConfig.channel[i].busParams.data.can.sjw
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 911, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_XDECREF_SET(__pyx_v_can, ((PyObject*)__pyx_t_8));
        __pyx_t_8 = 0;

        /* "vxlapi.pyx":912
 *             else:
 *                 can = {}
 *                 can["bitRate"]    = driverConfig.channel[i].busParams.data.can.bitRate             # <<<<<<<<<<<<<<
 *                 can["sjw"]        = driverConfig.channel[i].busParams.data.can.sjw
 *                 can["tseg1"]      = driverConfig.channel[i].busParams.data.can.tseg1
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.bitRate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 912, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_bitRate, __pyx_t_8) < 0))) __PYX_ERR(0, 912, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":913
 *                 can = {}
 *                 can["bitRate"]    = driverConfig.channel[i].busParams.data.can.bitRate
 *                 can["sjw"]        = driverConfig.channel[i].busParams.data.can.sjw             # <<<<<<<<<<<<<<
 *                 can["tseg1"]      = driverConfig.channel[i].busParams.data.can.tseg1
 *                 can["tseg2"]      = driverConfig.channel[i].busParams.data.can.tseg2
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.sjw); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 913, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_sjw, __pyx_t_8) < 0))) __PYX_ERR(0, 913, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":914
 *                 can["bitRate"]    = driverConfig.channel[i].busParams.data.can.bitRate
 *                 can["sjw"]        = driverConfig.channel[i].busParams.data.can.sjw
 *                 can["tseg1"]      = driverConfig.channel[i].busParams.data.can.tseg1             # <<<<<<<<<<<<<<
 *                 can["tseg2"]      = driverConfig.channel[i].busParams.data.can.tseg2
 *                 can["sam"]        = driverConfig.channel[i].busParams.data.can.sam
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.tseg1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 914, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_tseg1, __pyx_t_8) < 0))) __PYX_ERR(0, 914, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":915
 *                 can["sjw"]        = driverConfig.channel[i].busParams.data.can.sjw
 *                 can["tseg1"]      = driverConfig.channel[i].busParams.data.can.tseg1
 *                 can["tseg2"]      = driverConfig.channel[i].busParams.data.can.tseg2             # <<<<<<<<<<<<<<
 *                 can["sam"]        = driverConfig.channel[i].busParams.data.can.sam
 *                 can["outputMode"] = driverConfig.channel[i].busParams.data.can.outputMode
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.tseg2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 915, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_tseg2, __pyx_t_8) < 0))) __PYX_ERR(0, 915, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":916
 *                 can["tseg1"]      = driverConfig.channel[i].busParams.data.can.tseg1
 *                 can["tseg2"]      = driverConfig.channel[i].busParams.data.can.tseg2
 *                 can["sam"]        = driverConfig.channel[i].busParams.data.can.sam             # <<<<<<<<<<<<<<
 *                 can["outputMode"] = driverConfig.channel[i].busParams.data.can.outputMode
 *                 can["reserved1[7]"]= bytearray([driverConfig.channel[i].busParams.data.can.reserved1[j] for j in range(7)])
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.sam); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 916, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_sam, __pyx_t_8) < 0))) __PYX_ERR(0, 916, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":917
 *                 can["tseg2"]      = driverConfig.channel[i].busParams.data.can.tseg2
 *                 can["sam"]        = driverConfig.channel[i].busParams.data.can.sam
 *                 can["outputMode"] = driverConfig.channel[i].busParams.data.can.outputMode             # <<<<<<<<<<<<<<
 *                 can["reserved1[7]"]= bytearray([driverConfig.channel[i].busParams.data.can.reserved1[j] for j in range(7)])
 *                 can["canOpMode"]  = driverConfig.channel[i].busParams.data.can.canOpMode
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.outputMode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 917, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_outputMode, __pyx_t_8) < 0))) __PYX_ERR(0, 917, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":918
 *                 can["sam"]        = driverConfig.channel[i].busParams.data.can.sam
 *                 can["outputMode"] = driverConfig.channel[i].busParams.data.can.outputMode
 *                 can["reserved1[7]"]= bytearray([driverConfig.channel[i].busParams.data.can.reserved1[j] for j in range(7)])             # <<<<<<<<<<<<<<
 *                 can["canOpMode"]  = driverConfig.channel[i].busParams.data.can.canOpMode
 *                 data["can"] = can
 */
        { /* enter inner scope */
          __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 918, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          for (__pyx_t_2 = 0; __pyx_t_2 < 7; __pyx_t_2+=1) {
            __pyx_8genexpr9__pyx_v_j = __pyx_t_2;
            __pyx_t_1 = __Pyx_PyInt_From_unsigned_char(((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.reserved1[__pyx_8genexpr9__pyx_v_j])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 918, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 918, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
        } /* exit inner scope */
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 918, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_kp_s_reserved1_7, __pyx_t_1) < 0))) __PYX_ERR(0, 918, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":919
 *                 can["outputMode"] = driverConfig.channel[i].busParams.data.can.outputMode
 *                 can["reserved1[7]"]= bytearray([driverConfig.channel[i].busParams.data.can.reserved1[j] for j in range(7)])
 *                 can["canOpMode"]  = driverConfig.channel[i].busParams.data.can.canOpMode             # <<<<<<<<<<<<<<
 *                 data["can"] = can
 *         elif busParams["busType"] == XL_BUS_TYPE_LIN:
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.can.canOpMode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_can, __pyx_n_s_canOpMode, __pyx_t_1) < 0))) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":920
 *                 can["reserved1[7]"]= bytearray([driverConfig.channel[i].busParams.data.can.reserved1[j] for j in range(7)])
 *                 can["canOpMode"]  = driverConfig.channel[i].busParams.data.can.canOpMode
 *                 data["can"] = can             # <<<<<<<<<<<<<<
 *         elif busParams["busType"] == XL_BUS_TYPE_LIN:
 *             pass
 */
        if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_can, __pyx_v_can) < 0))) __PYX_ERR(0, 920, __pyx_L1_error)
      }
      __pyx_L8:;

      /* "vxlapi.pyx":895
 *         if busParams["busType"]   == XL_BUS_TYPE_NONE:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_CAN:             # <<<<<<<<<<<<<<
 *             if driverConfig.channel[i].busParams.data.can.canOpMode == XL_BUS_PARAMS_CANOPMODE_CANFD:
 *                 canFD = {}
 */
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":921
 *                 can["canOpMode"]  = driverConfig.channel[i].busParams.data.can.canOpMode
 *                 data["can"] = can
 *         elif busParams["busType"] == XL_BUS_TYPE_LIN:             # <<<<<<<<<<<<<<
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_FLEXRAY:
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_LIN); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":923
 *         elif busParams["busType"] == XL_BUS_TYPE_LIN:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_FLEXRAY:             # <<<<<<<<<<<<<<
 *             flexray = {}
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_FLEXRAY); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {

      /* "vxlapi.pyx":924
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_FLEXRAY:
 *             flexray = {}             # <<<<<<<<<<<<<<
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status
 *             flexray["cfgMode"]  = driverConfig.channel[i].busParams.data.flexray.cfgMode
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 924, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_flexray, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "vxlapi.pyx":925
 *         elif busParams["busType"] == XL_BUS_TYPE_FLEXRAY:
 *             flexray = {}
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status             # <<<<<<<<<<<<<<
 *             flexray["cfgMode"]  = driverConfig.channel[i].busParams.data.flexray.cfgMode
 *             flexray["baudrate"] = driverConfig.channel[i].busParams.data.flexray.baudrate
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.flexray.status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_flexray, __pyx_n_s_status, __pyx_t_1) < 0))) __PYX_ERR(0, 925, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":926
 *             flexray = {}
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status
 *             flexray["cfgMode"]  = driverConfig.channel[i].busParams.data.flexray.cfgMode             # <<<<<<<<<<<<<<
 *             flexray["baudrate"] = driverConfig.channel[i].busParams.data.flexray.baudrate
 *             data["flexray"] = flexray
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.flexray.cfgMode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 926, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_flexray, __pyx_n_s_cfgMode, __pyx_t_1) < 0))) __PYX_ERR(0, 926, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":927
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status
 *             flexray["cfgMode"]  = driverConfig.channel[i].busParams.data.flexray.cfgMode
 *             flexray["baudrate"] = driverConfig.channel[i].busParams.data.flexray.baudrate             # <<<<<<<<<<<<<<
 *             data["flexray"] = flexray
 *         elif busParams["busType"] == XL_BUS_TYPE_AFDX:
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.flexray.baudrate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 927, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_flexray, __pyx_n_s_baudrate, __pyx_t_1) < 0))) __PYX_ERR(0, 927, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":928
 *             flexray["cfgMode"]  = driverConfig.channel[i].busParams.data.flexray.cfgMode
 *             flexray["baudrate"] = driverConfig.channel[i].busParams.data.flexray.baudrate
 *             data["flexray"] = flexray             # <<<<<<<<<<<<<<
 *         elif busParams["busType"] == XL_BUS_TYPE_AFDX:
 *             pass
 */
      if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_flexray, __pyx_v_flexray) < 0))) __PYX_ERR(0, 928, __pyx_L1_error)

      /* "vxlapi.pyx":923
 *         elif busParams["busType"] == XL_BUS_TYPE_LIN:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_FLEXRAY:             # <<<<<<<<<<<<<<
 *             flexray = {}
 *             flexray["status"]   = driverConfig.channel[i].busParams.data.flexray.status
 */
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":929
 *             flexray["baudrate"] = driverConfig.channel[i].busParams.data.flexray.baudrate
 *             data["flexray"] = flexray
 *         elif busParams["busType"] == XL_BUS_TYPE_AFDX:             # <<<<<<<<<<<<<<
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_MOST:
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_AFDX); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":931
 *         elif busParams["busType"] == XL_BUS_TYPE_AFDX:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_MOST:             # <<<<<<<<<<<<<<
 *             most = {}
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_MOST); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {

      /* "vxlapi.pyx":932
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_MOST:
 *             most = {}             # <<<<<<<<<<<<<<
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade
 *             most["compatibleSpeedGrade"] = driverConfig.channel[i].busParams.data.most.compatibleSpeedGrade
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 932, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_most, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "vxlapi.pyx":933
 *         elif busParams["busType"] == XL_BUS_TYPE_MOST:
 *             most = {}
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade             # <<<<<<<<<<<<<<
 *             most["compatibleSpeedGrade"] = driverConfig.channel[i].busParams.data.most.compatibleSpeedGrade
 *             most["inicFwVersion"]        = driverConfig.channel[i].busParams.data.most.inicFwVersion
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.most.activeSpeedGrade); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_most, __pyx_n_s_activeSpeedGrade, __pyx_t_1) < 0))) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":934
 *             most = {}
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade
 *             most["compatibleSpeedGrade"] = driverConfig.channel[i].busParams.data.most.compatibleSpeedGrade             # <<<<<<<<<<<<<<
 *             most["inicFwVersion"]        = driverConfig.channel[i].busParams.data.most.inicFwVersion
 *             data["most"] = most
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.most.compatibleSpeedGrade); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 934, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_most, __pyx_n_s_compatibleSpeedGrade, __pyx_t_1) < 0))) __PYX_ERR(0, 934, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":935
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade
 *             most["compatibleSpeedGrade"] = driverConfig.channel[i].busParams.data.most.compatibleSpeedGrade
 *             most["inicFwVersion"]        = driverConfig.channel[i].busParams.data.most.inicFwVersion             # <<<<<<<<<<<<<<
 *             data["most"] = most
 *         elif busParams["busType"] == XL_BUS_TYPE_DAIO:
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.most.inicFwVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_most, __pyx_n_s_inicFwVersion, __pyx_t_1) < 0))) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":936
 *             most["compatibleSpeedGrade"] = driverConfig.channel[i].busParams.data.most.compatibleSpeedGrade
 *             most["inicFwVersion"]        = driverConfig.channel[i].busParams.data.most.inicFwVersion
 *             data["most"] = most             # <<<<<<<<<<<<<<
 *         elif busParams["busType"] == XL_BUS_TYPE_DAIO:
 *             pass
 */
      if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_most, __pyx_v_most) < 0))) __PYX_ERR(0, 936, __pyx_L1_error)

      /* "vxlapi.pyx":931
 *         elif busParams["busType"] == XL_BUS_TYPE_AFDX:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_MOST:             # <<<<<<<<<<<<<<
 *             most = {}
 *             most["activeSpeedGrade"]     = driverConfig.channel[i].busParams.data.most.activeSpeedGrade
 */
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":937
 *             most["inicFwVersion"]        = driverConfig.channel[i].busParams.data.most.inicFwVersion
 *             data["most"] = most
 *         elif busParams["busType"] == XL_BUS_TYPE_DAIO:             # <<<<<<<<<<<<<<
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_J1708:
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_DAIO); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":939
 *         elif busParams["busType"] == XL_BUS_TYPE_DAIO:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_J1708:             # <<<<<<<<<<<<<<
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_ETHERNET:
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 939, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_J1708); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 939, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 939, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 939, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":941
 *         elif busParams["busType"] == XL_BUS_TYPE_J1708:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_ETHERNET:             # <<<<<<<<<<<<<<
 *             ethernet = {}
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 941, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_XL_BUS_TYPE_ETHERNET); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 941, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 941, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 941, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_9) {

      /* "vxlapi.pyx":942
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_ETHERNET:
 *             ethernet = {}             # <<<<<<<<<<<<<<
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])
 *             ethernet["connector"]       = driverConfig.channel[i].busParams.data.ethernet.connector
 */
      __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 942, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_ethernet, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "vxlapi.pyx":943
 *         elif busParams["busType"] == XL_BUS_TYPE_ETHERNET:
 *             ethernet = {}
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])             # <<<<<<<<<<<<<<
 *             ethernet["connector"]       = driverConfig.channel[i].busParams.data.ethernet.connector
 *             ethernet["phy"]             = driverConfig.channel[i].busParams.data.ethernet.phy
 */
      { /* enter inner scope */
        __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 943, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        for (__pyx_t_2 = 0; __pyx_t_2 < 6; __pyx_t_2+=1) {
          __pyx_9genexpr10__pyx_v_j = __pyx_t_2;
          __pyx_t_8 = __Pyx_PyInt_From_unsigned_char(((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.macAddr[__pyx_9genexpr10__pyx_v_j])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 943, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 943, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_kp_s_macAddr_6, __pyx_t_8) < 0))) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":944
 *             ethernet = {}
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])
 *             ethernet["connector"]       = driverConfig.channel[i].busParams.data.ethernet.connector             # <<<<<<<<<<<<<<
 *             ethernet["phy"]             = driverConfig.channel[i].busParams.data.ethernet.phy
 *             ethernet["link"]            = driverConfig.channel[i].busParams.data.ethernet.link
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.connector); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 944, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_connector, __pyx_t_8) < 0))) __PYX_ERR(0, 944, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":945
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])
 *             ethernet["connector"]       = driverConfig.channel[i].busParams.data.ethernet.connector
 *             ethernet["phy"]             = driverConfig.channel[i].busParams.data.ethernet.phy             # <<<<<<<<<<<<<<
 *             ethernet["link"]            = driverConfig.channel[i].busParams.data.ethernet.link
 *             ethernet["speed"]           = driverConfig.channel[i].busParams.data.ethernet.speed
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.phy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 945, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_phy, __pyx_t_8) < 0))) __PYX_ERR(0, 945, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":946
 *             ethernet["connector"]       = driverConfig.channel[i].busParams.data.ethernet.connector
 *             ethernet["phy"]             = driverConfig.channel[i].busParams.data.ethernet.phy
 *             ethernet["link"]            = driverConfig.channel[i].busParams.data.ethernet.link             # <<<<<<<<<<<<<<
 *             ethernet["speed"]           = driverConfig.channel[i].busParams.data.ethernet.speed
 *             ethernet["clockMode"]       = driverConfig.channel[i].busParams.data.ethernet.clockMode
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.link); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 946, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_link, __pyx_t_8) < 0))) __PYX_ERR(0, 946, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":947
 *             ethernet["phy"]             = driverConfig.channel[i].busParams.data.ethernet.phy
 *             ethernet["link"]            = driverConfig.channel[i].busParams.data.ethernet.link
 *             ethernet["speed"]           = driverConfig.channel[i].busParams.data.ethernet.speed             # <<<<<<<<<<<<<<
 *             ethernet["clockMode"]       = driverConfig.channel[i].busParams.data.ethernet.clockMode
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.speed); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_speed, __pyx_t_8) < 0))) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":948
 *             ethernet["link"]            = driverConfig.channel[i].busParams.data.ethernet.link
 *             ethernet["speed"]           = driverConfig.channel[i].busParams.data.ethernet.speed
 *             ethernet["clockMode"]       = driverConfig.channel[i].busParams.data.ethernet.clockMode             # <<<<<<<<<<<<<<
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass
 *             data["ethernet"] = ethernet
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.clockMode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_clockMode, __pyx_t_8) < 0))) __PYX_ERR(0, 948, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":949
 *             ethernet["speed"]           = driverConfig.channel[i].busParams.data.ethernet.speed
 *             ethernet["clockMode"]       = driverConfig.channel[i].busParams.data.ethernet.clockMode
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass             # <<<<<<<<<<<<<<
 *             data["ethernet"] = ethernet
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.ethernet.bypass); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely((PyDict_SetItem(__pyx_v_ethernet, __pyx_n_s_bypass, __pyx_t_8) < 0))) __PYX_ERR(0, 949, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vxlapi.pyx":950
 *             ethernet["clockMode"]       = driverConfig.channel[i].busParams.data.ethernet.clockMode
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass
 *             data["ethernet"] = ethernet             # <<<<<<<<<<<<<<
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:
 *             a429 = {}
 */
      if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_ethernet, __pyx_v_ethernet) < 0))) __PYX_ERR(0, 950, __pyx_L1_error)

      /* "vxlapi.pyx":941
 *         elif busParams["busType"] == XL_BUS_TYPE_J1708:
 *             pass
 *         elif busParams["busType"] == XL_BUS_TYPE_ETHERNET:             # <<<<<<<<<<<<<<
 *             ethernet = {}
 *             ethernet["macAddr[6]"]      = bytearray([driverConfig.channel[i].busParams.data.ethernet.macAddr[j] for j in range(6)])
 */
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":951
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass
 *             data["ethernet"] = ethernet
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:             # <<<<<<<<<<<<<<
 *             a429 = {}
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1
 */
    __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_busParams, __pyx_n_s_busType); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_XL_BUS_TYPE_A429); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {

      /* "vxlapi.pyx":952
 *             data["ethernet"] = ethernet
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:
 *             a429 = {}             # <<<<<<<<<<<<<<
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_a429, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "vxlapi.pyx":953
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:
 *             a429 = {}
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1             # <<<<<<<<<<<<<<
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection
 *             dir = {}
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.res1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_a429, __pyx_n_s_res1, __pyx_t_1) < 0))) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":954
 *             a429 = {}
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection             # <<<<<<<<<<<<<<
 *             dir = {}
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.channelDirection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_a429, __pyx_n_s_channelDirection, __pyx_t_1) < 0))) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vxlapi.pyx":955
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection
 *             dir = {}             # <<<<<<<<<<<<<<
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 955, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_dir, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "vxlapi.pyx":956
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection
 *             dir = {}
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:             # <<<<<<<<<<<<<<
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_a429, __pyx_n_s_channelDirection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_XL_A429_MSG_CHANNEL_DIR_TX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 956, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 956, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 956, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {

        /* "vxlapi.pyx":957
 *             dir = {}
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate             # <<<<<<<<<<<<<<
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.tx.bitrate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 957, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_bitrate, __pyx_t_8) < 0))) __PYX_ERR(0, 957, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":958
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity             # <<<<<<<<<<<<<<
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.tx.parity); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 958, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_parity, __pyx_t_8) < 0))) __PYX_ERR(0, 958, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":959
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap             # <<<<<<<<<<<<<<
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate
 */
        __pyx_t_8 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.tx.minGap); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 959, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_minGap, __pyx_t_8) < 0))) __PYX_ERR(0, 959, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vxlapi.pyx":956
 *             a429["channelDirection"] = driverConfig.channel[i].busParams.data.a429.channelDirection
 *             dir = {}
 *             if a429["channelDirection"] == XL_A429_MSG_CHANNEL_DIR_TX:             # <<<<<<<<<<<<<<
 *                 dir["bitrate"] = driverConfig.channel[i].busParams.data.a429.dir.tx.bitrate
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 */
        goto __pyx_L13;
      }

      /* "vxlapi.pyx":960
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:             # <<<<<<<<<<<<<<
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate
 */
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.channelDirection); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_XL_A429_MSG_CHANNEL_DIR_RX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 960, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_9) {

        /* "vxlapi.pyx":961
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate             # <<<<<<<<<<<<<<
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate
 *                 dir["maxBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.maxBitrate
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.bitrate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 961, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_bitrate, __pyx_t_1) < 0))) __PYX_ERR(0, 961, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":962
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate             # <<<<<<<<<<<<<<
 *                 dir["maxBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.maxBitrate
 *                 dir["parity"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.parity
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.minBitrate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_minBitrate, __pyx_t_1) < 0))) __PYX_ERR(0, 962, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":963
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate
 *                 dir["maxBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.maxBitrate             # <<<<<<<<<<<<<<
 *                 dir["parity"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.parity
 *                 dir["minGap"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.minGap
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.maxBitrate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_maxBitrate, __pyx_t_1) < 0))) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":964
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate
 *                 dir["maxBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.maxBitrate
 *                 dir["parity"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.parity             # <<<<<<<<<<<<<<
 *                 dir["minGap"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.minGap
 *                 dir["autoBaudrate"]= driverConfig.channel[i].busParams.data.a429.dir.rx.autoBaudrate
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.parity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_parity, __pyx_t_1) < 0))) __PYX_ERR(0, 964, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":965
 *                 dir["maxBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.maxBitrate
 *                 dir["parity"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.parity
 *                 dir["minGap"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.minGap             # <<<<<<<<<<<<<<
 *                 dir["autoBaudrate"]= driverConfig.channel[i].busParams.data.a429.dir.rx.autoBaudrate
 *             else:
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.minGap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_minGap, __pyx_t_1) < 0))) __PYX_ERR(0, 965, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":966
 *                 dir["parity"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.parity
 *                 dir["minGap"]      = driverConfig.channel[i].busParams.data.a429.dir.rx.minGap
 *                 dir["autoBaudrate"]= driverConfig.channel[i].busParams.data.a429.dir.rx.autoBaudrate             # <<<<<<<<<<<<<<
 *             else:
 *                 pass
 */
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.a429.dir.rx.autoBaudrate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_n_s_autoBaudrate, __pyx_t_1) < 0))) __PYX_ERR(0, 966, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "vxlapi.pyx":960
 *                 dir["parity"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.parity
 *                 dir["minGap"]  = driverConfig.channel[i].busParams.data.a429.dir.tx.minGap
 *             elif driverConfig.channel[i].busParams.data.a429.channelDirection == XL_A429_MSG_CHANNEL_DIR_RX:             # <<<<<<<<<<<<<<
 *                 dir["bitrate"]     = driverConfig.channel[i].busParams.data.a429.dir.rx.bitrate
 *                 dir["minBitrate"]  = driverConfig.channel[i].busParams.data.a429.dir.rx.minBitrate
 */
        goto __pyx_L13;
      }

      /* "vxlapi.pyx":968
 *                 dir["autoBaudrate"]= driverConfig.channel[i].busParams.data.a429.dir.rx.autoBaudrate
 *             else:
 *                 pass             # <<<<<<<<<<<<<<
 *             dir["raw[24]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(24)])
 *             a429["dir"]  = dir
 */
      /*else*/ {
      }
      __pyx_L13:;

      /* "vxlapi.pyx":969
 *             else:
 *                 pass
 *             dir["raw[24]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(24)])             # <<<<<<<<<<<<<<
 *             a429["dir"]  = dir
 *             data["a429"] = a429
 */
      { /* enter inner scope */
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        for (__pyx_t_2 = 0; __pyx_t_2 < 24; __pyx_t_2+=1) {
          __pyx_9genexpr11__pyx_v_j = __pyx_t_2;
          __pyx_t_3 = __Pyx_PyInt_From_unsigned_char(((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.raw[__pyx_9genexpr11__pyx_v_j])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 969, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely((PyDict_SetItem(__pyx_v_dir, __pyx_kp_s_raw_24, __pyx_t_3) < 0))) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "vxlapi.pyx":970
 *                 pass
 *             dir["raw[24]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(24)])
 *             a429["dir"]  = dir             # <<<<<<<<<<<<<<
 *             data["a429"] = a429
 *         else:
 */
      if (unlikely((PyDict_SetItem(__pyx_v_a429, __pyx_n_s_dir, __pyx_v_dir) < 0))) __PYX_ERR(0, 970, __pyx_L1_error)

      /* "vxlapi.pyx":971
 *             dir["raw[24]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(24)])
 *             a429["dir"]  = dir
 *             data["a429"] = a429             # <<<<<<<<<<<<<<
 *         else:
 *             pass
 */
      if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_n_s_a429, __pyx_v_a429) < 0))) __PYX_ERR(0, 971, __pyx_L1_error)

      /* "vxlapi.pyx":951
 *             ethernet["bypass"]          = driverConfig.channel[i].busParams.data.ethernet.bypass
 *             data["ethernet"] = ethernet
 *         elif busParams["busType"] == XL_BUS_TYPE_A429:             # <<<<<<<<<<<<<<
 *             a429 = {}
 *             a429["res1"] = driverConfig.channel[i].busParams.data.a429.res1
 */
      goto __pyx_L7;
    }

    /* "vxlapi.pyx":973
 *             data["a429"] = a429
 *         else:
 *             pass             # <<<<<<<<<<<<<<
 * 
 *         data["raw[28]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(28)])
 */
    /*else*/ {
    }
    __pyx_L7:;

    /* "vxlapi.pyx":975
 *             pass
 * 
 *         data["raw[28]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(28)])             # <<<<<<<<<<<<<<
 *         busParams["data"] = data
 *         ch["busParams"] = busParams
 */
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      for (__pyx_t_2 = 0; __pyx_t_2 < 28; __pyx_t_2+=1) {
        __pyx_9genexpr12__pyx_v_j = __pyx_t_2;
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_char(((__pyx_v_driverConfig.channel[__pyx_v_i]).busParams.data.raw[__pyx_9genexpr12__pyx_v_j])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 975, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 975, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    } /* exit inner scope */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely((PyDict_SetItem(__pyx_v_data, __pyx_kp_s_raw_28, __pyx_t_1) < 0))) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":976
 * 
 *         data["raw[28]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(28)])
 *         busParams["data"] = data             # <<<<<<<<<<<<<<
 *         ch["busParams"] = busParams
 * 
 */
    if (unlikely((PyDict_SetItem(__pyx_v_busParams, __pyx_n_s_data, __pyx_v_data) < 0))) __PYX_ERR(0, 976, __pyx_L1_error)

    /* "vxlapi.pyx":977
 *         data["raw[28]"]   = bytearray([driverConfig.channel[i].busParams.data.raw[j] for j in range(28)])
 *         busParams["data"] = data
 *         ch["busParams"] = busParams             # <<<<<<<<<<<<<<
 * 
 *         ch["_doNotUse"]                     = driverConfig.channel[i]._doNotUse
 */
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_busParams, __pyx_v_busParams) < 0))) __PYX_ERR(0, 977, __pyx_L1_error)

    /* "vxlapi.pyx":979
 *         ch["busParams"] = busParams
 * 
 *         ch["_doNotUse"]                     = driverConfig.channel[i]._doNotUse             # <<<<<<<<<<<<<<
 *         ch["driverVersion"]                 = driverConfig.channel[i].driverVersion
 *         ch["interfaceVersion"]              = driverConfig.channel[i].interfaceVersion
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i])._doNotUse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 979, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_doNotUse, __pyx_t_1) < 0))) __PYX_ERR(0, 979, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":980
 * 
 *         ch["_doNotUse"]                     = driverConfig.channel[i]._doNotUse
 *         ch["driverVersion"]                 = driverConfig.channel[i].driverVersion             # <<<<<<<<<<<<<<
 *         ch["interfaceVersion"]              = driverConfig.channel[i].interfaceVersion
 *         ch["raw_data[10]"]                  = [driverConfig.channel[i].raw_data[j] for j in range(10)]
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).driverVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_driverVersion, __pyx_t_1) < 0))) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":981
 *         ch["_doNotUse"]                     = driverConfig.channel[i]._doNotUse
 *         ch["driverVersion"]                 = driverConfig.channel[i].driverVersion
 *         ch["interfaceVersion"]              = driverConfig.channel[i].interfaceVersion             # <<<<<<<<<<<<<<
 *         ch["raw_data[10]"]                  = [driverConfig.channel[i].raw_data[j] for j in range(10)]
 *         ch["serialNumber"]                  = driverConfig.channel[i].serialNumber
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).interfaceVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_interfaceVersion, __pyx_t_1) < 0))) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":982
 *         ch["driverVersion"]                 = driverConfig.channel[i].driverVersion
 *         ch["interfaceVersion"]              = driverConfig.channel[i].interfaceVersion
 *         ch["raw_data[10]"]                  = [driverConfig.channel[i].raw_data[j] for j in range(10)]             # <<<<<<<<<<<<<<
 *         ch["serialNumber"]                  = driverConfig.channel[i].serialNumber
 *         ch["articleNumber"]                 = driverConfig.channel[i].articleNumber
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 982, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      for (__pyx_t_2 = 0; __pyx_t_2 < 10; __pyx_t_2+=1) {
        __pyx_9genexpr13__pyx_v_j = __pyx_t_2;
        __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(((__pyx_v_driverConfig.channel[__pyx_v_i]).raw_data[__pyx_9genexpr13__pyx_v_j])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 982, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 982, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    } /* exit inner scope */
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_kp_s_raw_data_10, __pyx_t_1) < 0))) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":983
 *         ch["interfaceVersion"]              = driverConfig.channel[i].interfaceVersion
 *         ch["raw_data[10]"]                  = [driverConfig.channel[i].raw_data[j] for j in range(10)]
 *         ch["serialNumber"]                  = driverConfig.channel[i].serialNumber             # <<<<<<<<<<<<<<
 *         ch["articleNumber"]                 = driverConfig.channel[i].articleNumber
 *         ch["transceiverName"]               = bytes(driverConfig.channel[i].transceiverName)
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).serialNumber); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_serialNumber, __pyx_t_1) < 0))) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":984
 *         ch["raw_data[10]"]                  = [driverConfig.channel[i].raw_data[j] for j in range(10)]
 *         ch["serialNumber"]                  = driverConfig.channel[i].serialNumber
 *         ch["articleNumber"]                 = driverConfig.channel[i].articleNumber             # <<<<<<<<<<<<<<
 *         ch["transceiverName"]               = bytes(driverConfig.channel[i].transceiverName)
 *         ch["specialCabFlags"]               = driverConfig.channel[i].specialCabFlags
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).articleNumber); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_articleNumber, __pyx_t_1) < 0))) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":985
 *         ch["serialNumber"]                  = driverConfig.channel[i].serialNumber
 *         ch["articleNumber"]                 = driverConfig.channel[i].articleNumber
 *         ch["transceiverName"]               = bytes(driverConfig.channel[i].transceiverName)             # <<<<<<<<<<<<<<
 *         ch["specialCabFlags"]               = driverConfig.channel[i].specialCabFlags
 *         ch["dominantTimeout"]               = driverConfig.channel[i].dominantTimeout
 */
    __pyx_t_1 = __Pyx_PyObject_FromString((__pyx_v_driverConfig.channel[__pyx_v_i]).transceiverName); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_transceiverName, __pyx_t_3) < 0))) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":986
 *         ch["articleNumber"]                 = driverConfig.channel[i].articleNumber
 *         ch["transceiverName"]               = bytes(driverConfig.channel[i].transceiverName)
 *         ch["specialCabFlags"]               = driverConfig.channel[i].specialCabFlags             # <<<<<<<<<<<<<<
 *         ch["dominantTimeout"]               = driverConfig.channel[i].dominantTimeout
 *         ch["dominantRecessiveDelay"]        = driverConfig.channel[i].dominantRecessiveDelay
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).specialCabFlags); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_specialCabFlags, __pyx_t_3) < 0))) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":987
 *         ch["transceiverName"]               = bytes(driverConfig.channel[i].transceiverName)
 *         ch["specialCabFlags"]               = driverConfig.channel[i].specialCabFlags
 *         ch["dominantTimeout"]               = driverConfig.channel[i].dominantTimeout             # <<<<<<<<<<<<<<
 *         ch["dominantRecessiveDelay"]        = driverConfig.channel[i].dominantRecessiveDelay
 *         ch["recessiveDominantDelay"]        = driverConfig.channel[i].recessiveDominantDelay
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).dominantTimeout); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_dominantTimeout, __pyx_t_3) < 0))) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":988
 *         ch["specialCabFlags"]               = driverConfig.channel[i].specialCabFlags
 *         ch["dominantTimeout"]               = driverConfig.channel[i].dominantTimeout
 *         ch["dominantRecessiveDelay"]        = driverConfig.channel[i].dominantRecessiveDelay             # <<<<<<<<<<<<<<
 *         ch["recessiveDominantDelay"]        = driverConfig.channel[i].recessiveDominantDelay
 *         ch["connectionInfo"]                = driverConfig.channel[i].connectionInfo
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).dominantRecessiveDelay); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_dominantRecessiveDelay, __pyx_t_3) < 0))) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":989
 *         ch["dominantTimeout"]               = driverConfig.channel[i].dominantTimeout
 *         ch["dominantRecessiveDelay"]        = driverConfig.channel[i].dominantRecessiveDelay
 *         ch["recessiveDominantDelay"]        = driverConfig.channel[i].recessiveDominantDelay             # <<<<<<<<<<<<<<
 *         ch["connectionInfo"]                = driverConfig.channel[i].connectionInfo
 *         ch["currentlyAvailableTimestamps"]  = driverConfig.channel[i].currentlyAvailableTimestamps
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).recessiveDominantDelay); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_recessiveDominantDelay, __pyx_t_3) < 0))) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":990
 *         ch["dominantRecessiveDelay"]        = driverConfig.channel[i].dominantRecessiveDelay
 *         ch["recessiveDominantDelay"]        = driverConfig.channel[i].recessiveDominantDelay
 *         ch["connectionInfo"]                = driverConfig.channel[i].connectionInfo             # <<<<<<<<<<<<<<
 *         ch["currentlyAvailableTimestamps"]  = driverConfig.channel[i].currentlyAvailableTimestamps
 *         ch["minimalSupplyVoltage"]          = driverConfig.channel[i].minimalSupplyVoltage
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).connectionInfo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_connectionInfo, __pyx_t_3) < 0))) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":991
 *         ch["recessiveDominantDelay"]        = driverConfig.channel[i].recessiveDominantDelay
 *         ch["connectionInfo"]                = driverConfig.channel[i].connectionInfo
 *         ch["currentlyAvailableTimestamps"]  = driverConfig.channel[i].currentlyAvailableTimestamps             # <<<<<<<<<<<<<<
 *         ch["minimalSupplyVoltage"]          = driverConfig.channel[i].minimalSupplyVoltage
 *         ch["maximalSupplyVoltage"]          = driverConfig.channel[i].maximalSupplyVoltage
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).currentlyAvailableTimestamps); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_currentlyAvailableTimestamps, __pyx_t_3) < 0))) __PYX_ERR(0, 991, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":992
 *         ch["connectionInfo"]                = driverConfig.channel[i].connectionInfo
 *         ch["currentlyAvailableTimestamps"]  = driverConfig.channel[i].currentlyAvailableTimestamps
 *         ch["minimalSupplyVoltage"]          = driverConfig.channel[i].minimalSupplyVoltage             # <<<<<<<<<<<<<<
 *         ch["maximalSupplyVoltage"]          = driverConfig.channel[i].maximalSupplyVoltage
 *         ch["maximalBaudrate"]               = driverConfig.channel[i].maximalBaudrate
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).minimalSupplyVoltage); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_minimalSupplyVoltage, __pyx_t_3) < 0))) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":993
 *         ch["currentlyAvailableTimestamps"]  = driverConfig.channel[i].currentlyAvailableTimestamps
 *         ch["minimalSupplyVoltage"]          = driverConfig.channel[i].minimalSupplyVoltage
 *         ch["maximalSupplyVoltage"]          = driverConfig.channel[i].maximalSupplyVoltage             # <<<<<<<<<<<<<<
 *         ch["maximalBaudrate"]               = driverConfig.channel[i].maximalBaudrate
 *         ch["fpgaCoreCapabilities"]          = driverConfig.channel[i].fpgaCoreCapabilities
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).maximalSupplyVoltage); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_maximalSupplyVoltage, __pyx_t_3) < 0))) __PYX_ERR(0, 993, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":994
 *         ch["minimalSupplyVoltage"]          = driverConfig.channel[i].minimalSupplyVoltage
 *         ch["maximalSupplyVoltage"]          = driverConfig.channel[i].maximalSupplyVoltage
 *         ch["maximalBaudrate"]               = driverConfig.channel[i].maximalBaudrate             # <<<<<<<<<<<<<<
 *         ch["fpgaCoreCapabilities"]          = driverConfig.channel[i].fpgaCoreCapabilities
 *         ch["specialDeviceStatus"]           = driverConfig.channel[i].specialDeviceStatus
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int((__pyx_v_driverConfig.channel[__pyx_v_i]).maximalBaudrate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_maximalBaudrate, __pyx_t_3) < 0))) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":995
 *         ch["maximalSupplyVoltage"]          = driverConfig.channel[i].maximalSupplyVoltage
 *         ch["maximalBaudrate"]               = driverConfig.channel[i].maximalBaudrate
 *         ch["fpgaCoreCapabilities"]          = driverConfig.channel[i].fpgaCoreCapabilities             # <<<<<<<<<<<<<<
 *         ch["specialDeviceStatus"]           = driverConfig.channel[i].specialDeviceStatus
 *         ch["channelBusActiveCapabilities"]  = driverConfig.channel[i].channelBusActiveCapabilities
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).fpgaCoreCapabilities); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_fpgaCoreCapabilities, __pyx_t_3) < 0))) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":996
 *         ch["maximalBaudrate"]               = driverConfig.channel[i].maximalBaudrate
 *         ch["fpgaCoreCapabilities"]          = driverConfig.channel[i].fpgaCoreCapabilities
 *         ch["specialDeviceStatus"]           = driverConfig.channel[i].specialDeviceStatus             # <<<<<<<<<<<<<<
 *         ch["channelBusActiveCapabilities"]  = driverConfig.channel[i].channelBusActiveCapabilities
 *         ch["breakOffset"]                   = driverConfig.channel[i].breakOffset
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_char((__pyx_v_driverConfig.channel[__pyx_v_i]).specialDeviceStatus); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_specialDeviceStatus, __pyx_t_3) < 0))) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":997
 *         ch["fpgaCoreCapabilities"]          = driverConfig.channel[i].fpgaCoreCapabilities
 *         ch["specialDeviceStatus"]           = driverConfig.channel[i].specialDeviceStatus
 *         ch["channelBusActiveCapabilities"]  = driverConfig.channel[i].channelBusActiveCapabilities             # <<<<<<<<<<<<<<
 *         ch["breakOffset"]                   = driverConfig.channel[i].breakOffset
 *         ch["delimiterOffset"]               = driverConfig.channel[i].delimiterOffset
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).channelBusActiveCapabilities); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_channelBusActiveCapabilities, __pyx_t_3) < 0))) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":998
 *         ch["specialDeviceStatus"]           = driverConfig.channel[i].specialDeviceStatus
 *         ch["channelBusActiveCapabilities"]  = driverConfig.channel[i].channelBusActiveCapabilities
 *         ch["breakOffset"]                   = driverConfig.channel[i].breakOffset             # <<<<<<<<<<<<<<
 *         ch["delimiterOffset"]               = driverConfig.channel[i].delimiterOffset
 *         ch["reserved[3]"]                      = bytearray([driverConfig.channel[i].reserved[j] for j in range(3)])
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).breakOffset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 998, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_breakOffset, __pyx_t_3) < 0))) __PYX_ERR(0, 998, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":999
 *         ch["channelBusActiveCapabilities"]  = driverConfig.channel[i].channelBusActiveCapabilities
 *         ch["breakOffset"]                   = driverConfig.channel[i].breakOffset
 *         ch["delimiterOffset"]               = driverConfig.channel[i].delimiterOffset             # <<<<<<<<<<<<<<
 *         ch["reserved[3]"]                      = bytearray([driverConfig.channel[i].reserved[j] for j in range(3)])
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_short((__pyx_v_driverConfig.channel[__pyx_v_i]).delimiterOffset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_n_s_delimiterOffset, __pyx_t_3) < 0))) __PYX_ERR(0, 999, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vxlapi.pyx":1000
 *         ch["breakOffset"]                   = driverConfig.channel[i].breakOffset
 *         ch["delimiterOffset"]               = driverConfig.channel[i].delimiterOffset
 *         ch["reserved[3]"]                      = bytearray([driverConfig.channel[i].reserved[j] for j in range(3)])             # <<<<<<<<<<<<<<
 * 
 * 
 */
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {
        __pyx_9genexpr14__pyx_v_j = __pyx_t_2;
        __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(((__pyx_v_driverConfig.channel[__pyx_v_i]).reserved[__pyx_9genexpr14__pyx_v_j])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 1000, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    } /* exit inner scope */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely((PyDict_SetItem(__pyx_v_ch, __pyx_kp_s_reserved_3, __pyx_t_1) < 0))) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":1006
 * 
 * 
 *         channel.append(ch)             # <<<<<<<<<<<<<<
 * 
 *     pDriverConfig["channel"] = channel
 */
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_channel, __pyx_v_ch); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 1006, __pyx_L1_error)
  }

  /* "vxlapi.pyx":1008
 *         channel.append(ch)
 * 
 *     pDriverConfig["channel"] = channel             # <<<<<<<<<<<<<<
 * 
 *     return status
 */
  if (unlikely(__pyx_v_pDriverConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1008, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_pDriverConfig, __pyx_n_s_channel, __pyx_v_channel) < 0))) __PYX_ERR(0, 1008, __pyx_L1_error)

  /* "vxlapi.pyx":1010
 *     pDriverConfig["channel"] = channel
 * 
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def PopupHwConfig(char* callSign=NULL, unsigned int waitForFinish=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":861
 * 
 * 
 * def GetRemoteDriverConfig(dict pDriverConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef XLdriverConfig driverConfig
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("vxlapi.GetRemoteDriverConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_channel);
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XDECREF(__pyx_v_busParams);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_canFD);
  __Pyx_XDECREF(__pyx_v_can);
  __Pyx_XDECREF(__pyx_v_flexray);
  __Pyx_XDECREF(__pyx_v_most);
  __Pyx_XDECREF(__pyx_v_ethernet);
  __Pyx_XDECREF(__pyx_v_a429);
  __Pyx_XDECREF(__pyx_v_dir);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1012
 *     return status
 * 
 * def PopupHwConfig(char* callSign=NULL, unsigned int waitForFinish=0):             # <<<<<<<<<<<<<<
 *     return xlPopupHwConfig(callSign, waitForFinish)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_77PopupHwConfig(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_77PopupHwConfig = {"PopupHwConfig", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_77PopupHwConfig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_77PopupHwConfig(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  char *__pyx_v_callSign;
  unsigned int __pyx_v_waitForFinish;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PopupHwConfig (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_callSign,&__pyx_n_s_waitForFinish,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_callSign);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1012, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_waitForFinish);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1012, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PopupHwConfig") < 0)) __PYX_ERR(0, 1012, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_callSign = __Pyx_PyObject_AsWritableString(values[0]); if (unlikely((!__pyx_v_callSign) && PyErr_Occurred())) __PYX_ERR(0, 1012, __pyx_L3_error)
    } else {
      __pyx_v_callSign = ((char *)((void *)NULL));
    }
    if (values[1]) {
      __pyx_v_waitForFinish = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_waitForFinish == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1012, __pyx_L3_error)
    } else {
      __pyx_v_waitForFinish = ((unsigned int)((unsigned int)0));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PopupHwConfig", 0, 0, 2, __pyx_nargs); __PYX_ERR(0, 1012, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.PopupHwConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_76PopupHwConfig(__pyx_self, __pyx_v_callSign, __pyx_v_waitForFinish);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_76PopupHwConfig(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_callSign, unsigned int __pyx_v_waitForFinish) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PopupHwConfig", 1);

  /* "vxlapi.pyx":1013
 * 
 * def PopupHwConfig(char* callSign=NULL, unsigned int waitForFinish=0):
 *     return xlPopupHwConfig(callSign, waitForFinish)             # <<<<<<<<<<<<<<
 * 
 * def GetLicenseInfo(XLaccess channelMask, list pLicInfoArray):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlPopupHwConfig(__pyx_v_callSign, __pyx_v_waitForFinish)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1012
 *     return status
 * 
 * def PopupHwConfig(char* callSign=NULL, unsigned int waitForFinish=0):             # <<<<<<<<<<<<<<
 *     return xlPopupHwConfig(callSign, waitForFinish)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.PopupHwConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1015
 *     return xlPopupHwConfig(callSign, waitForFinish)
 * 
 * def GetLicenseInfo(XLaccess channelMask, list pLicInfoArray):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLlicenseInfo licInfoArray[1024]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_79GetLicenseInfo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_79GetLicenseInfo = {"GetLicenseInfo", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_79GetLicenseInfo, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_79GetLicenseInfo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLaccess __pyx_v_channelMask;
  PyObject *__pyx_v_pLicInfoArray = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetLicenseInfo (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_channelMask,&__pyx_n_s_pLicInfoArray,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_channelMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pLicInfoArray)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetLicenseInfo", 1, 2, 2, 1); __PYX_ERR(0, 1015, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetLicenseInfo") < 0)) __PYX_ERR(0, 1015, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_channelMask = __Pyx_PyInt_As_XLuint64(values[0]); if (unlikely((__pyx_v_channelMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L3_error)
    __pyx_v_pLicInfoArray = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetLicenseInfo", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1015, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetLicenseInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pLicInfoArray), (&PyList_Type), 1, "pLicInfoArray", 1))) __PYX_ERR(0, 1015, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_78GetLicenseInfo(__pyx_self, __pyx_v_channelMask, __pyx_v_pLicInfoArray);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_78GetLicenseInfo(CYTHON_UNUSED PyObject *__pyx_self, XLaccess __pyx_v_channelMask, PyObject *__pyx_v_pLicInfoArray) {
  XLstatus __pyx_v_status;
  XLlicenseInfo __pyx_v_licInfoArray[0x400];
  unsigned int __pyx_v_licInfoArraySize;
  unsigned int __pyx_v_i;
  PyObject *__pyx_v_licInfo = NULL;
  long __pyx_9genexpr15__pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  unsigned int __pyx_t_7;
  unsigned int __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetLicenseInfo", 0);
  __Pyx_INCREF(__pyx_v_pLicInfoArray);

  /* "vxlapi.pyx":1016
 * 
 * def GetLicenseInfo(XLaccess channelMask, list pLicInfoArray):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLlicenseInfo licInfoArray[1024]
 *     cdef unsigned int licInfoArraySize = 1024
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1018
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLlicenseInfo licInfoArray[1024]
 *     cdef unsigned int licInfoArraySize = 1024             # <<<<<<<<<<<<<<
 *     pLicInfoArray = []
 * 
 */
  __pyx_v_licInfoArraySize = 0x400;

  /* "vxlapi.pyx":1019
 *     cdef XLlicenseInfo licInfoArray[1024]
 *     cdef unsigned int licInfoArraySize = 1024
 *     pLicInfoArray = []             # <<<<<<<<<<<<<<
 * 
 *     if licInfoArraySize > 0:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_pLicInfoArray, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":1021
 *     pLicInfoArray = []
 * 
 *     if licInfoArraySize > 0:             # <<<<<<<<<<<<<<
 *         memset(licInfoArray, 0, sizeof(XLlicenseInfo) * licInfoArraySize)
 *         status = xlGetLicenseInfo(channelMask, licInfoArray, licInfoArraySize)
 */
  __pyx_t_3 = (__pyx_v_licInfoArraySize > 0);
  if (__pyx_t_3) {

    /* "vxlapi.pyx":1022
 * 
 *     if licInfoArraySize > 0:
 *         memset(licInfoArray, 0, sizeof(XLlicenseInfo) * licInfoArraySize)             # <<<<<<<<<<<<<<
 *         status = xlGetLicenseInfo(channelMask, licInfoArray, licInfoArraySize)
 *         if status == XL_SUCCESS:
 */
    (void)(memset(__pyx_v_licInfoArray, 0, ((sizeof(XLlicenseInfo)) * __pyx_v_licInfoArraySize)));

    /* "vxlapi.pyx":1023
 *     if licInfoArraySize > 0:
 *         memset(licInfoArray, 0, sizeof(XLlicenseInfo) * licInfoArraySize)
 *         status = xlGetLicenseInfo(channelMask, licInfoArray, licInfoArraySize)             # <<<<<<<<<<<<<<
 *         if status == XL_SUCCESS:
 *             for i in range(licInfoArraySize):
 */
    __pyx_v_status = xlGetLicenseInfo(__pyx_v_channelMask, __pyx_v_licInfoArray, __pyx_v_licInfoArraySize);

    /* "vxlapi.pyx":1024
 *         memset(licInfoArray, 0, sizeof(XLlicenseInfo) * licInfoArraySize)
 *         status = xlGetLicenseInfo(channelMask, licInfoArray, licInfoArraySize)
 *         if status == XL_SUCCESS:             # <<<<<<<<<<<<<<
 *             for i in range(licInfoArraySize):
 *                 licInfo = {}
 */
    __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_XL_SUCCESS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_3) {

      /* "vxlapi.pyx":1025
 *         status = xlGetLicenseInfo(channelMask, licInfoArray, licInfoArraySize)
 *         if status == XL_SUCCESS:
 *             for i in range(licInfoArraySize):             # <<<<<<<<<<<<<<
 *                 licInfo = {}
 *                 licInfo["bAvailable"] = licInfoArray[i].bAvailable
 */
      __pyx_t_6 = __pyx_v_licInfoArraySize;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "vxlapi.pyx":1026
 *         if status == XL_SUCCESS:
 *             for i in range(licInfoArraySize):
 *                 licInfo = {}             # <<<<<<<<<<<<<<
 *                 licInfo["bAvailable"] = licInfoArray[i].bAvailable
 *                 licInfo["licName"] =  bytearray([licInfoArray[i].licName[j] for j in range(65)])
 */
        __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1026, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_licInfo, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "vxlapi.pyx":1027
 *             for i in range(licInfoArraySize):
 *                 licInfo = {}
 *                 licInfo["bAvailable"] = licInfoArray[i].bAvailable             # <<<<<<<<<<<<<<
 *                 licInfo["licName"] =  bytearray([licInfoArray[i].licName[j] for j in range(65)])
 *                 pLicInfoArray.append(licInfo)
 */
        __pyx_t_5 = __Pyx_PyInt_From_unsigned_char((__pyx_v_licInfoArray[__pyx_v_i]).bAvailable); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1027, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely((PyDict_SetItem(__pyx_v_licInfo, __pyx_n_s_bAvailable, __pyx_t_5) < 0))) __PYX_ERR(0, 1027, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "vxlapi.pyx":1028
 *                 licInfo = {}
 *                 licInfo["bAvailable"] = licInfoArray[i].bAvailable
 *                 licInfo["licName"] =  bytearray([licInfoArray[i].licName[j] for j in range(65)])             # <<<<<<<<<<<<<<
 *                 pLicInfoArray.append(licInfo)
 *     return status
 */
        { /* enter inner scope */
          __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1028, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          for (__pyx_t_9 = 0; __pyx_t_9 < 65; __pyx_t_9+=1) {
            __pyx_9genexpr15__pyx_v_j = __pyx_t_9;
            __pyx_t_4 = __Pyx_PyInt_From_char(((__pyx_v_licInfoArray[__pyx_v_i]).licName[__pyx_9genexpr15__pyx_v_j])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1028, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1028, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
        } /* exit inner scope */
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1028, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely((PyDict_SetItem(__pyx_v_licInfo, __pyx_n_s_licName, __pyx_t_4) < 0))) __PYX_ERR(0, 1028, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "vxlapi.pyx":1029
 *                 licInfo["bAvailable"] = licInfoArray[i].bAvailable
 *                 licInfo["licName"] =  bytearray([licInfoArray[i].licName[j] for j in range(65)])
 *                 pLicInfoArray.append(licInfo)             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_pLicInfoArray, __pyx_v_licInfo); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 1029, __pyx_L1_error)
      }

      /* "vxlapi.pyx":1024
 *         memset(licInfoArray, 0, sizeof(XLlicenseInfo) * licInfoArraySize)
 *         status = xlGetLicenseInfo(channelMask, licInfoArray, licInfoArraySize)
 *         if status == XL_SUCCESS:             # <<<<<<<<<<<<<<
 *             for i in range(licInfoArraySize):
 *                 licInfo = {}
 */
    }

    /* "vxlapi.pyx":1021
 *     pLicInfoArray = []
 * 
 *     if licInfoArraySize > 0:             # <<<<<<<<<<<<<<
 *         memset(licInfoArray, 0, sizeof(XLlicenseInfo) * licInfoArraySize)
 *         status = xlGetLicenseInfo(channelMask, licInfoArray, licInfoArraySize)
 */
  }

  /* "vxlapi.pyx":1030
 *                 licInfo["licName"] =  bytearray([licInfoArray[i].licName[j] for j in range(65)])
 *                 pLicInfoArray.append(licInfo)
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def GetKeymanBoxes(list pBoxCount):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1015
 *     return xlPopupHwConfig(callSign, waitForFinish)
 * 
 * def GetLicenseInfo(XLaccess channelMask, list pLicInfoArray):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLlicenseInfo licInfoArray[1024]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vxlapi.GetLicenseInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_licInfo);
  __Pyx_XDECREF(__pyx_v_pLicInfoArray);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1032
 *     return status
 * 
 * def GetKeymanBoxes(list pBoxCount):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int boxCount = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_81GetKeymanBoxes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_81GetKeymanBoxes = {"GetKeymanBoxes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_81GetKeymanBoxes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_81GetKeymanBoxes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_pBoxCount = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetKeymanBoxes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pBoxCount,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pBoxCount)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1032, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetKeymanBoxes") < 0)) __PYX_ERR(0, 1032, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_pBoxCount = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetKeymanBoxes", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1032, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetKeymanBoxes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pBoxCount), (&PyList_Type), 1, "pBoxCount", 1))) __PYX_ERR(0, 1032, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_80GetKeymanBoxes(__pyx_self, __pyx_v_pBoxCount);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_80GetKeymanBoxes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pBoxCount) {
  XLstatus __pyx_v_status;
  unsigned int __pyx_v_boxCount;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetKeymanBoxes", 1);

  /* "vxlapi.pyx":1033
 * 
 * def GetKeymanBoxes(list pBoxCount):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef unsigned int boxCount = 0
 *     status = xlGetKeymanBoxes(&boxCount)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1034
 * def GetKeymanBoxes(list pBoxCount):
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int boxCount = 0             # <<<<<<<<<<<<<<
 *     status = xlGetKeymanBoxes(&boxCount)
 *     pBoxCount[0] = boxCount
 */
  __pyx_v_boxCount = 0;

  /* "vxlapi.pyx":1035
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int boxCount = 0
 *     status = xlGetKeymanBoxes(&boxCount)             # <<<<<<<<<<<<<<
 *     pBoxCount[0] = boxCount
 *     return status
 */
  __pyx_v_status = xlGetKeymanBoxes((&__pyx_v_boxCount));

  /* "vxlapi.pyx":1036
 *     cdef unsigned int boxCount = 0
 *     status = xlGetKeymanBoxes(&boxCount)
 *     pBoxCount[0] = boxCount             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_boxCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pBoxCount == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1036, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pBoxCount, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":1037
 *     status = xlGetKeymanBoxes(&boxCount)
 *     pBoxCount[0] = boxCount
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def GetKeymanInfo(unsigned int boxIndex, list pBoxMask, list pBoxSerial, list pLicInfo):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1032
 *     return status
 * 
 * def GetKeymanBoxes(list pBoxCount):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int boxCount = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.GetKeymanBoxes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1039
 *     return status
 * 
 * def GetKeymanInfo(unsigned int boxIndex, list pBoxMask, list pBoxSerial, list pLicInfo):             # <<<<<<<<<<<<<<
 *         cdef XLstatus status = XL_ERROR
 *         cdef unsigned int boxMask = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_83GetKeymanInfo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_83GetKeymanInfo = {"GetKeymanInfo", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_83GetKeymanInfo, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_83GetKeymanInfo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  unsigned int __pyx_v_boxIndex;
  PyObject *__pyx_v_pBoxMask = 0;
  PyObject *__pyx_v_pBoxSerial = 0;
  PyObject *__pyx_v_pLicInfo = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetKeymanInfo (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_boxIndex,&__pyx_n_s_pBoxMask,&__pyx_n_s_pBoxSerial,&__pyx_n_s_pLicInfo,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_boxIndex)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1039, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pBoxMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1039, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetKeymanInfo", 1, 4, 4, 1); __PYX_ERR(0, 1039, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pBoxSerial)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1039, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetKeymanInfo", 1, 4, 4, 2); __PYX_ERR(0, 1039, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pLicInfo)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1039, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetKeymanInfo", 1, 4, 4, 3); __PYX_ERR(0, 1039, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetKeymanInfo") < 0)) __PYX_ERR(0, 1039, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_boxIndex = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_boxIndex == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1039, __pyx_L3_error)
    __pyx_v_pBoxMask = ((PyObject*)values[1]);
    __pyx_v_pBoxSerial = ((PyObject*)values[2]);
    __pyx_v_pLicInfo = ((PyObject*)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetKeymanInfo", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 1039, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.GetKeymanInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pBoxMask), (&PyList_Type), 1, "pBoxMask", 1))) __PYX_ERR(0, 1039, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pBoxSerial), (&PyList_Type), 1, "pBoxSerial", 1))) __PYX_ERR(0, 1039, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pLicInfo), (&PyList_Type), 1, "pLicInfo", 1))) __PYX_ERR(0, 1039, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_82GetKeymanInfo(__pyx_self, __pyx_v_boxIndex, __pyx_v_pBoxMask, __pyx_v_pBoxSerial, __pyx_v_pLicInfo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_82GetKeymanInfo(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_boxIndex, PyObject *__pyx_v_pBoxMask, PyObject *__pyx_v_pBoxSerial, PyObject *__pyx_v_pLicInfo) {
  XLstatus __pyx_v_status;
  unsigned int __pyx_v_boxMask;
  unsigned int __pyx_v_boxSerial;
  XLuint64 __pyx_v_licInfo[4];
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetKeymanInfo", 0);
  __Pyx_INCREF(__pyx_v_pLicInfo);

  /* "vxlapi.pyx":1040
 * 
 * def GetKeymanInfo(unsigned int boxIndex, list pBoxMask, list pBoxSerial, list pLicInfo):
 *         cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *         cdef unsigned int boxMask = 0
 *         cdef unsigned int boxSerial = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1041
 * def GetKeymanInfo(unsigned int boxIndex, list pBoxMask, list pBoxSerial, list pLicInfo):
 *         cdef XLstatus status = XL_ERROR
 *         cdef unsigned int boxMask = 0             # <<<<<<<<<<<<<<
 *         cdef unsigned int boxSerial = 0
 *         cdef XLuint64 licInfo[4]
 */
  __pyx_v_boxMask = 0;

  /* "vxlapi.pyx":1042
 *         cdef XLstatus status = XL_ERROR
 *         cdef unsigned int boxMask = 0
 *         cdef unsigned int boxSerial = 0             # <<<<<<<<<<<<<<
 *         cdef XLuint64 licInfo[4]
 *         pLicInfo = []
 */
  __pyx_v_boxSerial = 0;

  /* "vxlapi.pyx":1044
 *         cdef unsigned int boxSerial = 0
 *         cdef XLuint64 licInfo[4]
 *         pLicInfo = []             # <<<<<<<<<<<<<<
 * 
 *         memset(licInfo, 0, sizeof(XLuint64) * 4)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_pLicInfo, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":1046
 *         pLicInfo = []
 * 
 *         memset(licInfo, 0, sizeof(XLuint64) * 4)             # <<<<<<<<<<<<<<
 *         status = xlGetKeymanInfo(boxIndex, &boxMask, &boxSerial, licInfo)
 *         if status == XL_SUCCESS:
 */
  (void)(memset(__pyx_v_licInfo, 0, ((sizeof(XLuint64)) * 4)));

  /* "vxlapi.pyx":1047
 * 
 *         memset(licInfo, 0, sizeof(XLuint64) * 4)
 *         status = xlGetKeymanInfo(boxIndex, &boxMask, &boxSerial, licInfo)             # <<<<<<<<<<<<<<
 *         if status == XL_SUCCESS:
 *             pBoxMask[0]   = boxMask
 */
  __pyx_v_status = xlGetKeymanInfo(__pyx_v_boxIndex, (&__pyx_v_boxMask), (&__pyx_v_boxSerial), __pyx_v_licInfo);

  /* "vxlapi.pyx":1048
 *         memset(licInfo, 0, sizeof(XLuint64) * 4)
 *         status = xlGetKeymanInfo(boxIndex, &boxMask, &boxSerial, licInfo)
 *         if status == XL_SUCCESS:             # <<<<<<<<<<<<<<
 *             pBoxMask[0]   = boxMask
 *             pBoxSerial[0] = boxSerial
 */
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_XL_SUCCESS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "vxlapi.pyx":1049
 *         status = xlGetKeymanInfo(boxIndex, &boxMask, &boxSerial, licInfo)
 *         if status == XL_SUCCESS:
 *             pBoxMask[0]   = boxMask             # <<<<<<<<<<<<<<
 *             pBoxSerial[0] = boxSerial
 *             for i in range(4):
 */
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_boxMask); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_v_pBoxMask == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1049, __pyx_L1_error)
    }
    if (unlikely((__Pyx_SetItemInt(__pyx_v_pBoxMask, 0, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "vxlapi.pyx":1050
 *         if status == XL_SUCCESS:
 *             pBoxMask[0]   = boxMask
 *             pBoxSerial[0] = boxSerial             # <<<<<<<<<<<<<<
 *             for i in range(4):
 *                 pLicInfo.append(licInfo[i])
 */
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_boxSerial); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1050, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_v_pBoxSerial == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1050, __pyx_L1_error)
    }
    if (unlikely((__Pyx_SetItemInt(__pyx_v_pBoxSerial, 0, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 1050, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "vxlapi.pyx":1051
 *             pBoxMask[0]   = boxMask
 *             pBoxSerial[0] = boxSerial
 *             for i in range(4):             # <<<<<<<<<<<<<<
 *                 pLicInfo.append(licInfo[i])
 *         return status
 */
    for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "vxlapi.pyx":1052
 *             pBoxSerial[0] = boxSerial
 *             for i in range(4):
 *                 pLicInfo.append(licInfo[i])             # <<<<<<<<<<<<<<
 *         return status
 * 
 */
      __pyx_t_4 = __Pyx_PyInt_From_XLuint64((__pyx_v_licInfo[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1052, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_pLicInfo, __pyx_t_4); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1052, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }

    /* "vxlapi.pyx":1048
 *         memset(licInfo, 0, sizeof(XLuint64) * 4)
 *         status = xlGetKeymanInfo(boxIndex, &boxMask, &boxSerial, licInfo)
 *         if status == XL_SUCCESS:             # <<<<<<<<<<<<<<
 *             pBoxMask[0]   = boxMask
 *             pBoxSerial[0] = boxSerial
 */
  }

  /* "vxlapi.pyx":1053
 *             for i in range(4):
 *                 pLicInfo.append(licInfo[i])
 *         return status             # <<<<<<<<<<<<<<
 * 
 * def CanFdSetConfiguration(XLportHandle portHandle, XLaccess accessMask, list pCanFdConf):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1039
 *     return status
 * 
 * def GetKeymanInfo(unsigned int boxIndex, list pBoxMask, list pBoxSerial, list pLicInfo):             # <<<<<<<<<<<<<<
 *         cdef XLstatus status = XL_ERROR
 *         cdef unsigned int boxMask = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vxlapi.GetKeymanInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pLicInfo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1055
 *         return status
 * 
 * def CanFdSetConfiguration(XLportHandle portHandle, XLaccess accessMask, list pCanFdConf):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLcanFdConf canFdConf
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_85CanFdSetConfiguration(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_85CanFdSetConfiguration = {"CanFdSetConfiguration", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_85CanFdSetConfiguration, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_85CanFdSetConfiguration(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  PyObject *__pyx_v_pCanFdConf = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanFdSetConfiguration (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_pCanFdConf,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1055, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1055, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanFdSetConfiguration", 1, 3, 3, 1); __PYX_ERR(0, 1055, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pCanFdConf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1055, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanFdSetConfiguration", 1, 3, 3, 2); __PYX_ERR(0, 1055, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanFdSetConfiguration") < 0)) __PYX_ERR(0, 1055, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1055, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1055, __pyx_L3_error)
    __pyx_v_pCanFdConf = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanFdSetConfiguration", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1055, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanFdSetConfiguration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pCanFdConf), (&PyList_Type), 1, "pCanFdConf", 1))) __PYX_ERR(0, 1055, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_84CanFdSetConfiguration(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_pCanFdConf);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_84CanFdSetConfiguration(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pCanFdConf) {
  XLstatus __pyx_v_status;
  XLcanFdConf __pyx_v_canFdConf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanFdSetConfiguration", 1);

  /* "vxlapi.pyx":1056
 * 
 * def CanFdSetConfiguration(XLportHandle portHandle, XLaccess accessMask, list pCanFdConf):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLcanFdConf canFdConf
 *     memset(&canFdConf, 0, sizeof(canFdConf))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1058
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLcanFdConf canFdConf
 *     memset(&canFdConf, 0, sizeof(canFdConf))             # <<<<<<<<<<<<<<
 * 
 *     status = xlCanFdSetConfiguration(portHandle, accessMask, &canFdConf)
 */
  (void)(memset((&__pyx_v_canFdConf), 0, (sizeof(__pyx_v_canFdConf))));

  /* "vxlapi.pyx":1060
 *     memset(&canFdConf, 0, sizeof(canFdConf))
 * 
 *     status = xlCanFdSetConfiguration(portHandle, accessMask, &canFdConf)             # <<<<<<<<<<<<<<
 * 
 *     pCanFdConf[0] = canFdConf
 */
  __pyx_v_status = xlCanFdSetConfiguration(__pyx_v_portHandle, __pyx_v_accessMask, (&__pyx_v_canFdConf));

  /* "vxlapi.pyx":1062
 *     status = xlCanFdSetConfiguration(portHandle, accessMask, &canFdConf)
 * 
 *     pCanFdConf[0] = canFdConf             # <<<<<<<<<<<<<<
 * 
 *     return status
 */
  __pyx_t_1 = __pyx_convert__to_py_XLcanFdConf(__pyx_v_canFdConf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pCanFdConf == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1062, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pCanFdConf, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":1064
 *     pCanFdConf[0] = canFdConf
 * 
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def CanTransmitEx(XLportHandle portHandle, XLaccess accessMask, unsigned char channelIndex, unsigned int msgCnt, list pMsgCntSent, list pXlCanTxEvt):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1055
 *         return status
 * 
 * def CanFdSetConfiguration(XLportHandle portHandle, XLaccess accessMask, list pCanFdConf):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLcanFdConf canFdConf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.CanFdSetConfiguration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1066
 *     return status
 * 
 * def CanTransmitEx(XLportHandle portHandle, XLaccess accessMask, unsigned char channelIndex, unsigned int msgCnt, list pMsgCntSent, list pXlCanTxEvt):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_87CanTransmitEx(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_87CanTransmitEx = {"CanTransmitEx", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_87CanTransmitEx, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_87CanTransmitEx(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned char __pyx_v_channelIndex;
  unsigned int __pyx_v_msgCnt;
  PyObject *__pyx_v_pMsgCntSent = 0;
  PyObject *__pyx_v_pXlCanTxEvt = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CanTransmitEx (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_channelIndex,&__pyx_n_s_msgCnt,&__pyx_n_s_pMsgCntSent,&__pyx_n_s_pXlCanTxEvt,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanTransmitEx", 1, 6, 6, 1); __PYX_ERR(0, 1066, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_channelIndex)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanTransmitEx", 1, 6, 6, 2); __PYX_ERR(0, 1066, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_msgCnt)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanTransmitEx", 1, 6, 6, 3); __PYX_ERR(0, 1066, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pMsgCntSent)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanTransmitEx", 1, 6, 6, 4); __PYX_ERR(0, 1066, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pXlCanTxEvt)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("CanTransmitEx", 1, 6, 6, 5); __PYX_ERR(0, 1066, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CanTransmitEx") < 0)) __PYX_ERR(0, 1066, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 6)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
    __pyx_v_channelIndex = __Pyx_PyInt_As_unsigned_char(values[2]); if (unlikely((__pyx_v_channelIndex == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
    __pyx_v_msgCnt = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_msgCnt == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
    __pyx_v_pMsgCntSent = ((PyObject*)values[4]);
    __pyx_v_pXlCanTxEvt = ((PyObject*)values[5]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CanTransmitEx", 1, 6, 6, __pyx_nargs); __PYX_ERR(0, 1066, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.CanTransmitEx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pMsgCntSent), (&PyList_Type), 1, "pMsgCntSent", 1))) __PYX_ERR(0, 1066, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pXlCanTxEvt), (&PyList_Type), 1, "pXlCanTxEvt", 1))) __PYX_ERR(0, 1066, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_86CanTransmitEx(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_channelIndex, __pyx_v_msgCnt, __pyx_v_pMsgCntSent, __pyx_v_pXlCanTxEvt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_86CanTransmitEx(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned char __pyx_v_channelIndex, unsigned int __pyx_v_msgCnt, PyObject *__pyx_v_pMsgCntSent, PyObject *__pyx_v_pXlCanTxEvt) {
  XLstatus __pyx_v_status;
  unsigned int __pyx_v_message_count;
  unsigned int __pyx_v_msgCntSent;
  XLcanTxEvent *__pyx_v_pXLcanTxEvents;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  unsigned short __pyx_t_7;
  unsigned int __pyx_t_8;
  unsigned char __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CanTransmitEx", 1);

  /* "vxlapi.pyx":1067
 * 
 * def CanTransmitEx(XLportHandle portHandle, XLaccess accessMask, unsigned char channelIndex, unsigned int msgCnt, list pMsgCntSent, list pXlCanTxEvt):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef unsigned int message_count = 0
 *     cdef unsigned int msgCntSent = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1068
 * def CanTransmitEx(XLportHandle portHandle, XLaccess accessMask, unsigned char channelIndex, unsigned int msgCnt, list pMsgCntSent, list pXlCanTxEvt):
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned int msgCntSent = 0
 *     cdef XLcanTxEvent* pXLcanTxEvents = NULL
 */
  __pyx_v_message_count = 0;

  /* "vxlapi.pyx":1069
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0
 *     cdef unsigned int msgCntSent = 0             # <<<<<<<<<<<<<<
 *     cdef XLcanTxEvent* pXLcanTxEvents = NULL
 * 
 */
  __pyx_v_msgCntSent = 0;

  /* "vxlapi.pyx":1070
 *     cdef unsigned int message_count = 0
 *     cdef unsigned int msgCntSent = 0
 *     cdef XLcanTxEvent* pXLcanTxEvents = NULL             # <<<<<<<<<<<<<<
 * 
 *     message_count = <unsigned int>len(pXlCanTxEvt)
 */
  __pyx_v_pXLcanTxEvents = NULL;

  /* "vxlapi.pyx":1072
 *     cdef XLcanTxEvent* pXLcanTxEvents = NULL
 * 
 *     message_count = <unsigned int>len(pXlCanTxEvt)             # <<<<<<<<<<<<<<
 *     if msgCnt > message_count:
 *         msgCnt = message_count
 */
  if (unlikely(__pyx_v_pXlCanTxEvt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1072, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyList_GET_SIZE(__pyx_v_pXlCanTxEvt); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1072, __pyx_L1_error)
  __pyx_v_message_count = ((unsigned int)__pyx_t_3);

  /* "vxlapi.pyx":1073
 * 
 *     message_count = <unsigned int>len(pXlCanTxEvt)
 *     if msgCnt > message_count:             # <<<<<<<<<<<<<<
 *         msgCnt = message_count
 * 
 */
  __pyx_t_4 = (__pyx_v_msgCnt > __pyx_v_message_count);
  if (__pyx_t_4) {

    /* "vxlapi.pyx":1074
 *     message_count = <unsigned int>len(pXlCanTxEvt)
 *     if msgCnt > message_count:
 *         msgCnt = message_count             # <<<<<<<<<<<<<<
 * 
 *     if msgCnt > 0:
 */
    __pyx_v_msgCnt = __pyx_v_message_count;

    /* "vxlapi.pyx":1073
 * 
 *     message_count = <unsigned int>len(pXlCanTxEvt)
 *     if msgCnt > message_count:             # <<<<<<<<<<<<<<
 *         msgCnt = message_count
 * 
 */
  }

  /* "vxlapi.pyx":1076
 *         msgCnt = message_count
 * 
 *     if msgCnt > 0:             # <<<<<<<<<<<<<<
 *         pXLcanTxEvents = <XLcanTxEvent *> malloc(sizeof(XLcanTxEvent) * msgCnt)
 *         memset(pXLcanTxEvents, 0, sizeof(XLcanTxEvent) * msgCnt)
 */
  __pyx_t_4 = (__pyx_v_msgCnt > 0);
  if (__pyx_t_4) {

    /* "vxlapi.pyx":1077
 * 
 *     if msgCnt > 0:
 *         pXLcanTxEvents = <XLcanTxEvent *> malloc(sizeof(XLcanTxEvent) * msgCnt)             # <<<<<<<<<<<<<<
 *         memset(pXLcanTxEvents, 0, sizeof(XLcanTxEvent) * msgCnt)
 *         for i, msg in enumerate(pXlCanTxEvt):
 */
    __pyx_v_pXLcanTxEvents = ((XLcanTxEvent *)malloc(((sizeof(XLcanTxEvent)) * __pyx_v_msgCnt)));

    /* "vxlapi.pyx":1078
 *     if msgCnt > 0:
 *         pXLcanTxEvents = <XLcanTxEvent *> malloc(sizeof(XLcanTxEvent) * msgCnt)
 *         memset(pXLcanTxEvents, 0, sizeof(XLcanTxEvent) * msgCnt)             # <<<<<<<<<<<<<<
 *         for i, msg in enumerate(pXlCanTxEvt):
 *             pXLcanTxEvents[i].tag                 = <unsigned short>XL_CAN_EV_TAG_TX_MSG
 */
    (void)(memset(__pyx_v_pXLcanTxEvents, 0, ((sizeof(XLcanTxEvent)) * __pyx_v_msgCnt)));

    /* "vxlapi.pyx":1079
 *         pXLcanTxEvents = <XLcanTxEvent *> malloc(sizeof(XLcanTxEvent) * msgCnt)
 *         memset(pXLcanTxEvents, 0, sizeof(XLcanTxEvent) * msgCnt)
 *         for i, msg in enumerate(pXlCanTxEvt):             # <<<<<<<<<<<<<<
 *             pXLcanTxEvents[i].tag                 = <unsigned short>XL_CAN_EV_TAG_TX_MSG
 *             pXLcanTxEvents[i].transId             = <unsigned short>0xffff
 */
    __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_v_pXlCanTxEvt; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = 0;
    for (;;) {
      {
        Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1079, __pyx_L1_error)
        #endif
        if (__pyx_t_5 >= __pyx_temp) break;
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1079, __pyx_L1_error)
      #else
      __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1079, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_msg, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_v_i = __pyx_t_3;
      __pyx_t_3 = (__pyx_t_3 + 1);

      /* "vxlapi.pyx":1080
 *         memset(pXLcanTxEvents, 0, sizeof(XLcanTxEvent) * msgCnt)
 *         for i, msg in enumerate(pXlCanTxEvt):
 *             pXLcanTxEvents[i].tag                 = <unsigned short>XL_CAN_EV_TAG_TX_MSG             # <<<<<<<<<<<<<<
 *             pXLcanTxEvents[i].transId             = <unsigned short>0xffff
 *             pXLcanTxEvents[i].channelIndex        = <unsigned char> channelIndex
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_XL_CAN_EV_TAG_TX_MSG); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1080, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_short(__pyx_t_6); if (unlikely((__pyx_t_7 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_pXLcanTxEvents[__pyx_v_i]).tag = ((unsigned short)__pyx_t_7);

      /* "vxlapi.pyx":1081
 *         for i, msg in enumerate(pXlCanTxEvt):
 *             pXLcanTxEvents[i].tag                 = <unsigned short>XL_CAN_EV_TAG_TX_MSG
 *             pXLcanTxEvents[i].transId             = <unsigned short>0xffff             # <<<<<<<<<<<<<<
 *             pXLcanTxEvents[i].channelIndex        = <unsigned char> channelIndex
 * 
 */
      (__pyx_v_pXLcanTxEvents[__pyx_v_i]).transId = ((unsigned short)0xffff);

      /* "vxlapi.pyx":1082
 *             pXLcanTxEvents[i].tag                 = <unsigned short>XL_CAN_EV_TAG_TX_MSG
 *             pXLcanTxEvents[i].transId             = <unsigned short>0xffff
 *             pXLcanTxEvents[i].channelIndex        = <unsigned char> channelIndex             # <<<<<<<<<<<<<<
 * 
 *             pXLcanTxEvents[i].tagData.canMsg.canId      = <unsigned int>msg["canId"]
 */
      (__pyx_v_pXLcanTxEvents[__pyx_v_i]).channelIndex = ((unsigned char)__pyx_v_channelIndex);

      /* "vxlapi.pyx":1084
 *             pXLcanTxEvents[i].channelIndex        = <unsigned char> channelIndex
 * 
 *             pXLcanTxEvents[i].tagData.canMsg.canId      = <unsigned int>msg["canId"]             # <<<<<<<<<<<<<<
 *             pXLcanTxEvents[i].tagData.canMsg.msgFlags   = <unsigned int>msg["msgFlags"]
 *             pXLcanTxEvents[i].tagData.canMsg.dlc        = <unsigned char>msg["dlc"]
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_msg, __pyx_n_s_canId); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1084, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1084, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_pXLcanTxEvents[__pyx_v_i]).tagData.canMsg.canId = ((unsigned int)__pyx_t_8);

      /* "vxlapi.pyx":1085
 * 
 *             pXLcanTxEvents[i].tagData.canMsg.canId      = <unsigned int>msg["canId"]
 *             pXLcanTxEvents[i].tagData.canMsg.msgFlags   = <unsigned int>msg["msgFlags"]             # <<<<<<<<<<<<<<
 *             pXLcanTxEvents[i].tagData.canMsg.dlc        = <unsigned char>msg["dlc"]
 *             for j, b in enumerate(msg["data"]):
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_msg, __pyx_n_s_msgFlags); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1085, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1085, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_pXLcanTxEvents[__pyx_v_i]).tagData.canMsg.msgFlags = ((unsigned int)__pyx_t_8);

      /* "vxlapi.pyx":1086
 *             pXLcanTxEvents[i].tagData.canMsg.canId      = <unsigned int>msg["canId"]
 *             pXLcanTxEvents[i].tagData.canMsg.msgFlags   = <unsigned int>msg["msgFlags"]
 *             pXLcanTxEvents[i].tagData.canMsg.dlc        = <unsigned char>msg["dlc"]             # <<<<<<<<<<<<<<
 *             for j, b in enumerate(msg["data"]):
 *                 pXLcanTxEvents[i].tagData.canMsg.data[j] = b
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_msg, __pyx_n_s_dlc); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1086, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __Pyx_PyInt_As_unsigned_char(__pyx_t_6); if (unlikely((__pyx_t_9 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1086, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_pXLcanTxEvents[__pyx_v_i]).tagData.canMsg.dlc = ((unsigned char)__pyx_t_9);

      /* "vxlapi.pyx":1087
 *             pXLcanTxEvents[i].tagData.canMsg.msgFlags   = <unsigned int>msg["msgFlags"]
 *             pXLcanTxEvents[i].tagData.canMsg.dlc        = <unsigned char>msg["dlc"]
 *             for j, b in enumerate(msg["data"]):             # <<<<<<<<<<<<<<
 *                 pXLcanTxEvents[i].tagData.canMsg.data[j] = b
 * 
 */
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_6 = __pyx_int_0;
      __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_v_msg, __pyx_n_s_data); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1087, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
        __pyx_t_11 = __pyx_t_10; __Pyx_INCREF(__pyx_t_11);
        __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1087, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1087, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_11))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_11);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1087, __pyx_L1_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_10); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 1087, __pyx_L1_error)
            #else
            __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1087, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_11);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1087, __pyx_L1_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_10); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 1087, __pyx_L1_error)
            #else
            __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1087, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_13(__pyx_t_11);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1087, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
        __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1087, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_6);
        __pyx_t_6 = __pyx_t_10;
        __pyx_t_10 = 0;

        /* "vxlapi.pyx":1088
 *             pXLcanTxEvents[i].tagData.canMsg.dlc        = <unsigned char>msg["dlc"]
 *             for j, b in enumerate(msg["data"]):
 *                 pXLcanTxEvents[i].tagData.canMsg.data[j] = b             # <<<<<<<<<<<<<<
 * 
 *             status = xlCanTransmitEx(portHandle, accessMask, msgCnt, &msgCntSent, pXLcanTxEvents)
 */
        __pyx_t_9 = __Pyx_PyInt_As_unsigned_char(__pyx_v_b); if (unlikely((__pyx_t_9 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1088, __pyx_L1_error)
        __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1088, __pyx_L1_error)
        ((__pyx_v_pXLcanTxEvents[__pyx_v_i]).tagData.canMsg.data[__pyx_t_14]) = __pyx_t_9;

        /* "vxlapi.pyx":1087
 *             pXLcanTxEvents[i].tagData.canMsg.msgFlags   = <unsigned int>msg["msgFlags"]
 *             pXLcanTxEvents[i].tagData.canMsg.dlc        = <unsigned char>msg["dlc"]
 *             for j, b in enumerate(msg["data"]):             # <<<<<<<<<<<<<<
 *                 pXLcanTxEvents[i].tagData.canMsg.data[j] = b
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "vxlapi.pyx":1090
 *                 pXLcanTxEvents[i].tagData.canMsg.data[j] = b
 * 
 *             status = xlCanTransmitEx(portHandle, accessMask, msgCnt, &msgCntSent, pXLcanTxEvents)             # <<<<<<<<<<<<<<
 *         free(pXLcanTxEvents)
 * 
 */
      __pyx_v_status = xlCanTransmitEx(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_msgCnt, (&__pyx_v_msgCntSent), __pyx_v_pXLcanTxEvents);

      /* "vxlapi.pyx":1079
 *         pXLcanTxEvents = <XLcanTxEvent *> malloc(sizeof(XLcanTxEvent) * msgCnt)
 *         memset(pXLcanTxEvents, 0, sizeof(XLcanTxEvent) * msgCnt)
 *         for i, msg in enumerate(pXlCanTxEvt):             # <<<<<<<<<<<<<<
 *             pXLcanTxEvents[i].tag                 = <unsigned short>XL_CAN_EV_TAG_TX_MSG
 *             pXLcanTxEvents[i].transId             = <unsigned short>0xffff
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vxlapi.pyx":1091
 * 
 *             status = xlCanTransmitEx(portHandle, accessMask, msgCnt, &msgCntSent, pXLcanTxEvents)
 *         free(pXLcanTxEvents)             # <<<<<<<<<<<<<<
 * 
 *     pMsgCntSent[0] = msgCntSent
 */
    free(__pyx_v_pXLcanTxEvents);

    /* "vxlapi.pyx":1076
 *         msgCnt = message_count
 * 
 *     if msgCnt > 0:             # <<<<<<<<<<<<<<
 *         pXLcanTxEvents = <XLcanTxEvent *> malloc(sizeof(XLcanTxEvent) * msgCnt)
 *         memset(pXLcanTxEvents, 0, sizeof(XLcanTxEvent) * msgCnt)
 */
  }

  /* "vxlapi.pyx":1093
 *         free(pXLcanTxEvents)
 * 
 *     pMsgCntSent[0] = msgCntSent             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_msgCntSent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pMsgCntSent == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1093, __pyx_L1_error)
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_pMsgCntSent, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 1093, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":1094
 * 
 *     pMsgCntSent[0] = msgCntSent
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def FrSetConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlClusterConfig):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1066
 *     return status
 * 
 * def CanTransmitEx(XLportHandle portHandle, XLaccess accessMask, unsigned char channelIndex, unsigned int msgCnt, list pMsgCntSent, list pXlCanTxEvt):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("vxlapi.CanTransmitEx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1096
 *     return status
 * 
 * def FrSetConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlClusterConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrClusterConfig clusterConfig
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_89FrSetConfiguration(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_89FrSetConfiguration = {"FrSetConfiguration", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_89FrSetConfiguration, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_89FrSetConfiguration(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  PyObject *__pyx_v_pxlClusterConfig = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrSetConfiguration (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_pxlClusterConfig,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1096, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1096, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetConfiguration", 1, 3, 3, 1); __PYX_ERR(0, 1096, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pxlClusterConfig)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1096, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetConfiguration", 1, 3, 3, 2); __PYX_ERR(0, 1096, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FrSetConfiguration") < 0)) __PYX_ERR(0, 1096, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1096, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1096, __pyx_L3_error)
    __pyx_v_pxlClusterConfig = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrSetConfiguration", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1096, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FrSetConfiguration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pxlClusterConfig), (&PyDict_Type), 1, "pxlClusterConfig", 1))) __PYX_ERR(0, 1096, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_88FrSetConfiguration(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_pxlClusterConfig);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_88FrSetConfiguration(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pxlClusterConfig) {
  XLstatus __pyx_v_status;
  XLfrClusterConfig __pyx_v_clusterConfig;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FrSetConfiguration", 0);
  __Pyx_INCREF(__pyx_v_pxlClusterConfig);

  /* "vxlapi.pyx":1097
 * 
 * def FrSetConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlClusterConfig):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLfrClusterConfig clusterConfig
 *     memset(&clusterConfig, 0, sizeof(clusterConfig))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1099
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrClusterConfig clusterConfig
 *     memset(&clusterConfig, 0, sizeof(clusterConfig))             # <<<<<<<<<<<<<<
 *     clusterConfig.busGuardianEnable                 = pxlClusterConfig["busGuardianEnable"]
 *     clusterConfig.baudrate                          = pxlClusterConfig["baudrate"]
 */
  (void)(memset((&__pyx_v_clusterConfig), 0, (sizeof(__pyx_v_clusterConfig))));

  /* "vxlapi.pyx":1100
 *     cdef XLfrClusterConfig clusterConfig
 *     memset(&clusterConfig, 0, sizeof(clusterConfig))
 *     clusterConfig.busGuardianEnable                 = pxlClusterConfig["busGuardianEnable"]             # <<<<<<<<<<<<<<
 *     clusterConfig.baudrate                          = pxlClusterConfig["baudrate"]
 *     clusterConfig.busGuardianTick                   = pxlClusterConfig["busGuardianTick"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1100, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_busGuardianEnable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.busGuardianEnable = __pyx_t_3;

  /* "vxlapi.pyx":1101
 *     memset(&clusterConfig, 0, sizeof(clusterConfig))
 *     clusterConfig.busGuardianEnable                 = pxlClusterConfig["busGuardianEnable"]
 *     clusterConfig.baudrate                          = pxlClusterConfig["baudrate"]             # <<<<<<<<<<<<<<
 *     clusterConfig.busGuardianTick                   = pxlClusterConfig["busGuardianTick"]
 *     clusterConfig.externalClockCorrectionMode       = pxlClusterConfig["externalClockCorrectionMode"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1101, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_baudrate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.baudrate = __pyx_t_3;

  /* "vxlapi.pyx":1102
 *     clusterConfig.busGuardianEnable                 = pxlClusterConfig["busGuardianEnable"]
 *     clusterConfig.baudrate                          = pxlClusterConfig["baudrate"]
 *     clusterConfig.busGuardianTick                   = pxlClusterConfig["busGuardianTick"]             # <<<<<<<<<<<<<<
 *     clusterConfig.externalClockCorrectionMode       = pxlClusterConfig["externalClockCorrectionMode"]
 *     clusterConfig.gColdStartAttempts                = pxlClusterConfig["gColdStartAttempts"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1102, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_busGuardianTick); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.busGuardianTick = __pyx_t_3;

  /* "vxlapi.pyx":1103
 *     clusterConfig.baudrate                          = pxlClusterConfig["baudrate"]
 *     clusterConfig.busGuardianTick                   = pxlClusterConfig["busGuardianTick"]
 *     clusterConfig.externalClockCorrectionMode       = pxlClusterConfig["externalClockCorrectionMode"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gColdStartAttempts                = pxlClusterConfig["gColdStartAttempts"]
 *     clusterConfig.gListenNoise                      = pxlClusterConfig["gListenNoise"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1103, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_externalClockCorrectionMode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.externalClockCorrectionMode = __pyx_t_3;

  /* "vxlapi.pyx":1104
 *     clusterConfig.busGuardianTick                   = pxlClusterConfig["busGuardianTick"]
 *     clusterConfig.externalClockCorrectionMode       = pxlClusterConfig["externalClockCorrectionMode"]
 *     clusterConfig.gColdStartAttempts                = pxlClusterConfig["gColdStartAttempts"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gListenNoise                      = pxlClusterConfig["gListenNoise"]
 *     clusterConfig.gMacroPerCycle                    = pxlClusterConfig["gMacroPerCycle"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1104, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gColdStartAttempts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gColdStartAttempts = __pyx_t_3;

  /* "vxlapi.pyx":1105
 *     clusterConfig.externalClockCorrectionMode       = pxlClusterConfig["externalClockCorrectionMode"]
 *     clusterConfig.gColdStartAttempts                = pxlClusterConfig["gColdStartAttempts"]
 *     clusterConfig.gListenNoise                      = pxlClusterConfig["gListenNoise"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gMacroPerCycle                    = pxlClusterConfig["gMacroPerCycle"]
 *     clusterConfig.gMaxWithoutClockCorrectionFatal   = pxlClusterConfig["gMaxWithoutClockCorrectionFatal"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1105, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gListenNoise); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gListenNoise = __pyx_t_3;

  /* "vxlapi.pyx":1106
 *     clusterConfig.gColdStartAttempts                = pxlClusterConfig["gColdStartAttempts"]
 *     clusterConfig.gListenNoise                      = pxlClusterConfig["gListenNoise"]
 *     clusterConfig.gMacroPerCycle                    = pxlClusterConfig["gMacroPerCycle"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gMaxWithoutClockCorrectionFatal   = pxlClusterConfig["gMaxWithoutClockCorrectionFatal"]
 *     clusterConfig.gMaxWithoutClockCorrectionPassive = pxlClusterConfig["gMaxWithoutClockCorrectionPassive"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1106, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gMacroPerCycle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gMacroPerCycle = __pyx_t_3;

  /* "vxlapi.pyx":1107
 *     clusterConfig.gListenNoise                      = pxlClusterConfig["gListenNoise"]
 *     clusterConfig.gMacroPerCycle                    = pxlClusterConfig["gMacroPerCycle"]
 *     clusterConfig.gMaxWithoutClockCorrectionFatal   = pxlClusterConfig["gMaxWithoutClockCorrectionFatal"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gMaxWithoutClockCorrectionPassive = pxlClusterConfig["gMaxWithoutClockCorrectionPassive"]
 *     clusterConfig.gNetworkManagementVectorLength    = pxlClusterConfig["gNetworkManagementVectorLength"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1107, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gMaxWithoutClockCorrectionFatal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gMaxWithoutClockCorrectionFatal = __pyx_t_3;

  /* "vxlapi.pyx":1108
 *     clusterConfig.gMacroPerCycle                    = pxlClusterConfig["gMacroPerCycle"]
 *     clusterConfig.gMaxWithoutClockCorrectionFatal   = pxlClusterConfig["gMaxWithoutClockCorrectionFatal"]
 *     clusterConfig.gMaxWithoutClockCorrectionPassive = pxlClusterConfig["gMaxWithoutClockCorrectionPassive"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gNetworkManagementVectorLength    = pxlClusterConfig["gNetworkManagementVectorLength"]
 *     clusterConfig.gNumberOfMinislots                = pxlClusterConfig["gNumberOfMinislots"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1108, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gMaxWithoutClockCorrectionPassiv); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gMaxWithoutClockCorrectionPassive = __pyx_t_3;

  /* "vxlapi.pyx":1109
 *     clusterConfig.gMaxWithoutClockCorrectionFatal   = pxlClusterConfig["gMaxWithoutClockCorrectionFatal"]
 *     clusterConfig.gMaxWithoutClockCorrectionPassive = pxlClusterConfig["gMaxWithoutClockCorrectionPassive"]
 *     clusterConfig.gNetworkManagementVectorLength    = pxlClusterConfig["gNetworkManagementVectorLength"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gNumberOfMinislots                = pxlClusterConfig["gNumberOfMinislots"]
 *     clusterConfig.gNumberOfStaticSlots              = pxlClusterConfig["gNumberOfStaticSlots"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1109, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gNetworkManagementVectorLength); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gNetworkManagementVectorLength = __pyx_t_3;

  /* "vxlapi.pyx":1110
 *     clusterConfig.gMaxWithoutClockCorrectionPassive = pxlClusterConfig["gMaxWithoutClockCorrectionPassive"]
 *     clusterConfig.gNetworkManagementVectorLength    = pxlClusterConfig["gNetworkManagementVectorLength"]
 *     clusterConfig.gNumberOfMinislots                = pxlClusterConfig["gNumberOfMinislots"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gNumberOfStaticSlots              = pxlClusterConfig["gNumberOfStaticSlots"]
 *     clusterConfig.gOffsetCorrectionStart            = pxlClusterConfig["gOffsetCorrectionStart"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1110, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gNumberOfMinislots); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gNumberOfMinislots = __pyx_t_3;

  /* "vxlapi.pyx":1111
 *     clusterConfig.gNetworkManagementVectorLength    = pxlClusterConfig["gNetworkManagementVectorLength"]
 *     clusterConfig.gNumberOfMinislots                = pxlClusterConfig["gNumberOfMinislots"]
 *     clusterConfig.gNumberOfStaticSlots              = pxlClusterConfig["gNumberOfStaticSlots"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gOffsetCorrectionStart            = pxlClusterConfig["gOffsetCorrectionStart"]
 *     clusterConfig.gPayloadLengthStatic              = pxlClusterConfig["gPayloadLengthStatic"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1111, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gNumberOfStaticSlots); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gNumberOfStaticSlots = __pyx_t_3;

  /* "vxlapi.pyx":1112
 *     clusterConfig.gNumberOfMinislots                = pxlClusterConfig["gNumberOfMinislots"]
 *     clusterConfig.gNumberOfStaticSlots              = pxlClusterConfig["gNumberOfStaticSlots"]
 *     clusterConfig.gOffsetCorrectionStart            = pxlClusterConfig["gOffsetCorrectionStart"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gPayloadLengthStatic              = pxlClusterConfig["gPayloadLengthStatic"]
 *     clusterConfig.gSyncNodeMax                      = pxlClusterConfig["gSyncNodeMax"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1112, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gOffsetCorrectionStart); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gOffsetCorrectionStart = __pyx_t_3;

  /* "vxlapi.pyx":1113
 *     clusterConfig.gNumberOfStaticSlots              = pxlClusterConfig["gNumberOfStaticSlots"]
 *     clusterConfig.gOffsetCorrectionStart            = pxlClusterConfig["gOffsetCorrectionStart"]
 *     clusterConfig.gPayloadLengthStatic              = pxlClusterConfig["gPayloadLengthStatic"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gSyncNodeMax                      = pxlClusterConfig["gSyncNodeMax"]
 *     clusterConfig.gdActionPointOffset               = pxlClusterConfig["gdActionPointOffset"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1113, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gPayloadLengthStatic); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gPayloadLengthStatic = __pyx_t_3;

  /* "vxlapi.pyx":1114
 *     clusterConfig.gOffsetCorrectionStart            = pxlClusterConfig["gOffsetCorrectionStart"]
 *     clusterConfig.gPayloadLengthStatic              = pxlClusterConfig["gPayloadLengthStatic"]
 *     clusterConfig.gSyncNodeMax                      = pxlClusterConfig["gSyncNodeMax"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdActionPointOffset               = pxlClusterConfig["gdActionPointOffset"]
 *     clusterConfig.gdDynamicSlotIdlePhase            = pxlClusterConfig["gdDynamicSlotIdlePhase"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1114, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gSyncNodeMax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gSyncNodeMax = __pyx_t_3;

  /* "vxlapi.pyx":1115
 *     clusterConfig.gPayloadLengthStatic              = pxlClusterConfig["gPayloadLengthStatic"]
 *     clusterConfig.gSyncNodeMax                      = pxlClusterConfig["gSyncNodeMax"]
 *     clusterConfig.gdActionPointOffset               = pxlClusterConfig["gdActionPointOffset"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdDynamicSlotIdlePhase            = pxlClusterConfig["gdDynamicSlotIdlePhase"]
 *     clusterConfig.gdMacrotick                       = pxlClusterConfig["gdMacrotick"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1115, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdActionPointOffset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdActionPointOffset = __pyx_t_3;

  /* "vxlapi.pyx":1116
 *     clusterConfig.gSyncNodeMax                      = pxlClusterConfig["gSyncNodeMax"]
 *     clusterConfig.gdActionPointOffset               = pxlClusterConfig["gdActionPointOffset"]
 *     clusterConfig.gdDynamicSlotIdlePhase            = pxlClusterConfig["gdDynamicSlotIdlePhase"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdMacrotick                       = pxlClusterConfig["gdMacrotick"]
 *     clusterConfig.gdMinislot                        = pxlClusterConfig["gdMinislot"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1116, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdDynamicSlotIdlePhase); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdDynamicSlotIdlePhase = __pyx_t_3;

  /* "vxlapi.pyx":1117
 *     clusterConfig.gdActionPointOffset               = pxlClusterConfig["gdActionPointOffset"]
 *     clusterConfig.gdDynamicSlotIdlePhase            = pxlClusterConfig["gdDynamicSlotIdlePhase"]
 *     clusterConfig.gdMacrotick                       = pxlClusterConfig["gdMacrotick"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdMinislot                        = pxlClusterConfig["gdMinislot"]
 *     clusterConfig.gdMiniSlotActionPointOffset       = pxlClusterConfig["gdMiniSlotActionPointOffset"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1117, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdMacrotick); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdMacrotick = __pyx_t_3;

  /* "vxlapi.pyx":1118
 *     clusterConfig.gdDynamicSlotIdlePhase            = pxlClusterConfig["gdDynamicSlotIdlePhase"]
 *     clusterConfig.gdMacrotick                       = pxlClusterConfig["gdMacrotick"]
 *     clusterConfig.gdMinislot                        = pxlClusterConfig["gdMinislot"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdMiniSlotActionPointOffset       = pxlClusterConfig["gdMiniSlotActionPointOffset"]
 *     clusterConfig.gdNIT                             = pxlClusterConfig["gdNIT"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1118, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdMinislot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdMinislot = __pyx_t_3;

  /* "vxlapi.pyx":1119
 *     clusterConfig.gdMacrotick                       = pxlClusterConfig["gdMacrotick"]
 *     clusterConfig.gdMinislot                        = pxlClusterConfig["gdMinislot"]
 *     clusterConfig.gdMiniSlotActionPointOffset       = pxlClusterConfig["gdMiniSlotActionPointOffset"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdNIT                             = pxlClusterConfig["gdNIT"]
 *     clusterConfig.gdStaticSlot                      = pxlClusterConfig["gdStaticSlot"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1119, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdMiniSlotActionPointOffset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdMiniSlotActionPointOffset = __pyx_t_3;

  /* "vxlapi.pyx":1120
 *     clusterConfig.gdMinislot                        = pxlClusterConfig["gdMinislot"]
 *     clusterConfig.gdMiniSlotActionPointOffset       = pxlClusterConfig["gdMiniSlotActionPointOffset"]
 *     clusterConfig.gdNIT                             = pxlClusterConfig["gdNIT"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdStaticSlot                      = pxlClusterConfig["gdStaticSlot"]
 *     clusterConfig.gdSymbolWindow                    = pxlClusterConfig["gdSymbolWindow"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1120, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdNIT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdNIT = __pyx_t_3;

  /* "vxlapi.pyx":1121
 *     clusterConfig.gdMiniSlotActionPointOffset       = pxlClusterConfig["gdMiniSlotActionPointOffset"]
 *     clusterConfig.gdNIT                             = pxlClusterConfig["gdNIT"]
 *     clusterConfig.gdStaticSlot                      = pxlClusterConfig["gdStaticSlot"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdSymbolWindow                    = pxlClusterConfig["gdSymbolWindow"]
 *     clusterConfig.gdTSSTransmitter                  = pxlClusterConfig["gdTSSTransmitter"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1121, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdStaticSlot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdStaticSlot = __pyx_t_3;

  /* "vxlapi.pyx":1122
 *     clusterConfig.gdNIT                             = pxlClusterConfig["gdNIT"]
 *     clusterConfig.gdStaticSlot                      = pxlClusterConfig["gdStaticSlot"]
 *     clusterConfig.gdSymbolWindow                    = pxlClusterConfig["gdSymbolWindow"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdTSSTransmitter                  = pxlClusterConfig["gdTSSTransmitter"]
 *     clusterConfig.gdWakeupSymbolRxIdle              = pxlClusterConfig["gdWakeupSymbolRxIdle"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1122, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdSymbolWindow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdSymbolWindow = __pyx_t_3;

  /* "vxlapi.pyx":1123
 *     clusterConfig.gdStaticSlot                      = pxlClusterConfig["gdStaticSlot"]
 *     clusterConfig.gdSymbolWindow                    = pxlClusterConfig["gdSymbolWindow"]
 *     clusterConfig.gdTSSTransmitter                  = pxlClusterConfig["gdTSSTransmitter"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdWakeupSymbolRxIdle              = pxlClusterConfig["gdWakeupSymbolRxIdle"]
 *     clusterConfig.gdWakeupSymbolRxLow               = pxlClusterConfig["gdWakeupSymbolRxLow"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1123, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdTSSTransmitter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdTSSTransmitter = __pyx_t_3;

  /* "vxlapi.pyx":1124
 *     clusterConfig.gdSymbolWindow                    = pxlClusterConfig["gdSymbolWindow"]
 *     clusterConfig.gdTSSTransmitter                  = pxlClusterConfig["gdTSSTransmitter"]
 *     clusterConfig.gdWakeupSymbolRxIdle              = pxlClusterConfig["gdWakeupSymbolRxIdle"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdWakeupSymbolRxLow               = pxlClusterConfig["gdWakeupSymbolRxLow"]
 *     clusterConfig.gdWakeupSymbolRxWindow            = pxlClusterConfig["gdWakeupSymbolRxWindow"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1124, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdWakeupSymbolRxIdle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdWakeupSymbolRxIdle = __pyx_t_3;

  /* "vxlapi.pyx":1125
 *     clusterConfig.gdTSSTransmitter                  = pxlClusterConfig["gdTSSTransmitter"]
 *     clusterConfig.gdWakeupSymbolRxIdle              = pxlClusterConfig["gdWakeupSymbolRxIdle"]
 *     clusterConfig.gdWakeupSymbolRxLow               = pxlClusterConfig["gdWakeupSymbolRxLow"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdWakeupSymbolRxWindow            = pxlClusterConfig["gdWakeupSymbolRxWindow"]
 *     clusterConfig.gdWakeupSymbolTxIdle              = pxlClusterConfig["gdWakeupSymbolTxIdle"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1125, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdWakeupSymbolRxLow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdWakeupSymbolRxLow = __pyx_t_3;

  /* "vxlapi.pyx":1126
 *     clusterConfig.gdWakeupSymbolRxIdle              = pxlClusterConfig["gdWakeupSymbolRxIdle"]
 *     clusterConfig.gdWakeupSymbolRxLow               = pxlClusterConfig["gdWakeupSymbolRxLow"]
 *     clusterConfig.gdWakeupSymbolRxWindow            = pxlClusterConfig["gdWakeupSymbolRxWindow"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdWakeupSymbolTxIdle              = pxlClusterConfig["gdWakeupSymbolTxIdle"]
 *     clusterConfig.gdWakeupSymbolTxLow               = pxlClusterConfig["gdWakeupSymbolTxLow"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1126, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdWakeupSymbolRxWindow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdWakeupSymbolRxWindow = __pyx_t_3;

  /* "vxlapi.pyx":1127
 *     clusterConfig.gdWakeupSymbolRxLow               = pxlClusterConfig["gdWakeupSymbolRxLow"]
 *     clusterConfig.gdWakeupSymbolRxWindow            = pxlClusterConfig["gdWakeupSymbolRxWindow"]
 *     clusterConfig.gdWakeupSymbolTxIdle              = pxlClusterConfig["gdWakeupSymbolTxIdle"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdWakeupSymbolTxLow               = pxlClusterConfig["gdWakeupSymbolTxLow"]
 *     clusterConfig.pAllowHaltDueToClock              = pxlClusterConfig["pAllowHaltDueToClock"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1127, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdWakeupSymbolTxIdle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdWakeupSymbolTxIdle = __pyx_t_3;

  /* "vxlapi.pyx":1128
 *     clusterConfig.gdWakeupSymbolRxWindow            = pxlClusterConfig["gdWakeupSymbolRxWindow"]
 *     clusterConfig.gdWakeupSymbolTxIdle              = pxlClusterConfig["gdWakeupSymbolTxIdle"]
 *     clusterConfig.gdWakeupSymbolTxLow               = pxlClusterConfig["gdWakeupSymbolTxLow"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pAllowHaltDueToClock              = pxlClusterConfig["pAllowHaltDueToClock"]
 *     clusterConfig.pAllowPassiveToActive             = pxlClusterConfig["pAllowPassiveToActive"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1128, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdWakeupSymbolTxLow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdWakeupSymbolTxLow = __pyx_t_3;

  /* "vxlapi.pyx":1129
 *     clusterConfig.gdWakeupSymbolTxIdle              = pxlClusterConfig["gdWakeupSymbolTxIdle"]
 *     clusterConfig.gdWakeupSymbolTxLow               = pxlClusterConfig["gdWakeupSymbolTxLow"]
 *     clusterConfig.pAllowHaltDueToClock              = pxlClusterConfig["pAllowHaltDueToClock"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pAllowPassiveToActive             = pxlClusterConfig["pAllowPassiveToActive"]
 *     clusterConfig.pChannels                         = pxlClusterConfig["pChannels"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1129, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pAllowHaltDueToClock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pAllowHaltDueToClock = __pyx_t_3;

  /* "vxlapi.pyx":1130
 *     clusterConfig.gdWakeupSymbolTxLow               = pxlClusterConfig["gdWakeupSymbolTxLow"]
 *     clusterConfig.pAllowHaltDueToClock              = pxlClusterConfig["pAllowHaltDueToClock"]
 *     clusterConfig.pAllowPassiveToActive             = pxlClusterConfig["pAllowPassiveToActive"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pChannels                         = pxlClusterConfig["pChannels"]
 *     clusterConfig.pClusterDriftDamping              = pxlClusterConfig["pClusterDriftDamping"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1130, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pAllowPassiveToActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pAllowPassiveToActive = __pyx_t_3;

  /* "vxlapi.pyx":1131
 *     clusterConfig.pAllowHaltDueToClock              = pxlClusterConfig["pAllowHaltDueToClock"]
 *     clusterConfig.pAllowPassiveToActive             = pxlClusterConfig["pAllowPassiveToActive"]
 *     clusterConfig.pChannels                         = pxlClusterConfig["pChannels"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pClusterDriftDamping              = pxlClusterConfig["pClusterDriftDamping"]
 *     clusterConfig.pDecodingCorrection               = pxlClusterConfig["pDecodingCorrection"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1131, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pChannels); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pChannels = __pyx_t_3;

  /* "vxlapi.pyx":1132
 *     clusterConfig.pAllowPassiveToActive             = pxlClusterConfig["pAllowPassiveToActive"]
 *     clusterConfig.pChannels                         = pxlClusterConfig["pChannels"]
 *     clusterConfig.pClusterDriftDamping              = pxlClusterConfig["pClusterDriftDamping"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pDecodingCorrection               = pxlClusterConfig["pDecodingCorrection"]
 *     clusterConfig.pDelayCompensationA               = pxlClusterConfig["pDelayCompensationA"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1132, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pClusterDriftDamping); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pClusterDriftDamping = __pyx_t_3;

  /* "vxlapi.pyx":1133
 *     clusterConfig.pChannels                         = pxlClusterConfig["pChannels"]
 *     clusterConfig.pClusterDriftDamping              = pxlClusterConfig["pClusterDriftDamping"]
 *     clusterConfig.pDecodingCorrection               = pxlClusterConfig["pDecodingCorrection"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pDelayCompensationA               = pxlClusterConfig["pDelayCompensationA"]
 *     clusterConfig.pDelayCompensationB               = pxlClusterConfig["pDelayCompensationB"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1133, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pDecodingCorrection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pDecodingCorrection = __pyx_t_3;

  /* "vxlapi.pyx":1134
 *     clusterConfig.pClusterDriftDamping              = pxlClusterConfig["pClusterDriftDamping"]
 *     clusterConfig.pDecodingCorrection               = pxlClusterConfig["pDecodingCorrection"]
 *     clusterConfig.pDelayCompensationA               = pxlClusterConfig["pDelayCompensationA"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pDelayCompensationB               = pxlClusterConfig["pDelayCompensationB"]
 *     clusterConfig.pExternOffsetCorrection           = pxlClusterConfig["pExternOffsetCorrection"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1134, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pDelayCompensationA); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pDelayCompensationA = __pyx_t_3;

  /* "vxlapi.pyx":1135
 *     clusterConfig.pDecodingCorrection               = pxlClusterConfig["pDecodingCorrection"]
 *     clusterConfig.pDelayCompensationA               = pxlClusterConfig["pDelayCompensationA"]
 *     clusterConfig.pDelayCompensationB               = pxlClusterConfig["pDelayCompensationB"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pExternOffsetCorrection           = pxlClusterConfig["pExternOffsetCorrection"]
 *     clusterConfig.pExternRateCorrection             = pxlClusterConfig["pExternRateCorrection"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1135, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pDelayCompensationB); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pDelayCompensationB = __pyx_t_3;

  /* "vxlapi.pyx":1136
 *     clusterConfig.pDelayCompensationA               = pxlClusterConfig["pDelayCompensationA"]
 *     clusterConfig.pDelayCompensationB               = pxlClusterConfig["pDelayCompensationB"]
 *     clusterConfig.pExternOffsetCorrection           = pxlClusterConfig["pExternOffsetCorrection"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pExternRateCorrection             = pxlClusterConfig["pExternRateCorrection"]
 *     clusterConfig.pKeySlotUsedForStartup            = pxlClusterConfig["pKeySlotUsedForStartup"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1136, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pExternOffsetCorrection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pExternOffsetCorrection = __pyx_t_3;

  /* "vxlapi.pyx":1137
 *     clusterConfig.pDelayCompensationB               = pxlClusterConfig["pDelayCompensationB"]
 *     clusterConfig.pExternOffsetCorrection           = pxlClusterConfig["pExternOffsetCorrection"]
 *     clusterConfig.pExternRateCorrection             = pxlClusterConfig["pExternRateCorrection"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pKeySlotUsedForStartup            = pxlClusterConfig["pKeySlotUsedForStartup"]
 *     clusterConfig.pKeySlotUsedForSync               = pxlClusterConfig["pKeySlotUsedForSync"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1137, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pExternRateCorrection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pExternRateCorrection = __pyx_t_3;

  /* "vxlapi.pyx":1138
 *     clusterConfig.pExternOffsetCorrection           = pxlClusterConfig["pExternOffsetCorrection"]
 *     clusterConfig.pExternRateCorrection             = pxlClusterConfig["pExternRateCorrection"]
 *     clusterConfig.pKeySlotUsedForStartup            = pxlClusterConfig["pKeySlotUsedForStartup"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pKeySlotUsedForSync               = pxlClusterConfig["pKeySlotUsedForSync"]
 *     clusterConfig.pLatestTx                         = pxlClusterConfig["pLatestTx"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1138, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pKeySlotUsedForStartup); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pKeySlotUsedForStartup = __pyx_t_3;

  /* "vxlapi.pyx":1139
 *     clusterConfig.pExternRateCorrection             = pxlClusterConfig["pExternRateCorrection"]
 *     clusterConfig.pKeySlotUsedForStartup            = pxlClusterConfig["pKeySlotUsedForStartup"]
 *     clusterConfig.pKeySlotUsedForSync               = pxlClusterConfig["pKeySlotUsedForSync"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pLatestTx                         = pxlClusterConfig["pLatestTx"]
 *     clusterConfig.pMacroInitialOffsetA              = pxlClusterConfig["pMacroInitialOffsetA"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1139, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pKeySlotUsedForSync); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pKeySlotUsedForSync = __pyx_t_3;

  /* "vxlapi.pyx":1140
 *     clusterConfig.pKeySlotUsedForStartup            = pxlClusterConfig["pKeySlotUsedForStartup"]
 *     clusterConfig.pKeySlotUsedForSync               = pxlClusterConfig["pKeySlotUsedForSync"]
 *     clusterConfig.pLatestTx                         = pxlClusterConfig["pLatestTx"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pMacroInitialOffsetA              = pxlClusterConfig["pMacroInitialOffsetA"]
 *     clusterConfig.pMacroInitialOffsetB              = pxlClusterConfig["pMacroInitialOffsetB"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1140, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pLatestTx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pLatestTx = __pyx_t_3;

  /* "vxlapi.pyx":1141
 *     clusterConfig.pKeySlotUsedForSync               = pxlClusterConfig["pKeySlotUsedForSync"]
 *     clusterConfig.pLatestTx                         = pxlClusterConfig["pLatestTx"]
 *     clusterConfig.pMacroInitialOffsetA              = pxlClusterConfig["pMacroInitialOffsetA"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pMacroInitialOffsetB              = pxlClusterConfig["pMacroInitialOffsetB"]
 *     clusterConfig.pMaxPayloadLengthDynamic          = pxlClusterConfig["pMaxPayloadLengthDynamic"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1141, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pMacroInitialOffsetA); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pMacroInitialOffsetA = __pyx_t_3;

  /* "vxlapi.pyx":1142
 *     clusterConfig.pLatestTx                         = pxlClusterConfig["pLatestTx"]
 *     clusterConfig.pMacroInitialOffsetA              = pxlClusterConfig["pMacroInitialOffsetA"]
 *     clusterConfig.pMacroInitialOffsetB              = pxlClusterConfig["pMacroInitialOffsetB"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pMaxPayloadLengthDynamic          = pxlClusterConfig["pMaxPayloadLengthDynamic"]
 *     clusterConfig.pMicroInitialOffsetA              = pxlClusterConfig["pMicroInitialOffsetA"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1142, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pMacroInitialOffsetB); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pMacroInitialOffsetB = __pyx_t_3;

  /* "vxlapi.pyx":1143
 *     clusterConfig.pMacroInitialOffsetA              = pxlClusterConfig["pMacroInitialOffsetA"]
 *     clusterConfig.pMacroInitialOffsetB              = pxlClusterConfig["pMacroInitialOffsetB"]
 *     clusterConfig.pMaxPayloadLengthDynamic          = pxlClusterConfig["pMaxPayloadLengthDynamic"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pMicroInitialOffsetA              = pxlClusterConfig["pMicroInitialOffsetA"]
 *     clusterConfig.pMicroInitialOffsetB              = pxlClusterConfig["pMicroInitialOffsetB"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1143, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pMaxPayloadLengthDynamic); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pMaxPayloadLengthDynamic = __pyx_t_3;

  /* "vxlapi.pyx":1144
 *     clusterConfig.pMacroInitialOffsetB              = pxlClusterConfig["pMacroInitialOffsetB"]
 *     clusterConfig.pMaxPayloadLengthDynamic          = pxlClusterConfig["pMaxPayloadLengthDynamic"]
 *     clusterConfig.pMicroInitialOffsetA              = pxlClusterConfig["pMicroInitialOffsetA"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pMicroInitialOffsetB              = pxlClusterConfig["pMicroInitialOffsetB"]
 *     clusterConfig.pMicroPerCycle                    = pxlClusterConfig["pMicroPerCycle"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1144, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pMicroInitialOffsetA); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pMicroInitialOffsetA = __pyx_t_3;

  /* "vxlapi.pyx":1145
 *     clusterConfig.pMaxPayloadLengthDynamic          = pxlClusterConfig["pMaxPayloadLengthDynamic"]
 *     clusterConfig.pMicroInitialOffsetA              = pxlClusterConfig["pMicroInitialOffsetA"]
 *     clusterConfig.pMicroInitialOffsetB              = pxlClusterConfig["pMicroInitialOffsetB"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pMicroPerCycle                    = pxlClusterConfig["pMicroPerCycle"]
 *     clusterConfig.pMicroPerMacroNom                 = pxlClusterConfig["pMicroPerMacroNom"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1145, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pMicroInitialOffsetB); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pMicroInitialOffsetB = __pyx_t_3;

  /* "vxlapi.pyx":1146
 *     clusterConfig.pMicroInitialOffsetA              = pxlClusterConfig["pMicroInitialOffsetA"]
 *     clusterConfig.pMicroInitialOffsetB              = pxlClusterConfig["pMicroInitialOffsetB"]
 *     clusterConfig.pMicroPerCycle                    = pxlClusterConfig["pMicroPerCycle"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pMicroPerMacroNom                 = pxlClusterConfig["pMicroPerMacroNom"]
 *     clusterConfig.pOffsetCorrectionOut              = pxlClusterConfig["pOffsetCorrectionOut"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1146, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pMicroPerCycle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pMicroPerCycle = __pyx_t_3;

  /* "vxlapi.pyx":1147
 *     clusterConfig.pMicroInitialOffsetB              = pxlClusterConfig["pMicroInitialOffsetB"]
 *     clusterConfig.pMicroPerCycle                    = pxlClusterConfig["pMicroPerCycle"]
 *     clusterConfig.pMicroPerMacroNom                 = pxlClusterConfig["pMicroPerMacroNom"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pOffsetCorrectionOut              = pxlClusterConfig["pOffsetCorrectionOut"]
 *     clusterConfig.pRateCorrectionOut                = pxlClusterConfig["pRateCorrectionOut"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1147, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pMicroPerMacroNom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pMicroPerMacroNom = __pyx_t_3;

  /* "vxlapi.pyx":1148
 *     clusterConfig.pMicroPerCycle                    = pxlClusterConfig["pMicroPerCycle"]
 *     clusterConfig.pMicroPerMacroNom                 = pxlClusterConfig["pMicroPerMacroNom"]
 *     clusterConfig.pOffsetCorrectionOut              = pxlClusterConfig["pOffsetCorrectionOut"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pRateCorrectionOut                = pxlClusterConfig["pRateCorrectionOut"]
 *     clusterConfig.pSamplesPerMicrotick              = pxlClusterConfig["pSamplesPerMicrotick"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1148, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pOffsetCorrectionOut); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pOffsetCorrectionOut = __pyx_t_3;

  /* "vxlapi.pyx":1149
 *     clusterConfig.pMicroPerMacroNom                 = pxlClusterConfig["pMicroPerMacroNom"]
 *     clusterConfig.pOffsetCorrectionOut              = pxlClusterConfig["pOffsetCorrectionOut"]
 *     clusterConfig.pRateCorrectionOut                = pxlClusterConfig["pRateCorrectionOut"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pSamplesPerMicrotick              = pxlClusterConfig["pSamplesPerMicrotick"]
 *     clusterConfig.pSingleSlotEnabled                = pxlClusterConfig["pSingleSlotEnabled"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1149, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pRateCorrectionOut); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pRateCorrectionOut = __pyx_t_3;

  /* "vxlapi.pyx":1150
 *     clusterConfig.pOffsetCorrectionOut              = pxlClusterConfig["pOffsetCorrectionOut"]
 *     clusterConfig.pRateCorrectionOut                = pxlClusterConfig["pRateCorrectionOut"]
 *     clusterConfig.pSamplesPerMicrotick              = pxlClusterConfig["pSamplesPerMicrotick"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pSingleSlotEnabled                = pxlClusterConfig["pSingleSlotEnabled"]
 *     clusterConfig.pWakeupChannel                    = pxlClusterConfig["pWakeupChannel"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1150, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pSamplesPerMicrotick); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pSamplesPerMicrotick = __pyx_t_3;

  /* "vxlapi.pyx":1151
 *     clusterConfig.pRateCorrectionOut                = pxlClusterConfig["pRateCorrectionOut"]
 *     clusterConfig.pSamplesPerMicrotick              = pxlClusterConfig["pSamplesPerMicrotick"]
 *     clusterConfig.pSingleSlotEnabled                = pxlClusterConfig["pSingleSlotEnabled"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pWakeupChannel                    = pxlClusterConfig["pWakeupChannel"]
 *     clusterConfig.pWakeupPattern                    = pxlClusterConfig["pWakeupPattern"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1151, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pSingleSlotEnabled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pSingleSlotEnabled = __pyx_t_3;

  /* "vxlapi.pyx":1152
 *     clusterConfig.pSamplesPerMicrotick              = pxlClusterConfig["pSamplesPerMicrotick"]
 *     clusterConfig.pSingleSlotEnabled                = pxlClusterConfig["pSingleSlotEnabled"]
 *     clusterConfig.pWakeupChannel                    = pxlClusterConfig["pWakeupChannel"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pWakeupPattern                    = pxlClusterConfig["pWakeupPattern"]
 *     clusterConfig.pdAcceptedStartupRange            = pxlClusterConfig["pdAcceptedStartupRange"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1152, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pWakeupChannel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pWakeupChannel = __pyx_t_3;

  /* "vxlapi.pyx":1153
 *     clusterConfig.pSingleSlotEnabled                = pxlClusterConfig["pSingleSlotEnabled"]
 *     clusterConfig.pWakeupChannel                    = pxlClusterConfig["pWakeupChannel"]
 *     clusterConfig.pWakeupPattern                    = pxlClusterConfig["pWakeupPattern"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pdAcceptedStartupRange            = pxlClusterConfig["pdAcceptedStartupRange"]
 *     clusterConfig.pdListenTimeout                   = pxlClusterConfig["pdListenTimeout"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1153, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pWakeupPattern); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pWakeupPattern = __pyx_t_3;

  /* "vxlapi.pyx":1154
 *     clusterConfig.pWakeupChannel                    = pxlClusterConfig["pWakeupChannel"]
 *     clusterConfig.pWakeupPattern                    = pxlClusterConfig["pWakeupPattern"]
 *     clusterConfig.pdAcceptedStartupRange            = pxlClusterConfig["pdAcceptedStartupRange"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pdListenTimeout                   = pxlClusterConfig["pdListenTimeout"]
 *     clusterConfig.pdMaxDrift                        = pxlClusterConfig["pdMaxDrift"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1154, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pdAcceptedStartupRange); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pdAcceptedStartupRange = __pyx_t_3;

  /* "vxlapi.pyx":1155
 *     clusterConfig.pWakeupPattern                    = pxlClusterConfig["pWakeupPattern"]
 *     clusterConfig.pdAcceptedStartupRange            = pxlClusterConfig["pdAcceptedStartupRange"]
 *     clusterConfig.pdListenTimeout                   = pxlClusterConfig["pdListenTimeout"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pdMaxDrift                        = pxlClusterConfig["pdMaxDrift"]
 *     clusterConfig.pdMicrotick                       = pxlClusterConfig["pdMicrotick"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1155, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pdListenTimeout); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pdListenTimeout = __pyx_t_3;

  /* "vxlapi.pyx":1156
 *     clusterConfig.pdAcceptedStartupRange            = pxlClusterConfig["pdAcceptedStartupRange"]
 *     clusterConfig.pdListenTimeout                   = pxlClusterConfig["pdListenTimeout"]
 *     clusterConfig.pdMaxDrift                        = pxlClusterConfig["pdMaxDrift"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pdMicrotick                       = pxlClusterConfig["pdMicrotick"]
 *     clusterConfig.gdCASRxLowMax                     = pxlClusterConfig["gdCASRxLowMax"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1156, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pdMaxDrift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pdMaxDrift = __pyx_t_3;

  /* "vxlapi.pyx":1157
 *     clusterConfig.pdListenTimeout                   = pxlClusterConfig["pdListenTimeout"]
 *     clusterConfig.pdMaxDrift                        = pxlClusterConfig["pdMaxDrift"]
 *     clusterConfig.pdMicrotick                       = pxlClusterConfig["pdMicrotick"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gdCASRxLowMax                     = pxlClusterConfig["gdCASRxLowMax"]
 *     clusterConfig.gChannels                         = pxlClusterConfig["gChannels"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1157, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pdMicrotick); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pdMicrotick = __pyx_t_3;

  /* "vxlapi.pyx":1158
 *     clusterConfig.pdMaxDrift                        = pxlClusterConfig["pdMaxDrift"]
 *     clusterConfig.pdMicrotick                       = pxlClusterConfig["pdMicrotick"]
 *     clusterConfig.gdCASRxLowMax                     = pxlClusterConfig["gdCASRxLowMax"]             # <<<<<<<<<<<<<<
 *     clusterConfig.gChannels                         = pxlClusterConfig["gChannels"]
 *     clusterConfig.vExternOffsetControl              = pxlClusterConfig["vExternOffsetControl"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1158, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gdCASRxLowMax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gdCASRxLowMax = __pyx_t_3;

  /* "vxlapi.pyx":1159
 *     clusterConfig.pdMicrotick                       = pxlClusterConfig["pdMicrotick"]
 *     clusterConfig.gdCASRxLowMax                     = pxlClusterConfig["gdCASRxLowMax"]
 *     clusterConfig.gChannels                         = pxlClusterConfig["gChannels"]             # <<<<<<<<<<<<<<
 *     clusterConfig.vExternOffsetControl              = pxlClusterConfig["vExternOffsetControl"]
 *     clusterConfig.vExternRateControl                = pxlClusterConfig["vExternRateControl"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1159, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_gChannels); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.gChannels = __pyx_t_3;

  /* "vxlapi.pyx":1160
 *     clusterConfig.gdCASRxLowMax                     = pxlClusterConfig["gdCASRxLowMax"]
 *     clusterConfig.gChannels                         = pxlClusterConfig["gChannels"]
 *     clusterConfig.vExternOffsetControl              = pxlClusterConfig["vExternOffsetControl"]             # <<<<<<<<<<<<<<
 *     clusterConfig.vExternRateControl                = pxlClusterConfig["vExternRateControl"]
 *     clusterConfig.pChannelsMTS                      = pxlClusterConfig["pChannelsMTS"]
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1160, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_vExternOffsetControl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.vExternOffsetControl = __pyx_t_3;

  /* "vxlapi.pyx":1161
 *     clusterConfig.gChannels                         = pxlClusterConfig["gChannels"]
 *     clusterConfig.vExternOffsetControl              = pxlClusterConfig["vExternOffsetControl"]
 *     clusterConfig.vExternRateControl                = pxlClusterConfig["vExternRateControl"]             # <<<<<<<<<<<<<<
 *     clusterConfig.pChannelsMTS                      = pxlClusterConfig["pChannelsMTS"]
 *     status = xlFrSetConfiguration(portHandle, accessMask, &clusterConfig)
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1161, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_vExternRateControl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.vExternRateControl = __pyx_t_3;

  /* "vxlapi.pyx":1162
 *     clusterConfig.vExternOffsetControl              = pxlClusterConfig["vExternOffsetControl"]
 *     clusterConfig.vExternRateControl                = pxlClusterConfig["vExternRateControl"]
 *     clusterConfig.pChannelsMTS                      = pxlClusterConfig["pChannelsMTS"]             # <<<<<<<<<<<<<<
 *     status = xlFrSetConfiguration(portHandle, accessMask, &clusterConfig)
 *     pxlClusterConfig = clusterConfig
 */
  if (unlikely(__pyx_v_pxlClusterConfig == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1162, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pxlClusterConfig, __pyx_n_s_pChannelsMTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clusterConfig.pChannelsMTS = __pyx_t_3;

  /* "vxlapi.pyx":1163
 *     clusterConfig.vExternRateControl                = pxlClusterConfig["vExternRateControl"]
 *     clusterConfig.pChannelsMTS                      = pxlClusterConfig["pChannelsMTS"]
 *     status = xlFrSetConfiguration(portHandle, accessMask, &clusterConfig)             # <<<<<<<<<<<<<<
 *     pxlClusterConfig = clusterConfig
 *     return status
 */
  __pyx_v_status = xlFrSetConfiguration(__pyx_v_portHandle, __pyx_v_accessMask, (&__pyx_v_clusterConfig));

  /* "vxlapi.pyx":1164
 *     clusterConfig.pChannelsMTS                      = pxlClusterConfig["pChannelsMTS"]
 *     status = xlFrSetConfiguration(portHandle, accessMask, &clusterConfig)
 *     pxlClusterConfig = clusterConfig             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __pyx_convert__to_py_XLfrClusterConfig(__pyx_v_clusterConfig); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1)) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_1))) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_pxlClusterConfig, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":1165
 *     status = xlFrSetConfiguration(portHandle, accessMask, &clusterConfig)
 *     pxlClusterConfig = clusterConfig
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def FrGetChannelConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlFrChannelConfig):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1096
 *     return status
 * 
 * def FrSetConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlClusterConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrClusterConfig clusterConfig
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.FrSetConfiguration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pxlClusterConfig);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1167
 *     return status
 * 
 * def FrGetChannelConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlFrChannelConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrChannelConfig channelConfig
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_91FrGetChannelConfiguration(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_91FrGetChannelConfiguration = {"FrGetChannelConfiguration", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_91FrGetChannelConfiguration, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_91FrGetChannelConfiguration(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  CYTHON_UNUSED PyObject *__pyx_v_pxlFrChannelConfig = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrGetChannelConfiguration (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_pxlFrChannelConfig,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1167, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1167, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrGetChannelConfiguration", 1, 3, 3, 1); __PYX_ERR(0, 1167, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pxlFrChannelConfig)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1167, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrGetChannelConfiguration", 1, 3, 3, 2); __PYX_ERR(0, 1167, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FrGetChannelConfiguration") < 0)) __PYX_ERR(0, 1167, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1167, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1167, __pyx_L3_error)
    __pyx_v_pxlFrChannelConfig = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrGetChannelConfiguration", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1167, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FrGetChannelConfiguration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pxlFrChannelConfig), (&PyDict_Type), 1, "pxlFrChannelConfig", 1))) __PYX_ERR(0, 1167, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_90FrGetChannelConfiguration(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_pxlFrChannelConfig);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_90FrGetChannelConfiguration(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, CYTHON_UNUSED PyObject *__pyx_v_pxlFrChannelConfig) {
  XLstatus __pyx_v_status;
  XLfrChannelConfig __pyx_v_channelConfig;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FrGetChannelConfiguration", 0);
  __Pyx_INCREF(__pyx_v_pxlFrChannelConfig);

  /* "vxlapi.pyx":1168
 * 
 * def FrGetChannelConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlFrChannelConfig):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLfrChannelConfig channelConfig
 *     status = xlFrGetChannelConfiguration(portHandle, accessMask, &channelConfig)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1170
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrChannelConfig channelConfig
 *     status = xlFrGetChannelConfiguration(portHandle, accessMask, &channelConfig)             # <<<<<<<<<<<<<<
 *     pxlFrChannelConfig = channelConfig
 *     return status
 */
  __pyx_v_status = xlFrGetChannelConfiguration(__pyx_v_portHandle, __pyx_v_accessMask, (&__pyx_v_channelConfig));

  /* "vxlapi.pyx":1171
 *     cdef XLfrChannelConfig channelConfig
 *     status = xlFrGetChannelConfiguration(portHandle, accessMask, &channelConfig)
 *     pxlFrChannelConfig = channelConfig             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __pyx_convert__to_py_XLfrChannelConfig(__pyx_v_channelConfig); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1)) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_1))) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_pxlFrChannelConfig, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":1172
 *     status = xlFrGetChannelConfiguration(portHandle, accessMask, &channelConfig)
 *     pxlFrChannelConfig = channelConfig
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def FrSetMode(XLportHandle portHandle, XLaccess accessMask, dict frMode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1167
 *     return status
 * 
 * def FrGetChannelConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlFrChannelConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrChannelConfig channelConfig
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.FrGetChannelConfiguration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pxlFrChannelConfig);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1174
 *     return status
 * 
 * def FrSetMode(XLportHandle portHandle, XLaccess accessMask, dict frMode):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrMode mode
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_93FrSetMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_93FrSetMode = {"FrSetMode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_93FrSetMode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_93FrSetMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  PyObject *__pyx_v_frMode = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrSetMode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_frMode,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1174, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1174, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetMode", 1, 3, 3, 1); __PYX_ERR(0, 1174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frMode)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1174, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetMode", 1, 3, 3, 2); __PYX_ERR(0, 1174, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FrSetMode") < 0)) __PYX_ERR(0, 1174, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1174, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1174, __pyx_L3_error)
    __pyx_v_frMode = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrSetMode", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1174, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FrSetMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_frMode), (&PyDict_Type), 1, "frMode", 1))) __PYX_ERR(0, 1174, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_92FrSetMode(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_frMode);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_92FrSetMode(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_frMode) {
  XLstatus __pyx_v_status;
  XLfrMode __pyx_v_mode;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FrSetMode", 0);
  __Pyx_INCREF(__pyx_v_frMode);

  /* "vxlapi.pyx":1175
 * 
 * def FrSetMode(XLportHandle portHandle, XLaccess accessMask, dict frMode):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLfrMode mode
 *     memset(&mode, 0, sizeof(mode))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1177
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrMode mode
 *     memset(&mode, 0, sizeof(mode))             # <<<<<<<<<<<<<<
 *     mode.frMode                 = frMode['frMode']
 *     mode.frStartupAttributes    = frMode['frStartupAttributes']
 */
  (void)(memset((&__pyx_v_mode), 0, (sizeof(__pyx_v_mode))));

  /* "vxlapi.pyx":1178
 *     cdef XLfrMode mode
 *     memset(&mode, 0, sizeof(mode))
 *     mode.frMode                 = frMode['frMode']             # <<<<<<<<<<<<<<
 *     mode.frStartupAttributes    = frMode['frStartupAttributes']
 *     status = xlFrSetMode(portHandle, accessMask, &mode)
 */
  if (unlikely(__pyx_v_frMode == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1178, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_frMode, __pyx_n_s_frMode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mode.frMode = __pyx_t_3;

  /* "vxlapi.pyx":1179
 *     memset(&mode, 0, sizeof(mode))
 *     mode.frMode                 = frMode['frMode']
 *     mode.frStartupAttributes    = frMode['frStartupAttributes']             # <<<<<<<<<<<<<<
 *     status = xlFrSetMode(portHandle, accessMask, &mode)
 *     frMode = mode
 */
  if (unlikely(__pyx_v_frMode == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1179, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_frMode, __pyx_n_s_frStartupAttributes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mode.frStartupAttributes = __pyx_t_3;

  /* "vxlapi.pyx":1180
 *     mode.frMode                 = frMode['frMode']
 *     mode.frStartupAttributes    = frMode['frStartupAttributes']
 *     status = xlFrSetMode(portHandle, accessMask, &mode)             # <<<<<<<<<<<<<<
 *     frMode = mode
 *     return status
 */
  __pyx_v_status = xlFrSetMode(__pyx_v_portHandle, __pyx_v_accessMask, (&__pyx_v_mode));

  /* "vxlapi.pyx":1181
 *     mode.frStartupAttributes    = frMode['frStartupAttributes']
 *     status = xlFrSetMode(portHandle, accessMask, &mode)
 *     frMode = mode             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __pyx_convert__to_py_XLfrMode(__pyx_v_mode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1)) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_1))) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_frMode, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":1182
 *     status = xlFrSetMode(portHandle, accessMask, &mode)
 *     frMode = mode
 *     return status             # <<<<<<<<<<<<<<
 * 
 * cdef GetEventBufferFromDict(XLfrEvent *pEventBuffer, dict dictEventBuffer):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1174
 *     return status
 * 
 * def FrSetMode(XLportHandle portHandle, XLaccess accessMask, dict frMode):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrMode mode
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.FrSetMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_frMode);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1184
 *     return status
 * 
 * cdef GetEventBufferFromDict(XLfrEvent *pEventBuffer, dict dictEventBuffer):             # <<<<<<<<<<<<<<
 *     pEventBuffer.tag                               = dictEventBuffer['tag']
 *     pEventBuffer.flagsChip                         = dictEventBuffer['flagsChip']
 */

static PyObject *__pyx_f_6vxlapi_GetEventBufferFromDict(XLfrEvent *__pyx_v_pEventBuffer, PyObject *__pyx_v_dictEventBuffer) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLfrEventTag __pyx_t_2;
  unsigned short __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  unsigned char __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetEventBufferFromDict", 1);

  /* "vxlapi.pyx":1185
 * 
 * cdef GetEventBufferFromDict(XLfrEvent *pEventBuffer, dict dictEventBuffer):
 *     pEventBuffer.tag                               = dictEventBuffer['tag']             # <<<<<<<<<<<<<<
 *     pEventBuffer.flagsChip                         = dictEventBuffer['flagsChip']
 *     pEventBuffer.size                              = dictEventBuffer['size']
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1185, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLfrEventTag(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLfrEventTag)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->tag = __pyx_t_2;

  /* "vxlapi.pyx":1186
 * cdef GetEventBufferFromDict(XLfrEvent *pEventBuffer, dict dictEventBuffer):
 *     pEventBuffer.tag                               = dictEventBuffer['tag']
 *     pEventBuffer.flagsChip                         = dictEventBuffer['flagsChip']             # <<<<<<<<<<<<<<
 *     pEventBuffer.size                              = dictEventBuffer['size']
 *     pEventBuffer.userHandle                        = dictEventBuffer['userHandle']
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1186, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_flagsChip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->flagsChip = __pyx_t_3;

  /* "vxlapi.pyx":1187
 *     pEventBuffer.tag                               = dictEventBuffer['tag']
 *     pEventBuffer.flagsChip                         = dictEventBuffer['flagsChip']
 *     pEventBuffer.size                              = dictEventBuffer['size']             # <<<<<<<<<<<<<<
 *     pEventBuffer.userHandle                        = dictEventBuffer['userHandle']
 *     pEventBuffer.tagData.frTxFrame.flags           = dictEventBuffer['tagData']['frTxFrame']['flags']
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1187, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->size = __pyx_t_4;

  /* "vxlapi.pyx":1188
 *     pEventBuffer.flagsChip                         = dictEventBuffer['flagsChip']
 *     pEventBuffer.size                              = dictEventBuffer['size']
 *     pEventBuffer.userHandle                        = dictEventBuffer['userHandle']             # <<<<<<<<<<<<<<
 *     pEventBuffer.tagData.frTxFrame.flags           = dictEventBuffer['tagData']['frTxFrame']['flags']
 *     pEventBuffer.tagData.frTxFrame.offset          = dictEventBuffer['tagData']['frTxFrame']['offset']
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1188, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_userHandle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->userHandle = __pyx_t_4;

  /* "vxlapi.pyx":1189
 *     pEventBuffer.size                              = dictEventBuffer['size']
 *     pEventBuffer.userHandle                        = dictEventBuffer['userHandle']
 *     pEventBuffer.tagData.frTxFrame.flags           = dictEventBuffer['tagData']['frTxFrame']['flags']             # <<<<<<<<<<<<<<
 *     pEventBuffer.tagData.frTxFrame.offset          = dictEventBuffer['tagData']['frTxFrame']['offset']
 *     pEventBuffer.tagData.frTxFrame.repetition      = dictEventBuffer['tagData']['frTxFrame']['repetition']
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1189, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_tagData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_frTxFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->tagData.frTxFrame.flags = __pyx_t_3;

  /* "vxlapi.pyx":1190
 *     pEventBuffer.userHandle                        = dictEventBuffer['userHandle']
 *     pEventBuffer.tagData.frTxFrame.flags           = dictEventBuffer['tagData']['frTxFrame']['flags']
 *     pEventBuffer.tagData.frTxFrame.offset          = dictEventBuffer['tagData']['frTxFrame']['offset']             # <<<<<<<<<<<<<<
 *     pEventBuffer.tagData.frTxFrame.repetition      = dictEventBuffer['tagData']['frTxFrame']['repetition']
 *     pEventBuffer.tagData.frTxFrame.payloadLength   = dictEventBuffer['tagData']['frTxFrame']['payloadLength']
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1190, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_tagData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_frTxFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->tagData.frTxFrame.offset = __pyx_t_6;

  /* "vxlapi.pyx":1191
 *     pEventBuffer.tagData.frTxFrame.flags           = dictEventBuffer['tagData']['frTxFrame']['flags']
 *     pEventBuffer.tagData.frTxFrame.offset          = dictEventBuffer['tagData']['frTxFrame']['offset']
 *     pEventBuffer.tagData.frTxFrame.repetition      = dictEventBuffer['tagData']['frTxFrame']['repetition']             # <<<<<<<<<<<<<<
 *     pEventBuffer.tagData.frTxFrame.payloadLength   = dictEventBuffer['tagData']['frTxFrame']['payloadLength']
 *     pEventBuffer.tagData.frTxFrame.slotID          = dictEventBuffer['tagData']['frTxFrame']['slotID']
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1191, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_tagData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_frTxFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_repetition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->tagData.frTxFrame.repetition = __pyx_t_6;

  /* "vxlapi.pyx":1192
 *     pEventBuffer.tagData.frTxFrame.offset          = dictEventBuffer['tagData']['frTxFrame']['offset']
 *     pEventBuffer.tagData.frTxFrame.repetition      = dictEventBuffer['tagData']['frTxFrame']['repetition']
 *     pEventBuffer.tagData.frTxFrame.payloadLength   = dictEventBuffer['tagData']['frTxFrame']['payloadLength']             # <<<<<<<<<<<<<<
 *     pEventBuffer.tagData.frTxFrame.slotID          = dictEventBuffer['tagData']['frTxFrame']['slotID']
 *     pEventBuffer.tagData.frTxFrame.txMode          = dictEventBuffer['tagData']['frTxFrame']['txMode']
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1192, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_tagData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_frTxFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_payloadLength); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->tagData.frTxFrame.payloadLength = __pyx_t_6;

  /* "vxlapi.pyx":1193
 *     pEventBuffer.tagData.frTxFrame.repetition      = dictEventBuffer['tagData']['frTxFrame']['repetition']
 *     pEventBuffer.tagData.frTxFrame.payloadLength   = dictEventBuffer['tagData']['frTxFrame']['payloadLength']
 *     pEventBuffer.tagData.frTxFrame.slotID          = dictEventBuffer['tagData']['frTxFrame']['slotID']             # <<<<<<<<<<<<<<
 *     pEventBuffer.tagData.frTxFrame.txMode          = dictEventBuffer['tagData']['frTxFrame']['txMode']
 *     pEventBuffer.tagData.frTxFrame.incrementOffset = dictEventBuffer['tagData']['frTxFrame']['incrementOffset']
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1193, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_tagData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_frTxFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_slotID); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->tagData.frTxFrame.slotID = __pyx_t_3;

  /* "vxlapi.pyx":1194
 *     pEventBuffer.tagData.frTxFrame.payloadLength   = dictEventBuffer['tagData']['frTxFrame']['payloadLength']
 *     pEventBuffer.tagData.frTxFrame.slotID          = dictEventBuffer['tagData']['frTxFrame']['slotID']
 *     pEventBuffer.tagData.frTxFrame.txMode          = dictEventBuffer['tagData']['frTxFrame']['txMode']             # <<<<<<<<<<<<<<
 *     pEventBuffer.tagData.frTxFrame.incrementOffset = dictEventBuffer['tagData']['frTxFrame']['incrementOffset']
 *     pEventBuffer.tagData.frTxFrame.incrementSize   = dictEventBuffer['tagData']['frTxFrame']['incrementSize']
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1194, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_tagData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_frTxFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_txMode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->tagData.frTxFrame.txMode = __pyx_t_6;

  /* "vxlapi.pyx":1195
 *     pEventBuffer.tagData.frTxFrame.slotID          = dictEventBuffer['tagData']['frTxFrame']['slotID']
 *     pEventBuffer.tagData.frTxFrame.txMode          = dictEventBuffer['tagData']['frTxFrame']['txMode']
 *     pEventBuffer.tagData.frTxFrame.incrementOffset = dictEventBuffer['tagData']['frTxFrame']['incrementOffset']             # <<<<<<<<<<<<<<
 *     pEventBuffer.tagData.frTxFrame.incrementSize   = dictEventBuffer['tagData']['frTxFrame']['incrementSize']
 *     for i in range(pEventBuffer.tagData.frTxFrame.payloadLength):
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1195, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_tagData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_frTxFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_incrementOffset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->tagData.frTxFrame.incrementOffset = __pyx_t_6;

  /* "vxlapi.pyx":1196
 *     pEventBuffer.tagData.frTxFrame.txMode          = dictEventBuffer['tagData']['frTxFrame']['txMode']
 *     pEventBuffer.tagData.frTxFrame.incrementOffset = dictEventBuffer['tagData']['frTxFrame']['incrementOffset']
 *     pEventBuffer.tagData.frTxFrame.incrementSize   = dictEventBuffer['tagData']['frTxFrame']['incrementSize']             # <<<<<<<<<<<<<<
 *     for i in range(pEventBuffer.tagData.frTxFrame.payloadLength):
 *         pEventBuffer.tagData.frTxFrame.data[i] = int(dictEventBuffer['tagData']['frTxFrame']['data'][2*i:2*(i+1)])
 */
  if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1196, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_tagData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_frTxFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_incrementSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pEventBuffer->tagData.frTxFrame.incrementSize = __pyx_t_6;

  /* "vxlapi.pyx":1197
 *     pEventBuffer.tagData.frTxFrame.incrementOffset = dictEventBuffer['tagData']['frTxFrame']['incrementOffset']
 *     pEventBuffer.tagData.frTxFrame.incrementSize   = dictEventBuffer['tagData']['frTxFrame']['incrementSize']
 *     for i in range(pEventBuffer.tagData.frTxFrame.payloadLength):             # <<<<<<<<<<<<<<
 *         pEventBuffer.tagData.frTxFrame.data[i] = int(dictEventBuffer['tagData']['frTxFrame']['data'][2*i:2*(i+1)])
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_char(__pyx_v_pEventBuffer->tagData.frTxFrame.payloadLength); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_1 = __pyx_t_5; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1197, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1197, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1197, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1197, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1197, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1197, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1197, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1197, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vxlapi.pyx":1198
 *     pEventBuffer.tagData.frTxFrame.incrementSize   = dictEventBuffer['tagData']['frTxFrame']['incrementSize']
 *     for i in range(pEventBuffer.tagData.frTxFrame.payloadLength):
 *         pEventBuffer.tagData.frTxFrame.data[i] = int(dictEventBuffer['tagData']['frTxFrame']['data'][2*i:2*(i+1)])             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (unlikely(__pyx_v_dictEventBuffer == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1198, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_dictEventBuffer, __pyx_n_s_tagData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_frTxFrame); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_9, __pyx_n_s_data); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_v_i, 2, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_10, 2, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_t_5, 0, 0, &__pyx_t_9, &__pyx_t_11, NULL, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyNumber_Int(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_char(__pyx_t_11); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1198, __pyx_L1_error)
    (__pyx_v_pEventBuffer->tagData.frTxFrame.data[__pyx_t_12]) = __pyx_t_6;

    /* "vxlapi.pyx":1197
 *     pEventBuffer.tagData.frTxFrame.incrementOffset = dictEventBuffer['tagData']['frTxFrame']['incrementOffset']
 *     pEventBuffer.tagData.frTxFrame.incrementSize   = dictEventBuffer['tagData']['frTxFrame']['incrementSize']
 *     for i in range(pEventBuffer.tagData.frTxFrame.payloadLength):             # <<<<<<<<<<<<<<
 *         pEventBuffer.tagData.frTxFrame.data[i] = int(dictEventBuffer['tagData']['frTxFrame']['data'][2*i:2*(i+1)])
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":1184
 *     return status
 * 
 * cdef GetEventBufferFromDict(XLfrEvent *pEventBuffer, dict dictEventBuffer):             # <<<<<<<<<<<<<<
 *     pEventBuffer.tag                               = dictEventBuffer['tag']
 *     pEventBuffer.flagsChip                         = dictEventBuffer['flagsChip']
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("vxlapi.GetEventBufferFromDict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1201
 * 
 * 
 * def FrInitStartupAndSync(XLportHandle portHandle, XLaccess accessMask, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_95FrInitStartupAndSync(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_95FrInitStartupAndSync = {"FrInitStartupAndSync", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_95FrInitStartupAndSync, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_95FrInitStartupAndSync(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  PyObject *__pyx_v_pEventBuffer = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrInitStartupAndSync (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_pEventBuffer,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1201, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1201, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrInitStartupAndSync", 1, 3, 3, 1); __PYX_ERR(0, 1201, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pEventBuffer)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1201, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrInitStartupAndSync", 1, 3, 3, 2); __PYX_ERR(0, 1201, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FrInitStartupAndSync") < 0)) __PYX_ERR(0, 1201, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1201, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1201, __pyx_L3_error)
    __pyx_v_pEventBuffer = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrInitStartupAndSync", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1201, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FrInitStartupAndSync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pEventBuffer), (&PyDict_Type), 1, "pEventBuffer", 1))) __PYX_ERR(0, 1201, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_94FrInitStartupAndSync(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_pEventBuffer);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_94FrInitStartupAndSync(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pEventBuffer) {
  XLstatus __pyx_v_status;
  XLfrEvent __pyx_v_eventBuffer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FrInitStartupAndSync", 0);
  __Pyx_INCREF(__pyx_v_pEventBuffer);

  /* "vxlapi.pyx":1202
 * 
 * def FrInitStartupAndSync(XLportHandle portHandle, XLaccess accessMask, dict pEventBuffer):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLfrEvent eventBuffer
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1204
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))             # <<<<<<<<<<<<<<
 *     GetEventBufferFromDict(&eventBuffer, pEventBuffer)
 *     status = xlFrInitStartupAndSync(portHandle, accessMask, &eventBuffer)
 */
  (void)(memset((&__pyx_v_eventBuffer), 0, (sizeof(__pyx_v_eventBuffer))));

  /* "vxlapi.pyx":1205
 *     cdef XLfrEvent eventBuffer
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))
 *     GetEventBufferFromDict(&eventBuffer, pEventBuffer)             # <<<<<<<<<<<<<<
 *     status = xlFrInitStartupAndSync(portHandle, accessMask, &eventBuffer)
 *     pEventBuffer = eventBuffer
 */
  __pyx_t_1 = __pyx_f_6vxlapi_GetEventBufferFromDict((&__pyx_v_eventBuffer), __pyx_v_pEventBuffer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":1206
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))
 *     GetEventBufferFromDict(&eventBuffer, pEventBuffer)
 *     status = xlFrInitStartupAndSync(portHandle, accessMask, &eventBuffer)             # <<<<<<<<<<<<<<
 *     pEventBuffer = eventBuffer
 *     return status
 */
  __pyx_v_status = xlFrInitStartupAndSync(__pyx_v_portHandle, __pyx_v_accessMask, (&__pyx_v_eventBuffer));

  /* "vxlapi.pyx":1207
 *     GetEventBufferFromDict(&eventBuffer, pEventBuffer)
 *     status = xlFrInitStartupAndSync(portHandle, accessMask, &eventBuffer)
 *     pEventBuffer = eventBuffer             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __pyx_convert__to_py_struct__s_xl_fr_event(__pyx_v_eventBuffer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1)) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_1))) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_pEventBuffer, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":1208
 *     status = xlFrInitStartupAndSync(portHandle, accessMask, &eventBuffer)
 *     pEventBuffer = eventBuffer
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def FrSetupSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int symbolWindowMask):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1201
 * 
 * 
 * def FrInitStartupAndSync(XLportHandle portHandle, XLaccess accessMask, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.FrInitStartupAndSync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pEventBuffer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1210
 *     return status
 * 
 * def FrSetupSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int symbolWindowMask):             # <<<<<<<<<<<<<<
 *     return xlFrSetupSymbolWindow(portHandle, accessMask, frChannel, symbolWindowMask)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_97FrSetupSymbolWindow(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_97FrSetupSymbolWindow = {"FrSetupSymbolWindow", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_97FrSetupSymbolWindow, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_97FrSetupSymbolWindow(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned int __pyx_v_frChannel;
  unsigned int __pyx_v_symbolWindowMask;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrSetupSymbolWindow (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_frChannel,&__pyx_n_s_symbolWindowMask,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetupSymbolWindow", 1, 4, 4, 1); __PYX_ERR(0, 1210, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frChannel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetupSymbolWindow", 1, 4, 4, 2); __PYX_ERR(0, 1210, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_symbolWindowMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetupSymbolWindow", 1, 4, 4, 3); __PYX_ERR(0, 1210, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FrSetupSymbolWindow") < 0)) __PYX_ERR(0, 1210, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L3_error)
    __pyx_v_frChannel = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_frChannel == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L3_error)
    __pyx_v_symbolWindowMask = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_symbolWindowMask == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrSetupSymbolWindow", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 1210, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FrSetupSymbolWindow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_96FrSetupSymbolWindow(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_frChannel, __pyx_v_symbolWindowMask);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_96FrSetupSymbolWindow(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_frChannel, unsigned int __pyx_v_symbolWindowMask) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FrSetupSymbolWindow", 1);

  /* "vxlapi.pyx":1211
 * 
 * def FrSetupSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int symbolWindowMask):
 *     return xlFrSetupSymbolWindow(portHandle, accessMask, frChannel, symbolWindowMask)             # <<<<<<<<<<<<<<
 * 
 * def FrActivateSpy(XLportHandle portHandle, XLaccess accessMask, unsigned int mode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlFrSetupSymbolWindow(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_frChannel, __pyx_v_symbolWindowMask)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1210
 *     return status
 * 
 * def FrSetupSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int symbolWindowMask):             # <<<<<<<<<<<<<<
 *     return xlFrSetupSymbolWindow(portHandle, accessMask, frChannel, symbolWindowMask)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.FrSetupSymbolWindow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1213
 *     return xlFrSetupSymbolWindow(portHandle, accessMask, frChannel, symbolWindowMask)
 * 
 * def FrActivateSpy(XLportHandle portHandle, XLaccess accessMask, unsigned int mode):             # <<<<<<<<<<<<<<
 *     return xlFrActivateSpy(portHandle, accessMask, mode)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_99FrActivateSpy(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_99FrActivateSpy = {"FrActivateSpy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_99FrActivateSpy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_99FrActivateSpy(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned int __pyx_v_mode;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrActivateSpy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_mode,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1213, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1213, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrActivateSpy", 1, 3, 3, 1); __PYX_ERR(0, 1213, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mode)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1213, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrActivateSpy", 1, 3, 3, 2); __PYX_ERR(0, 1213, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FrActivateSpy") < 0)) __PYX_ERR(0, 1213, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1213, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1213, __pyx_L3_error)
    __pyx_v_mode = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_mode == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1213, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrActivateSpy", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1213, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FrActivateSpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_98FrActivateSpy(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_mode);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_98FrActivateSpy(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FrActivateSpy", 1);

  /* "vxlapi.pyx":1214
 * 
 * def FrActivateSpy(XLportHandle portHandle, XLaccess accessMask, unsigned int mode):
 *     return xlFrActivateSpy(portHandle, accessMask, mode)             # <<<<<<<<<<<<<<
 * 
 * #def SetTimerBaseNotify(XLportHandle portHandle, list pHandle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlFrActivateSpy(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_mode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1213
 *     return xlFrSetupSymbolWindow(portHandle, accessMask, frChannel, symbolWindowMask)
 * 
 * def FrActivateSpy(XLportHandle portHandle, XLaccess accessMask, unsigned int mode):             # <<<<<<<<<<<<<<
 *     return xlFrActivateSpy(portHandle, accessMask, mode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.FrActivateSpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1224
 * #    return status
 * 
 * def FrReceive(XLportHandle portHandle, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_101FrReceive(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_101FrReceive = {"FrReceive", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_101FrReceive, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_101FrReceive(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  CYTHON_UNUSED PyObject *__pyx_v_pEventBuffer = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrReceive (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_pEventBuffer,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1224, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pEventBuffer)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1224, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrReceive", 1, 2, 2, 1); __PYX_ERR(0, 1224, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FrReceive") < 0)) __PYX_ERR(0, 1224, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1224, __pyx_L3_error)
    __pyx_v_pEventBuffer = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrReceive", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1224, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FrReceive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pEventBuffer), (&PyDict_Type), 1, "pEventBuffer", 1))) __PYX_ERR(0, 1224, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_100FrReceive(__pyx_self, __pyx_v_portHandle, __pyx_v_pEventBuffer);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_100FrReceive(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, CYTHON_UNUSED PyObject *__pyx_v_pEventBuffer) {
  XLstatus __pyx_v_status;
  XLfrEvent __pyx_v_eventBuffer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FrReceive", 0);
  __Pyx_INCREF(__pyx_v_pEventBuffer);

  /* "vxlapi.pyx":1225
 * 
 * def FrReceive(XLportHandle portHandle, dict pEventBuffer):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLfrEvent eventBuffer
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1227
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))             # <<<<<<<<<<<<<<
 *     status = xlFrReceive(portHandle, &eventBuffer)
 *     pEventBuffer = eventBuffer
 */
  (void)(memset((&__pyx_v_eventBuffer), 0, (sizeof(__pyx_v_eventBuffer))));

  /* "vxlapi.pyx":1228
 *     cdef XLfrEvent eventBuffer
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))
 *     status = xlFrReceive(portHandle, &eventBuffer)             # <<<<<<<<<<<<<<
 *     pEventBuffer = eventBuffer
 *     return status
 */
  __pyx_v_status = xlFrReceive(__pyx_v_portHandle, (&__pyx_v_eventBuffer));

  /* "vxlapi.pyx":1229
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))
 *     status = xlFrReceive(portHandle, &eventBuffer)
 *     pEventBuffer = eventBuffer             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __pyx_convert__to_py_struct__s_xl_fr_event(__pyx_v_eventBuffer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1)) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_1))) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_pEventBuffer, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":1230
 *     status = xlFrReceive(portHandle, &eventBuffer)
 *     pEventBuffer = eventBuffer
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def FrTransmit(XLportHandle portHandle, XLaccess accessMask, dict pEventBuffer):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1224
 * #    return status
 * 
 * def FrReceive(XLportHandle portHandle, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.FrReceive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pEventBuffer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1232
 *     return status
 * 
 * def FrTransmit(XLportHandle portHandle, XLaccess accessMask, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_103FrTransmit(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_103FrTransmit = {"FrTransmit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_103FrTransmit, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_103FrTransmit(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  PyObject *__pyx_v_pEventBuffer = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrTransmit (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_pEventBuffer,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1232, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1232, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrTransmit", 1, 3, 3, 1); __PYX_ERR(0, 1232, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pEventBuffer)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1232, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrTransmit", 1, 3, 3, 2); __PYX_ERR(0, 1232, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FrTransmit") < 0)) __PYX_ERR(0, 1232, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1232, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1232, __pyx_L3_error)
    __pyx_v_pEventBuffer = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrTransmit", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1232, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FrTransmit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pEventBuffer), (&PyDict_Type), 1, "pEventBuffer", 1))) __PYX_ERR(0, 1232, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_102FrTransmit(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_pEventBuffer);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_102FrTransmit(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pEventBuffer) {
  XLstatus __pyx_v_status;
  XLfrEvent __pyx_v_eventBuffer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FrTransmit", 0);
  __Pyx_INCREF(__pyx_v_pEventBuffer);

  /* "vxlapi.pyx":1233
 * 
 * def FrTransmit(XLportHandle portHandle, XLaccess accessMask, dict pEventBuffer):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLfrEvent eventBuffer
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1235
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))             # <<<<<<<<<<<<<<
 *     GetEventBufferFromDict(&eventBuffer, pEventBuffer)
 *     print(eventBuffer.tagData.frTxFrame.data)
 */
  (void)(memset((&__pyx_v_eventBuffer), 0, (sizeof(__pyx_v_eventBuffer))));

  /* "vxlapi.pyx":1236
 *     cdef XLfrEvent eventBuffer
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))
 *     GetEventBufferFromDict(&eventBuffer, pEventBuffer)             # <<<<<<<<<<<<<<
 *     print(eventBuffer.tagData.frTxFrame.data)
 *     status = xlFrTransmit(portHandle, accessMask, &eventBuffer)
 */
  __pyx_t_1 = __pyx_f_6vxlapi_GetEventBufferFromDict((&__pyx_v_eventBuffer), __pyx_v_pEventBuffer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vxlapi.pyx":1237
 *     memset(&eventBuffer, 0, sizeof(eventBuffer))
 *     GetEventBufferFromDict(&eventBuffer, pEventBuffer)
 *     print(eventBuffer.tagData.frTxFrame.data)             # <<<<<<<<<<<<<<
 *     status = xlFrTransmit(portHandle, accessMask, &eventBuffer)
 *     pEventBuffer = eventBuffer
 */
  __pyx_t_1 = __Pyx_PyObject_FromCString(__pyx_v_eventBuffer.tagData.frTxFrame.data); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vxlapi.pyx":1238
 *     GetEventBufferFromDict(&eventBuffer, pEventBuffer)
 *     print(eventBuffer.tagData.frTxFrame.data)
 *     status = xlFrTransmit(portHandle, accessMask, &eventBuffer)             # <<<<<<<<<<<<<<
 *     pEventBuffer = eventBuffer
 *     return status
 */
  __pyx_v_status = xlFrTransmit(__pyx_v_portHandle, __pyx_v_accessMask, (&__pyx_v_eventBuffer));

  /* "vxlapi.pyx":1239
 *     print(eventBuffer.tagData.frTxFrame.data)
 *     status = xlFrTransmit(portHandle, accessMask, &eventBuffer)
 *     pEventBuffer = eventBuffer             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_3 = __pyx_convert__to_py_struct__s_xl_fr_event(__pyx_v_eventBuffer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyDict_CheckExact(__pyx_t_3)) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_3))) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_pEventBuffer, ((PyObject*)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "vxlapi.pyx":1240
 *     status = xlFrTransmit(portHandle, accessMask, &eventBuffer)
 *     pEventBuffer = eventBuffer
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def FrSetTransceiverMode(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int mode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1232
 *     return status
 * 
 * def FrTransmit(XLportHandle portHandle, XLaccess accessMask, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vxlapi.FrTransmit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pEventBuffer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1242
 *     return status
 * 
 * def FrSetTransceiverMode(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int mode):             # <<<<<<<<<<<<<<
 *     return xlFrSetTransceiverMode(portHandle, accessMask, frChannel, mode)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_105FrSetTransceiverMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_105FrSetTransceiverMode = {"FrSetTransceiverMode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_105FrSetTransceiverMode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_105FrSetTransceiverMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned int __pyx_v_frChannel;
  unsigned int __pyx_v_mode;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrSetTransceiverMode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_frChannel,&__pyx_n_s_mode,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetTransceiverMode", 1, 4, 4, 1); __PYX_ERR(0, 1242, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frChannel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetTransceiverMode", 1, 4, 4, 2); __PYX_ERR(0, 1242, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mode)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetTransceiverMode", 1, 4, 4, 3); __PYX_ERR(0, 1242, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FrSetTransceiverMode") < 0)) __PYX_ERR(0, 1242, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
    __pyx_v_frChannel = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_frChannel == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
    __pyx_v_mode = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_mode == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrSetTransceiverMode", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 1242, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FrSetTransceiverMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_104FrSetTransceiverMode(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_frChannel, __pyx_v_mode);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_104FrSetTransceiverMode(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_frChannel, unsigned int __pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FrSetTransceiverMode", 1);

  /* "vxlapi.pyx":1243
 * 
 * def FrSetTransceiverMode(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int mode):
 *     return xlFrSetTransceiverMode(portHandle, accessMask, frChannel, mode)             # <<<<<<<<<<<<<<
 * 
 * def FrSendSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int symbolWindow):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlFrSetTransceiverMode(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_frChannel, __pyx_v_mode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1242
 *     return status
 * 
 * def FrSetTransceiverMode(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int mode):             # <<<<<<<<<<<<<<
 *     return xlFrSetTransceiverMode(portHandle, accessMask, frChannel, mode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.FrSetTransceiverMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1245
 *     return xlFrSetTransceiverMode(portHandle, accessMask, frChannel, mode)
 * 
 * def FrSendSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int symbolWindow):             # <<<<<<<<<<<<<<
 *     return xlFrSendSymbolWindow(portHandle, accessMask, symbolWindow)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_107FrSendSymbolWindow(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_107FrSendSymbolWindow = {"FrSendSymbolWindow", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_107FrSendSymbolWindow, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_107FrSendSymbolWindow(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  unsigned int __pyx_v_symbolWindow;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrSendSymbolWindow (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_symbolWindow,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1245, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1245, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSendSymbolWindow", 1, 3, 3, 1); __PYX_ERR(0, 1245, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_symbolWindow)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1245, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSendSymbolWindow", 1, 3, 3, 2); __PYX_ERR(0, 1245, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FrSendSymbolWindow") < 0)) __PYX_ERR(0, 1245, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1245, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1245, __pyx_L3_error)
    __pyx_v_symbolWindow = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_symbolWindow == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1245, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrSendSymbolWindow", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1245, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FrSendSymbolWindow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6vxlapi_106FrSendSymbolWindow(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_symbolWindow);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_106FrSendSymbolWindow(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, unsigned int __pyx_v_symbolWindow) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FrSendSymbolWindow", 1);

  /* "vxlapi.pyx":1246
 * 
 * def FrSendSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int symbolWindow):
 *     return xlFrSendSymbolWindow(portHandle, accessMask, symbolWindow)             # <<<<<<<<<<<<<<
 * 
 * def FrSetAcceptanceFilter(XLportHandle portHandle, XLaccess accessMask, dict pAcceptanceFilter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(xlFrSendSymbolWindow(__pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_symbolWindow)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1245
 *     return xlFrSetTransceiverMode(portHandle, accessMask, frChannel, mode)
 * 
 * def FrSendSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int symbolWindow):             # <<<<<<<<<<<<<<
 *     return xlFrSendSymbolWindow(portHandle, accessMask, symbolWindow)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.FrSendSymbolWindow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vxlapi.pyx":1248
 *     return xlFrSendSymbolWindow(portHandle, accessMask, symbolWindow)
 * 
 * def FrSetAcceptanceFilter(XLportHandle portHandle, XLaccess accessMask, dict pAcceptanceFilter):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrAcceptanceFilter acceptanceFilter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6vxlapi_109FrSetAcceptanceFilter(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6vxlapi_109FrSetAcceptanceFilter = {"FrSetAcceptanceFilter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6vxlapi_109FrSetAcceptanceFilter, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6vxlapi_109FrSetAcceptanceFilter(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  XLportHandle __pyx_v_portHandle;
  XLaccess __pyx_v_accessMask;
  PyObject *__pyx_v_pAcceptanceFilter = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FrSetAcceptanceFilter (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_portHandle,&__pyx_n_s_accessMask,&__pyx_n_s_pAcceptanceFilter,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_portHandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_accessMask)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetAcceptanceFilter", 1, 3, 3, 1); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pAcceptanceFilter)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("FrSetAcceptanceFilter", 1, 3, 3, 2); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "FrSetAcceptanceFilter") < 0)) __PYX_ERR(0, 1248, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_portHandle = __Pyx_PyInt_As_XLportHandle(values[0]); if (unlikely((__pyx_v_portHandle == ((XLportHandle)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_accessMask = __Pyx_PyInt_As_XLuint64(values[1]); if (unlikely((__pyx_v_accessMask == ((XLaccess)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_pAcceptanceFilter = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FrSetAcceptanceFilter", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1248, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("vxlapi.FrSetAcceptanceFilter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pAcceptanceFilter), (&PyDict_Type), 1, "pAcceptanceFilter", 1))) __PYX_ERR(0, 1248, __pyx_L1_error)
  __pyx_r = __pyx_pf_6vxlapi_108FrSetAcceptanceFilter(__pyx_self, __pyx_v_portHandle, __pyx_v_accessMask, __pyx_v_pAcceptanceFilter);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6vxlapi_108FrSetAcceptanceFilter(CYTHON_UNUSED PyObject *__pyx_self, XLportHandle __pyx_v_portHandle, XLaccess __pyx_v_accessMask, PyObject *__pyx_v_pAcceptanceFilter) {
  XLstatus __pyx_v_status;
  XLfrAcceptanceFilter __pyx_v_acceptanceFilter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XLstatus __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FrSetAcceptanceFilter", 0);
  __Pyx_INCREF(__pyx_v_pAcceptanceFilter);

  /* "vxlapi.pyx":1249
 * 
 * def FrSetAcceptanceFilter(XLportHandle portHandle, XLaccess accessMask, dict pAcceptanceFilter):
 *     cdef XLstatus status = XL_ERROR             # <<<<<<<<<<<<<<
 *     cdef XLfrAcceptanceFilter acceptanceFilter
 *     memset(&acceptanceFilter, 0, sizeof(acceptanceFilter))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_XL_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_XLstatus(__pyx_t_1); if (unlikely((__pyx_t_2 == ((XLstatus)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_status = __pyx_t_2;

  /* "vxlapi.pyx":1251
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrAcceptanceFilter acceptanceFilter
 *     memset(&acceptanceFilter, 0, sizeof(acceptanceFilter))             # <<<<<<<<<<<<<<
 *     acceptanceFilter.filterStatus       = pAcceptanceFilter['filterStatus']
 *     acceptanceFilter.filterTypeMask     = pAcceptanceFilter['filterTypeMask']
 */
  (void)(memset((&__pyx_v_acceptanceFilter), 0, (sizeof(__pyx_v_acceptanceFilter))));

  /* "vxlapi.pyx":1252
 *     cdef XLfrAcceptanceFilter acceptanceFilter
 *     memset(&acceptanceFilter, 0, sizeof(acceptanceFilter))
 *     acceptanceFilter.filterStatus       = pAcceptanceFilter['filterStatus']             # <<<<<<<<<<<<<<
 *     acceptanceFilter.filterTypeMask     = pAcceptanceFilter['filterTypeMask']
 *     acceptanceFilter.filterFirstSlot    = pAcceptanceFilter['filterFirstSlot']
 */
  if (unlikely(__pyx_v_pAcceptanceFilter == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1252, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pAcceptanceFilter, __pyx_n_s_filterStatus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_acceptanceFilter.filterStatus = __pyx_t_3;

  /* "vxlapi.pyx":1253
 *     memset(&acceptanceFilter, 0, sizeof(acceptanceFilter))
 *     acceptanceFilter.filterStatus       = pAcceptanceFilter['filterStatus']
 *     acceptanceFilter.filterTypeMask     = pAcceptanceFilter['filterTypeMask']             # <<<<<<<<<<<<<<
 *     acceptanceFilter.filterFirstSlot    = pAcceptanceFilter['filterFirstSlot']
 *     acceptanceFilter.filterLastSlot     = pAcceptanceFilter['filterLastSlot']
 */
  if (unlikely(__pyx_v_pAcceptanceFilter == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1253, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pAcceptanceFilter, __pyx_n_s_filterTypeMask); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_acceptanceFilter.filterTypeMask = __pyx_t_3;

  /* "vxlapi.pyx":1254
 *     acceptanceFilter.filterStatus       = pAcceptanceFilter['filterStatus']
 *     acceptanceFilter.filterTypeMask     = pAcceptanceFilter['filterTypeMask']
 *     acceptanceFilter.filterFirstSlot    = pAcceptanceFilter['filterFirstSlot']             # <<<<<<<<<<<<<<
 *     acceptanceFilter.filterLastSlot     = pAcceptanceFilter['filterLastSlot']
 *     acceptanceFilter.filterChannelMask  = pAcceptanceFilter['filterChannelMask']
 */
  if (unlikely(__pyx_v_pAcceptanceFilter == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1254, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pAcceptanceFilter, __pyx_n_s_filterFirstSlot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_acceptanceFilter.filterFirstSlot = __pyx_t_3;

  /* "vxlapi.pyx":1255
 *     acceptanceFilter.filterTypeMask     = pAcceptanceFilter['filterTypeMask']
 *     acceptanceFilter.filterFirstSlot    = pAcceptanceFilter['filterFirstSlot']
 *     acceptanceFilter.filterLastSlot     = pAcceptanceFilter['filterLastSlot']             # <<<<<<<<<<<<<<
 *     acceptanceFilter.filterChannelMask  = pAcceptanceFilter['filterChannelMask']
 *     status = xlFrSetAcceptanceFilter(portHandle, accessMask, &acceptanceFilter)
 */
  if (unlikely(__pyx_v_pAcceptanceFilter == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1255, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pAcceptanceFilter, __pyx_n_s_filterLastSlot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_acceptanceFilter.filterLastSlot = __pyx_t_3;

  /* "vxlapi.pyx":1256
 *     acceptanceFilter.filterFirstSlot    = pAcceptanceFilter['filterFirstSlot']
 *     acceptanceFilter.filterLastSlot     = pAcceptanceFilter['filterLastSlot']
 *     acceptanceFilter.filterChannelMask  = pAcceptanceFilter['filterChannelMask']             # <<<<<<<<<<<<<<
 *     status = xlFrSetAcceptanceFilter(portHandle, accessMask, &acceptanceFilter)
 *     pAcceptanceFilter = acceptanceFilter
 */
  if (unlikely(__pyx_v_pAcceptanceFilter == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1256, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pAcceptanceFilter, __pyx_n_s_filterChannelMask); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1256, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_acceptanceFilter.filterChannelMask = __pyx_t_3;

  /* "vxlapi.pyx":1257
 *     acceptanceFilter.filterLastSlot     = pAcceptanceFilter['filterLastSlot']
 *     acceptanceFilter.filterChannelMask  = pAcceptanceFilter['filterChannelMask']
 *     status = xlFrSetAcceptanceFilter(portHandle, accessMask, &acceptanceFilter)             # <<<<<<<<<<<<<<
 *     pAcceptanceFilter = acceptanceFilter
 *     return status
 */
  __pyx_v_status = xlFrSetAcceptanceFilter(__pyx_v_portHandle, __pyx_v_accessMask, (&__pyx_v_acceptanceFilter));

  /* "vxlapi.pyx":1258
 *     acceptanceFilter.filterChannelMask  = pAcceptanceFilter['filterChannelMask']
 *     status = xlFrSetAcceptanceFilter(portHandle, accessMask, &acceptanceFilter)
 *     pAcceptanceFilter = acceptanceFilter             # <<<<<<<<<<<<<<
 *     return status
 * 
 */
  __pyx_t_1 = __pyx_convert__to_py_XLfrAcceptanceFilter(__pyx_v_acceptanceFilter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1)) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_1))) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_pAcceptanceFilter, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "vxlapi.pyx":1259
 *     status = xlFrSetAcceptanceFilter(portHandle, accessMask, &acceptanceFilter)
 *     pAcceptanceFilter = acceptanceFilter
 *     return status             # <<<<<<<<<<<<<<
 * 
 * # HwType
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_XLstatus(__pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vxlapi.pyx":1248
 *     return xlFrSendSymbolWindow(portHandle, accessMask, symbolWindow)
 * 
 * def FrSetAcceptanceFilter(XLportHandle portHandle, XLaccess accessMask, dict pAcceptanceFilter):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrAcceptanceFilter acceptanceFilter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vxlapi.FrSetAcceptanceFilter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pAcceptanceFilter);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_n_s_ActivateChannel, __pyx_k_ActivateChannel, sizeof(__pyx_k_ActivateChannel), 0, 0, 1, 1},
    {&__pyx_n_s_CanAddAcceptanceRange, __pyx_k_CanAddAcceptanceRange, sizeof(__pyx_k_CanAddAcceptanceRange), 0, 0, 1, 1},
    {&__pyx_n_s_CanFdSetConfiguration, __pyx_k_CanFdSetConfiguration, sizeof(__pyx_k_CanFdSetConfiguration), 0, 0, 1, 1},
    {&__pyx_n_s_CanFlushTransmitQueue, __pyx_k_CanFlushTransmitQueue, sizeof(__pyx_k_CanFlushTransmitQueue), 0, 0, 1, 1},
    {&__pyx_n_s_CanRemoveAcceptanceRange, __pyx_k_CanRemoveAcceptanceRange, sizeof(__pyx_k_CanRemoveAcceptanceRange), 0, 0, 1, 1},
    {&__pyx_n_s_CanRequestChipState, __pyx_k_CanRequestChipState, sizeof(__pyx_k_CanRequestChipState), 0, 0, 1, 1},
    {&__pyx_n_s_CanResetAcceptance, __pyx_k_CanResetAcceptance, sizeof(__pyx_k_CanResetAcceptance), 0, 0, 1, 1},
    {&__pyx_n_s_CanSetChannelAcceptance, __pyx_k_CanSetChannelAcceptance, sizeof(__pyx_k_CanSetChannelAcceptance), 0, 0, 1, 1},
    {&__pyx_n_s_CanSetChannelBitrate, __pyx_k_CanSetChannelBitrate, sizeof(__pyx_k_CanSetChannelBitrate), 0, 0, 1, 1},
    {&__pyx_n_s_CanSetChannelMode, __pyx_k_CanSetChannelMode, sizeof(__pyx_k_CanSetChannelMode), 0, 0, 1, 1},
    {&__pyx_n_s_CanSetChannelOutput, __pyx_k_CanSetChannelOutput, sizeof(__pyx_k_CanSetChannelOutput), 0, 0, 1, 1},
    {&__pyx_n_s_CanSetChannelParams, __pyx_k_CanSetChannelParams, sizeof(__pyx_k_CanSetChannelParams), 0, 0, 1, 1},
    {&__pyx_n_s_CanSetChannelParamsC200, __pyx_k_CanSetChannelParamsC200, sizeof(__pyx_k_CanSetChannelParamsC200), 0, 0, 1, 1},
    {&__pyx_n_s_CanSetChannelTransceiver, __pyx_k_CanSetChannelTransceiver, sizeof(__pyx_k_CanSetChannelTransceiver), 0, 0, 1, 1},
    {&__pyx_n_s_CanSetReceiveMode, __pyx_k_CanSetReceiveMode, sizeof(__pyx_k_CanSetReceiveMode), 0, 0, 1, 1},
    {&__pyx_n_s_CanTransmit, __pyx_k_CanTransmit, sizeof(__pyx_k_CanTransmit), 0, 0, 1, 1},
    {&__pyx_n_s_CanTransmitEx, __pyx_k_CanTransmitEx, sizeof(__pyx_k_CanTransmitEx), 0, 0, 1, 1},
    {&__pyx_n_s_ChipState, __pyx_k_ChipState, sizeof(__pyx_k_ChipState), 0, 0, 1, 1},
    {&__pyx_n_s_CloseDriver, __pyx_k_CloseDriver, sizeof(__pyx_k_CloseDriver), 0, 0, 1, 1},
    {&__pyx_n_s_ClosePort, __pyx_k_ClosePort, sizeof(__pyx_k_ClosePort), 0, 0, 1, 1},
    {&__pyx_n_s_DeactivateChannel, __pyx_k_DeactivateChannel, sizeof(__pyx_k_DeactivateChannel), 0, 0, 1, 1},
    {&__pyx_n_s_ErrorFrame, __pyx_k_ErrorFrame, sizeof(__pyx_k_ErrorFrame), 0, 0, 1, 1},
    {&__pyx_n_s_FlushReceiveQueue, __pyx_k_FlushReceiveQueue, sizeof(__pyx_k_FlushReceiveQueue), 0, 0, 1, 1},
    {&__pyx_n_s_FrActivateSpy, __pyx_k_FrActivateSpy, sizeof(__pyx_k_FrActivateSpy), 0, 0, 1, 1},
    {&__pyx_n_s_FrGetChannelConfiguration, __pyx_k_FrGetChannelConfiguration, sizeof(__pyx_k_FrGetChannelConfiguration), 0, 0, 1, 1},
    {&__pyx_n_s_FrInitStartupAndSync, __pyx_k_FrInitStartupAndSync, sizeof(__pyx_k_FrInitStartupAndSync), 0, 0, 1, 1},
    {&__pyx_n_s_FrReceive, __pyx_k_FrReceive, sizeof(__pyx_k_FrReceive), 0, 0, 1, 1},
    {&__pyx_n_s_FrSendSymbolWindow, __pyx_k_FrSendSymbolWindow, sizeof(__pyx_k_FrSendSymbolWindow), 0, 0, 1, 1},
    {&__pyx_n_s_FrSetAcceptanceFilter, __pyx_k_FrSetAcceptanceFilter, sizeof(__pyx_k_FrSetAcceptanceFilter), 0, 0, 1, 1},
    {&__pyx_n_s_FrSetConfiguration, __pyx_k_FrSetConfiguration, sizeof(__pyx_k_FrSetConfiguration), 0, 0, 1, 1},
    {&__pyx_n_s_FrSetMode, __pyx_k_FrSetMode, sizeof(__pyx_k_FrSetMode), 0, 0, 1, 1},
    {&__pyx_n_s_FrSetTransceiverMode, __pyx_k_FrSetTransceiverMode, sizeof(__pyx_k_FrSetTransceiverMode), 0, 0, 1, 1},
    {&__pyx_n_s_FrSetupSymbolWindow, __pyx_k_FrSetupSymbolWindow, sizeof(__pyx_k_FrSetupSymbolWindow), 0, 0, 1, 1},
    {&__pyx_n_s_FrTransmit, __pyx_k_FrTransmit, sizeof(__pyx_k_FrTransmit), 0, 0, 1, 1},
    {&__pyx_n_s_GenerateSyncPulse, __pyx_k_GenerateSyncPulse, sizeof(__pyx_k_GenerateSyncPulse), 0, 0, 1, 1},
    {&__pyx_n_s_GetApplConfig, __pyx_k_GetApplConfig, sizeof(__pyx_k_GetApplConfig), 0, 0, 1, 1},
    {&__pyx_n_s_GetChannelIndex, __pyx_k_GetChannelIndex, sizeof(__pyx_k_GetChannelIndex), 0, 0, 1, 1},
    {&__pyx_n_s_GetChannelMask, __pyx_k_GetChannelMask, sizeof(__pyx_k_GetChannelMask), 0, 0, 1, 1},
    {&__pyx_n_s_GetChannelTime, __pyx_k_GetChannelTime, sizeof(__pyx_k_GetChannelTime), 0, 0, 1, 1},
    {&__pyx_n_s_GetDriverConfig, __pyx_k_GetDriverConfig, sizeof(__pyx_k_GetDriverConfig), 0, 0, 1, 1},
    {&__pyx_n_s_GetErrorString, __pyx_k_GetErrorString, sizeof(__pyx_k_GetErrorString), 0, 0, 1, 1},
    {&__pyx_n_s_GetKeymanBoxes, __pyx_k_GetKeymanBoxes, sizeof(__pyx_k_GetKeymanBoxes), 0, 0, 1, 1},
    {&__pyx_n_s_GetKeymanInfo, __pyx_k_GetKeymanInfo, sizeof(__pyx_k_GetKeymanInfo), 0, 0, 1, 1},
    {&__pyx_n_s_GetLicenseInfo, __pyx_k_GetLicenseInfo, sizeof(__pyx_k_GetLicenseInfo), 0, 0, 1, 1},
    {&__pyx_n_s_GetReceiveQueueLevel, __pyx_k_GetReceiveQueueLevel, sizeof(__pyx_k_GetReceiveQueueLevel), 0, 0, 1, 1},
    {&__pyx_n_s_GetRemoteDriverConfig, __pyx_k_GetRemoteDriverConfig, sizeof(__pyx_k_GetRemoteDriverConfig), 0, 0, 1, 1},
    {&__pyx_n_s_GetSyncTime, __pyx_k_GetSyncTime, sizeof(__pyx_k_GetSyncTime), 0, 0, 1, 1},
    {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
    {&__pyx_kp_s_No_value_specified_for_struct_at, __pyx_k_No_value_specified_for_struct_at, sizeof(__pyx_k_No_value_specified_for_struct_at), 0, 0, 1, 0},
    {&__pyx_kp_s_No_value_specified_for_struct_at_2, __pyx_k_No_value_specified_for_struct_at_2, sizeof(__pyx_k_No_value_specified_for_struct_at_2), 0, 0, 1, 0},
    {&__pyx_kp_s_No_value_specified_for_struct_at_3, __pyx_k_No_value_specified_for_struct_at_3, sizeof(__pyx_k_No_value_specified_for_struct_at_3), 0, 0, 1, 0},
    {&__pyx_kp_s_No_value_specified_for_struct_at_4, __pyx_k_No_value_specified_for_struct_at_4, sizeof(__pyx_k_No_value_specified_for_struct_at_4), 0, 0, 1, 0},
    {&__pyx_kp_s_No_value_specified_for_struct_at_5, __pyx_k_No_value_specified_for_struct_at_5, sizeof(__pyx_k_No_value_specified_for_struct_at_5), 0, 0, 1, 0},
    {&__pyx_n_s_OpenDriver, __pyx_k_OpenDriver, sizeof(__pyx_k_OpenDriver), 0, 0, 1, 1},
    {&__pyx_n_s_OpenPort, __pyx_k_OpenPort, sizeof(__pyx_k_OpenPort), 0, 0, 1, 1},
    {&__pyx_n_s_PopupHwConfig, __pyx_k_PopupHwConfig, sizeof(__pyx_k_PopupHwConfig), 0, 0, 1, 1},
    {&__pyx_n_s_Receive, __pyx_k_Receive, sizeof(__pyx_k_Receive), 0, 0, 1, 1},
    {&__pyx_n_s_ResetClock, __pyx_k_ResetClock, sizeof(__pyx_k_ResetClock), 0, 0, 1, 1},
    {&__pyx_n_s_SetApplConfig, __pyx_k_SetApplConfig, sizeof(__pyx_k_SetApplConfig), 0, 0, 1, 1},
    {&__pyx_n_s_SetGlobalTimeSync, __pyx_k_SetGlobalTimeSync, sizeof(__pyx_k_SetGlobalTimeSync), 0, 0, 1, 1},
    {&__pyx_n_s_SetNotification, __pyx_k_SetNotification, sizeof(__pyx_k_SetNotification), 0, 0, 1, 1},
    {&__pyx_n_s_SetTimerRate, __pyx_k_SetTimerRate, sizeof(__pyx_k_SetTimerRate), 0, 0, 1, 1},
    {&__pyx_n_s_SetTimerRateAndChannel, __pyx_k_SetTimerRateAndChannel, sizeof(__pyx_k_SetTimerRateAndChannel), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_RX_ERROR_AVG_BIT_LENG, __pyx_k_XL_A429_EV_RX_ERROR_AVG_BIT_LENG, sizeof(__pyx_k_XL_A429_EV_RX_ERROR_AVG_BIT_LENG), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_HIGH, __pyx_k_XL_A429_EV_RX_ERROR_BITRATE_HIGH, sizeof(__pyx_k_XL_A429_EV_RX_ERROR_BITRATE_HIGH), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_LOW, __pyx_k_XL_A429_EV_RX_ERROR_BITRATE_LOW, sizeof(__pyx_k_XL_A429_EV_RX_ERROR_BITRATE_LOW), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_RX_ERROR_CODING_RZ, __pyx_k_XL_A429_EV_RX_ERROR_CODING_RZ, sizeof(__pyx_k_XL_A429_EV_RX_ERROR_CODING_RZ), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_RX_ERROR_DUTY_FACTOR, __pyx_k_XL_A429_EV_RX_ERROR_DUTY_FACTOR, sizeof(__pyx_k_XL_A429_EV_RX_ERROR_DUTY_FACTOR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_RX_ERROR_FRAME_FORMAT, __pyx_k_XL_A429_EV_RX_ERROR_FRAME_FORMAT, sizeof(__pyx_k_XL_A429_EV_RX_ERROR_FRAME_FORMAT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_RX_ERROR_GAP_VIOLATIO, __pyx_k_XL_A429_EV_RX_ERROR_GAP_VIOLATIO, sizeof(__pyx_k_XL_A429_EV_RX_ERROR_GAP_VIOLATIO), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_RX_ERROR_PARITY, __pyx_k_XL_A429_EV_RX_ERROR_PARITY, sizeof(__pyx_k_XL_A429_EV_RX_ERROR_PARITY), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_TX_ERROR_ACCESS_DENIE, __pyx_k_XL_A429_EV_TX_ERROR_ACCESS_DENIE, sizeof(__pyx_k_XL_A429_EV_TX_ERROR_ACCESS_DENIE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_TX_ERROR_TRANSMISSION, __pyx_k_XL_A429_EV_TX_ERROR_TRANSMISSION, sizeof(__pyx_k_XL_A429_EV_TX_ERROR_TRANSMISSION), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_TX_MSG_CTRL_CYCLIC, __pyx_k_XL_A429_EV_TX_MSG_CTRL_CYCLIC, sizeof(__pyx_k_XL_A429_EV_TX_MSG_CTRL_CYCLIC), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_EV_TX_MSG_CTRL_ON_REQUES, __pyx_k_XL_A429_EV_TX_MSG_CTRL_ON_REQUES, sizeof(__pyx_k_XL_A429_EV_TX_MSG_CTRL_ON_REQUES), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_DISABL, __pyx_k_XL_A429_MSG_AUTO_BAUDRATE_DISABL, sizeof(__pyx_k_XL_A429_MSG_AUTO_BAUDRATE_DISABL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_ENABLE, __pyx_k_XL_A429_MSG_AUTO_BAUDRATE_ENABLE, sizeof(__pyx_k_XL_A429_MSG_AUTO_BAUDRATE_ENABLE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_BITRATE_FAST_MAX, __pyx_k_XL_A429_MSG_BITRATE_FAST_MAX, sizeof(__pyx_k_XL_A429_MSG_BITRATE_FAST_MAX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_BITRATE_FAST_MIN, __pyx_k_XL_A429_MSG_BITRATE_FAST_MIN, sizeof(__pyx_k_XL_A429_MSG_BITRATE_FAST_MIN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_BITRATE_RX_MAX, __pyx_k_XL_A429_MSG_BITRATE_RX_MAX, sizeof(__pyx_k_XL_A429_MSG_BITRATE_RX_MAX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_BITRATE_RX_MIN, __pyx_k_XL_A429_MSG_BITRATE_RX_MIN, sizeof(__pyx_k_XL_A429_MSG_BITRATE_RX_MIN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MAX, __pyx_k_XL_A429_MSG_BITRATE_SLOW_MAX, sizeof(__pyx_k_XL_A429_MSG_BITRATE_SLOW_MAX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MIN, __pyx_k_XL_A429_MSG_BITRATE_SLOW_MIN, sizeof(__pyx_k_XL_A429_MSG_BITRATE_SLOW_MIN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_CHANNEL_DIR_RX, __pyx_k_XL_A429_MSG_CHANNEL_DIR_RX, sizeof(__pyx_k_XL_A429_MSG_CHANNEL_DIR_RX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_CHANNEL_DIR_TX, __pyx_k_XL_A429_MSG_CHANNEL_DIR_TX, sizeof(__pyx_k_XL_A429_MSG_CHANNEL_DIR_TX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_CYCLE_MAX, __pyx_k_XL_A429_MSG_CYCLE_MAX, sizeof(__pyx_k_XL_A429_MSG_CYCLE_MAX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_FLAG_CYCLIC, __pyx_k_XL_A429_MSG_FLAG_CYCLIC, sizeof(__pyx_k_XL_A429_MSG_FLAG_CYCLIC), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_FLAG_DELETE_CYCLIC, __pyx_k_XL_A429_MSG_FLAG_DELETE_CYCLIC, sizeof(__pyx_k_XL_A429_MSG_FLAG_DELETE_CYCLIC), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_FLAG_ON_REQUEST, __pyx_k_XL_A429_MSG_FLAG_ON_REQUEST, sizeof(__pyx_k_XL_A429_MSG_FLAG_ON_REQUEST), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_GAP_4BIT, __pyx_k_XL_A429_MSG_GAP_4BIT, sizeof(__pyx_k_XL_A429_MSG_GAP_4BIT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_GAP_DEFAULT, __pyx_k_XL_A429_MSG_GAP_DEFAULT, sizeof(__pyx_k_XL_A429_MSG_GAP_DEFAULT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_GAP_MAX, __pyx_k_XL_A429_MSG_GAP_MAX, sizeof(__pyx_k_XL_A429_MSG_GAP_MAX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_PARITY_DEFAULT, __pyx_k_XL_A429_MSG_PARITY_DEFAULT, sizeof(__pyx_k_XL_A429_MSG_PARITY_DEFAULT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_PARITY_DISABLED, __pyx_k_XL_A429_MSG_PARITY_DISABLED, sizeof(__pyx_k_XL_A429_MSG_PARITY_DISABLED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_PARITY_EVEN, __pyx_k_XL_A429_MSG_PARITY_EVEN, sizeof(__pyx_k_XL_A429_MSG_PARITY_EVEN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_MSG_PARITY_ODD, __pyx_k_XL_A429_MSG_PARITY_ODD, sizeof(__pyx_k_XL_A429_MSG_PARITY_ODD), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_QUEUE_OVERFLOW, __pyx_k_XL_A429_QUEUE_OVERFLOW, sizeof(__pyx_k_XL_A429_QUEUE_OVERFLOW), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MAX, __pyx_k_XL_A429_RX_FIFO_QUEUE_SIZE_MAX, sizeof(__pyx_k_XL_A429_RX_FIFO_QUEUE_SIZE_MAX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MIN, __pyx_k_XL_A429_RX_FIFO_QUEUE_SIZE_MIN, sizeof(__pyx_k_XL_A429_RX_FIFO_QUEUE_SIZE_MIN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ACTIVATE_NONE, __pyx_k_XL_ACTIVATE_NONE, sizeof(__pyx_k_XL_ACTIVATE_NONE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ACTIVATE_RESET_CLOCK, __pyx_k_XL_ACTIVATE_RESET_CLOCK, sizeof(__pyx_k_XL_ACTIVATE_RESET_CLOCK), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CAN20, __pyx_k_XL_BUS_PARAMS_CANOPMODE_CAN20, sizeof(__pyx_k_XL_BUS_PARAMS_CANOPMODE_CAN20), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CANFD, __pyx_k_XL_BUS_PARAMS_CANOPMODE_CANFD, sizeof(__pyx_k_XL_BUS_PARAMS_CANOPMODE_CANFD), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_TYPE_A429, __pyx_k_XL_BUS_TYPE_A429, sizeof(__pyx_k_XL_BUS_TYPE_A429), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_TYPE_AFDX, __pyx_k_XL_BUS_TYPE_AFDX, sizeof(__pyx_k_XL_BUS_TYPE_AFDX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_TYPE_CAN, __pyx_k_XL_BUS_TYPE_CAN, sizeof(__pyx_k_XL_BUS_TYPE_CAN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_TYPE_DAIO, __pyx_k_XL_BUS_TYPE_DAIO, sizeof(__pyx_k_XL_BUS_TYPE_DAIO), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_TYPE_ETHERNET, __pyx_k_XL_BUS_TYPE_ETHERNET, sizeof(__pyx_k_XL_BUS_TYPE_ETHERNET), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_TYPE_FLEXRAY, __pyx_k_XL_BUS_TYPE_FLEXRAY, sizeof(__pyx_k_XL_BUS_TYPE_FLEXRAY), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_TYPE_J1708, __pyx_k_XL_BUS_TYPE_J1708, sizeof(__pyx_k_XL_BUS_TYPE_J1708), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_TYPE_LIN, __pyx_k_XL_BUS_TYPE_LIN, sizeof(__pyx_k_XL_BUS_TYPE_LIN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_TYPE_MOST, __pyx_k_XL_BUS_TYPE_MOST, sizeof(__pyx_k_XL_BUS_TYPE_MOST), 0, 0, 1, 1},
    {&__pyx_n_s_XL_BUS_TYPE_NONE, __pyx_k_XL_BUS_TYPE_NONE, sizeof(__pyx_k_XL_BUS_TYPE_NONE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_EV_TAG_TX_MSG, __pyx_k_XL_CAN_EV_TAG_TX_MSG, sizeof(__pyx_k_XL_CAN_EV_TAG_TX_MSG), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_EXT_MSG_ID, __pyx_k_XL_CAN_EXT_MSG_ID, sizeof(__pyx_k_XL_CAN_EXT_MSG_ID), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_MSG_FLAG_ERROR_FRAME, __pyx_k_XL_CAN_MSG_FLAG_ERROR_FRAME, sizeof(__pyx_k_XL_CAN_MSG_FLAG_ERROR_FRAME), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_MSG_FLAG_NERR, __pyx_k_XL_CAN_MSG_FLAG_NERR, sizeof(__pyx_k_XL_CAN_MSG_FLAG_NERR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_MSG_FLAG_OVERRUN, __pyx_k_XL_CAN_MSG_FLAG_OVERRUN, sizeof(__pyx_k_XL_CAN_MSG_FLAG_OVERRUN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_MSG_FLAG_REMOTE_FRAME, __pyx_k_XL_CAN_MSG_FLAG_REMOTE_FRAME, sizeof(__pyx_k_XL_CAN_MSG_FLAG_REMOTE_FRAME), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_MSG_FLAG_RESERVED_1, __pyx_k_XL_CAN_MSG_FLAG_RESERVED_1, sizeof(__pyx_k_XL_CAN_MSG_FLAG_RESERVED_1), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_MSG_FLAG_SRR_BIT_DOM, __pyx_k_XL_CAN_MSG_FLAG_SRR_BIT_DOM, sizeof(__pyx_k_XL_CAN_MSG_FLAG_SRR_BIT_DOM), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_MSG_FLAG_TX_COMPLETED, __pyx_k_XL_CAN_MSG_FLAG_TX_COMPLETED, sizeof(__pyx_k_XL_CAN_MSG_FLAG_TX_COMPLETED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_MSG_FLAG_TX_REQUEST, __pyx_k_XL_CAN_MSG_FLAG_TX_REQUEST, sizeof(__pyx_k_XL_CAN_MSG_FLAG_TX_REQUEST), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_MSG_FLAG_WAKEUP, __pyx_k_XL_CAN_MSG_FLAG_WAKEUP, sizeof(__pyx_k_XL_CAN_MSG_FLAG_WAKEUP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_TXMSG_FLAG_BRS, __pyx_k_XL_CAN_TXMSG_FLAG_BRS, sizeof(__pyx_k_XL_CAN_TXMSG_FLAG_BRS), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_TXMSG_FLAG_EDL, __pyx_k_XL_CAN_TXMSG_FLAG_EDL, sizeof(__pyx_k_XL_CAN_TXMSG_FLAG_EDL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_TXMSG_FLAG_HIGHPRIO, __pyx_k_XL_CAN_TXMSG_FLAG_HIGHPRIO, sizeof(__pyx_k_XL_CAN_TXMSG_FLAG_HIGHPRIO), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_TXMSG_FLAG_RTR, __pyx_k_XL_CAN_TXMSG_FLAG_RTR, sizeof(__pyx_k_XL_CAN_TXMSG_FLAG_RTR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_CAN_TXMSG_FLAG_WAKEUP, __pyx_k_XL_CAN_TXMSG_FLAG_WAKEUP, sizeof(__pyx_k_XL_CAN_TXMSG_FLAG_WAKEUP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERROR, __pyx_k_XL_ERROR, sizeof(__pyx_k_XL_ERROR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_BAD_EXE_FORMAT, __pyx_k_XL_ERR_BAD_EXE_FORMAT, sizeof(__pyx_k_XL_ERR_BAD_EXE_FORMAT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_CANNOT_OPEN_DRIVER, __pyx_k_XL_ERR_CANNOT_OPEN_DRIVER, sizeof(__pyx_k_XL_ERR_CANNOT_OPEN_DRIVER), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_CHAN_IS_ONLINE, __pyx_k_XL_ERR_CHAN_IS_ONLINE, sizeof(__pyx_k_XL_ERR_CHAN_IS_ONLINE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_CMD_HANDLING, __pyx_k_XL_ERR_CMD_HANDLING, sizeof(__pyx_k_XL_ERR_CMD_HANDLING), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_CMD_TIMEOUT, __pyx_k_XL_ERR_CMD_TIMEOUT, sizeof(__pyx_k_XL_ERR_CMD_TIMEOUT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_CONNECTION_BROKEN, __pyx_k_XL_ERR_CONNECTION_BROKEN, sizeof(__pyx_k_XL_ERR_CONNECTION_BROKEN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_CONNECTION_CLOSED, __pyx_k_XL_ERR_CONNECTION_CLOSED, sizeof(__pyx_k_XL_ERR_CONNECTION_CLOSED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_CONNECTION_FAILED, __pyx_k_XL_ERR_CONNECTION_FAILED, sizeof(__pyx_k_XL_ERR_CONNECTION_FAILED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_DLL_NOT_FOUND, __pyx_k_XL_ERR_DLL_NOT_FOUND, sizeof(__pyx_k_XL_ERR_DLL_NOT_FOUND), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_EDL_NOT_SET, __pyx_k_XL_ERR_EDL_NOT_SET, sizeof(__pyx_k_XL_ERR_EDL_NOT_SET), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_EDL_RTR, __pyx_k_XL_ERR_EDL_RTR, sizeof(__pyx_k_XL_ERR_EDL_RTR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_ERROR_CRC, __pyx_k_XL_ERR_ERROR_CRC, sizeof(__pyx_k_XL_ERR_ERROR_CRC), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_ETH_MAC_ACTIVATION_FAILED, __pyx_k_XL_ERR_ETH_MAC_ACTIVATION_FAILED, sizeof(__pyx_k_XL_ERR_ETH_MAC_ACTIVATION_FAILED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_ETH_PHY_ACTIVATION_FAILED, __pyx_k_XL_ERR_ETH_PHY_ACTIVATION_FAILED, sizeof(__pyx_k_XL_ERR_ETH_PHY_ACTIVATION_FAILED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_ETH_PHY_CONFIG_ABORTED, __pyx_k_XL_ERR_ETH_PHY_CONFIG_ABORTED, sizeof(__pyx_k_XL_ERR_ETH_PHY_CONFIG_ABORTED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_ETH_RESET_FAILED, __pyx_k_XL_ERR_ETH_RESET_FAILED, sizeof(__pyx_k_XL_ERR_ETH_RESET_FAILED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_ETH_SET_CONFIG_DELAYED, __pyx_k_XL_ERR_ETH_SET_CONFIG_DELAYED, sizeof(__pyx_k_XL_ERR_ETH_SET_CONFIG_DELAYED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_ETH_UNSUPPORTED_FEATURE, __pyx_k_XL_ERR_ETH_UNSUPPORTED_FEATURE, sizeof(__pyx_k_XL_ERR_ETH_UNSUPPORTED_FEATURE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_HW_NOT_PRESENT, __pyx_k_XL_ERR_HW_NOT_PRESENT, sizeof(__pyx_k_XL_ERR_HW_NOT_PRESENT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_HW_NOT_READY, __pyx_k_XL_ERR_HW_NOT_READY, sizeof(__pyx_k_XL_ERR_HW_NOT_READY), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INIT_ACCESS_MISSING, __pyx_k_XL_ERR_INIT_ACCESS_MISSING, sizeof(__pyx_k_XL_ERR_INIT_ACCESS_MISSING), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INSUFFICIENT_BUFFER, __pyx_k_XL_ERR_INSUFFICIENT_BUFFER, sizeof(__pyx_k_XL_ERR_INSUFFICIENT_BUFFER), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INTERNAL_ERROR, __pyx_k_XL_ERR_INTERNAL_ERROR, sizeof(__pyx_k_XL_ERR_INTERNAL_ERROR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_ACCESS, __pyx_k_XL_ERR_INVALID_ACCESS, sizeof(__pyx_k_XL_ERR_INVALID_ACCESS), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_ADDRESS, __pyx_k_XL_ERR_INVALID_ADDRESS, sizeof(__pyx_k_XL_ERR_INVALID_ADDRESS), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_CANID, __pyx_k_XL_ERR_INVALID_CANID, sizeof(__pyx_k_XL_ERR_INVALID_CANID), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_CHANNEL_MASK, __pyx_k_XL_ERR_INVALID_CHANNEL_MASK, sizeof(__pyx_k_XL_ERR_INVALID_CHANNEL_MASK), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_CHAN_INDEX, __pyx_k_XL_ERR_INVALID_CHAN_INDEX, sizeof(__pyx_k_XL_ERR_INVALID_CHAN_INDEX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_DLC, __pyx_k_XL_ERR_INVALID_DLC, sizeof(__pyx_k_XL_ERR_INVALID_DLC), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_FDFLAG_MODE20, __pyx_k_XL_ERR_INVALID_FDFLAG_MODE20, sizeof(__pyx_k_XL_ERR_INVALID_FDFLAG_MODE20), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_HANDLE, __pyx_k_XL_ERR_INVALID_HANDLE, sizeof(__pyx_k_XL_ERR_INVALID_HANDLE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_LEVEL, __pyx_k_XL_ERR_INVALID_LEVEL, sizeof(__pyx_k_XL_ERR_INVALID_LEVEL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_PORT, __pyx_k_XL_ERR_INVALID_PORT, sizeof(__pyx_k_XL_ERR_INVALID_PORT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_RESERVED_FLD, __pyx_k_XL_ERR_INVALID_RESERVED_FLD, sizeof(__pyx_k_XL_ERR_INVALID_RESERVED_FLD), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_SIZE, __pyx_k_XL_ERR_INVALID_SIZE, sizeof(__pyx_k_XL_ERR_INVALID_SIZE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_STREAM_NAME, __pyx_k_XL_ERR_INVALID_STREAM_NAME, sizeof(__pyx_k_XL_ERR_INVALID_STREAM_NAME), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_TAG, __pyx_k_XL_ERR_INVALID_TAG, sizeof(__pyx_k_XL_ERR_INVALID_TAG), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_INVALID_USER_BUFFER, __pyx_k_XL_ERR_INVALID_USER_BUFFER, sizeof(__pyx_k_XL_ERR_INVALID_USER_BUFFER), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_NOTIFY_ALREADY_ACTIVE, __pyx_k_XL_ERR_NOTIFY_ALREADY_ACTIVE, sizeof(__pyx_k_XL_ERR_NOTIFY_ALREADY_ACTIVE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_NOT_FOUND, __pyx_k_XL_ERR_NOT_FOUND, sizeof(__pyx_k_XL_ERR_NOT_FOUND), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_NOT_IMPLEMENTED, __pyx_k_XL_ERR_NOT_IMPLEMENTED, sizeof(__pyx_k_XL_ERR_NOT_IMPLEMENTED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_NOT_SUPPORTED, __pyx_k_XL_ERR_NOT_SUPPORTED, sizeof(__pyx_k_XL_ERR_NOT_SUPPORTED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_NO_DATA_DETECTED, __pyx_k_XL_ERR_NO_DATA_DETECTED, sizeof(__pyx_k_XL_ERR_NO_DATA_DETECTED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_NO_LICENSE, __pyx_k_XL_ERR_NO_LICENSE, sizeof(__pyx_k_XL_ERR_NO_LICENSE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_NO_RESOURCES, __pyx_k_XL_ERR_NO_RESOURCES, sizeof(__pyx_k_XL_ERR_NO_RESOURCES), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_NO_SYSTEM_RESOURCES, __pyx_k_XL_ERR_NO_SYSTEM_RESOURCES, sizeof(__pyx_k_XL_ERR_NO_SYSTEM_RESOURCES), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_PORT_IS_OFFLINE, __pyx_k_XL_ERR_PORT_IS_OFFLINE, sizeof(__pyx_k_XL_ERR_PORT_IS_OFFLINE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_QUEUE_IS_EMPTY, __pyx_k_XL_ERR_QUEUE_IS_EMPTY, sizeof(__pyx_k_XL_ERR_QUEUE_IS_EMPTY), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_QUEUE_IS_FULL, __pyx_k_XL_ERR_QUEUE_IS_FULL, sizeof(__pyx_k_XL_ERR_QUEUE_IS_FULL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_QUEUE_OVERRUN, __pyx_k_XL_ERR_QUEUE_OVERRUN, sizeof(__pyx_k_XL_ERR_QUEUE_OVERRUN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_REQ_NOT_ACCEP, __pyx_k_XL_ERR_REQ_NOT_ACCEP, sizeof(__pyx_k_XL_ERR_REQ_NOT_ACCEP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_RESERVED_NOT_ZERO, __pyx_k_XL_ERR_RESERVED_NOT_ZERO, sizeof(__pyx_k_XL_ERR_RESERVED_NOT_ZERO), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_STREAM_NOT_CONNECTED, __pyx_k_XL_ERR_STREAM_NOT_CONNECTED, sizeof(__pyx_k_XL_ERR_STREAM_NOT_CONNECTED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_STREAM_NOT_FOUND, __pyx_k_XL_ERR_STREAM_NOT_FOUND, sizeof(__pyx_k_XL_ERR_STREAM_NOT_FOUND), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_TWICE_REGISTER, __pyx_k_XL_ERR_TWICE_REGISTER, sizeof(__pyx_k_XL_ERR_TWICE_REGISTER), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_TX_NOT_POSSIBLE, __pyx_k_XL_ERR_TX_NOT_POSSIBLE, sizeof(__pyx_k_XL_ERR_TX_NOT_POSSIBLE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_UNEXP_NET_ERR, __pyx_k_XL_ERR_UNEXP_NET_ERR, sizeof(__pyx_k_XL_ERR_UNEXP_NET_ERR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_UNKNOWN_FLAG, __pyx_k_XL_ERR_UNKNOWN_FLAG, sizeof(__pyx_k_XL_ERR_UNKNOWN_FLAG), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_WRONG_BUS_TYPE, __pyx_k_XL_ERR_WRONG_BUS_TYPE, sizeof(__pyx_k_XL_ERR_WRONG_BUS_TYPE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_WRONG_CHIP_TYPE, __pyx_k_XL_ERR_WRONG_CHIP_TYPE, sizeof(__pyx_k_XL_ERR_WRONG_CHIP_TYPE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_WRONG_COMMAND, __pyx_k_XL_ERR_WRONG_COMMAND, sizeof(__pyx_k_XL_ERR_WRONG_COMMAND), 0, 0, 1, 1},
    {&__pyx_n_s_XL_ERR_WRONG_PARAMETER, __pyx_k_XL_ERR_WRONG_PARAMETER, sizeof(__pyx_k_XL_ERR_WRONG_PARAMETER), 0, 0, 1, 1},
    {&__pyx_n_s_XL_EVENT_FLAG_OVERRUN, __pyx_k_XL_EVENT_FLAG_OVERRUN, sizeof(__pyx_k_XL_EVENT_FLAG_OVERRUN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_CC_COLD_A, __pyx_k_XL_FR_CC_COLD_A, sizeof(__pyx_k_XL_FR_CC_COLD_A), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_CC_COLD_B, __pyx_k_XL_FR_CC_COLD_B, sizeof(__pyx_k_XL_FR_CC_COLD_B), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_CHANNEL_A, __pyx_k_XL_FR_CHANNEL_A, sizeof(__pyx_k_XL_FR_CHANNEL_A), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_CHANNEL_AB, __pyx_k_XL_FR_CHANNEL_AB, sizeof(__pyx_k_XL_FR_CHANNEL_AB), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_CHANNEL_B, __pyx_k_XL_FR_CHANNEL_B, sizeof(__pyx_k_XL_FR_CHANNEL_B), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_ASYNCHRON, __pyx_k_XL_FR_CHANNEL_CFG_MODE_ASYNCHRON, sizeof(__pyx_k_XL_FR_CHANNEL_CFG_MODE_ASYNCHRON), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_COMBINED, __pyx_k_XL_FR_CHANNEL_CFG_MODE_COMBINED, sizeof(__pyx_k_XL_FR_CHANNEL_CFG_MODE_COMBINED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_CHANNEL_CFG_MODE_SYNCHRONO, __pyx_k_XL_FR_CHANNEL_CFG_MODE_SYNCHRONO, sizeof(__pyx_k_XL_FR_CHANNEL_CFG_MODE_SYNCHRONO), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_CHANNEL, __pyx_k_XL_FR_CHANNEL_CFG_STATUS_CHANNEL, sizeof(__pyx_k_XL_FR_CHANNEL_CFG_STATUS_CHANNEL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_INIT_AP, __pyx_k_XL_FR_CHANNEL_CFG_STATUS_INIT_AP, sizeof(__pyx_k_XL_FR_CHANNEL_CFG_STATUS_INIT_AP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_VALID_C, __pyx_k_XL_FR_CHANNEL_CFG_STATUS_VALID_C, sizeof(__pyx_k_XL_FR_CHANNEL_CFG_STATUS_VALID_C), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR, __pyx_k_XL_FR_ERROR, sizeof(__pyx_k_XL_FR_ERROR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CC_EDA, __pyx_k_XL_FR_ERROR_CC_EDA, sizeof(__pyx_k_XL_FR_ERROR_CC_EDA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CC_EDB, __pyx_k_XL_FR_ERROR_CC_EDB, sizeof(__pyx_k_XL_FR_ERROR_CC_EDB), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CC_ERROR, __pyx_k_XL_FR_ERROR_CC_ERROR, sizeof(__pyx_k_XL_FR_ERROR_CC_ERROR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CC_IIBA, __pyx_k_XL_FR_ERROR_CC_IIBA, sizeof(__pyx_k_XL_FR_ERROR_CC_IIBA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CC_IOBA, __pyx_k_XL_FR_ERROR_CC_IOBA, sizeof(__pyx_k_XL_FR_ERROR_CC_IOBA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CC_LTVA, __pyx_k_XL_FR_ERROR_CC_LTVA, sizeof(__pyx_k_XL_FR_ERROR_CC_LTVA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CC_LTVB, __pyx_k_XL_FR_ERROR_CC_LTVB, sizeof(__pyx_k_XL_FR_ERROR_CC_LTVB), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CC_MHF, __pyx_k_XL_FR_ERROR_CC_MHF, sizeof(__pyx_k_XL_FR_ERROR_CC_MHF), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CC_PERR, __pyx_k_XL_FR_ERROR_CC_PERR, sizeof(__pyx_k_XL_FR_ERROR_CC_PERR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CC_TABA, __pyx_k_XL_FR_ERROR_CC_TABA, sizeof(__pyx_k_XL_FR_ERROR_CC_TABA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CC_TABB, __pyx_k_XL_FR_ERROR_CC_TABB, sizeof(__pyx_k_XL_FR_ERROR_CC_TABB), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_CLOCK_CORR_FAILURE, __pyx_k_XL_FR_ERROR_CLOCK_CORR_FAILURE, sizeof(__pyx_k_XL_FR_ERROR_CLOCK_CORR_FAILURE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_MAX_OFFSET_CORRECTIO, __pyx_k_XL_FR_ERROR_MAX_OFFSET_CORRECTIO, sizeof(__pyx_k_XL_FR_ERROR_MAX_OFFSET_CORRECTIO), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_MAX_RATE_CORRECTION, __pyx_k_XL_FR_ERROR_MAX_RATE_CORRECTION, sizeof(__pyx_k_XL_FR_ERROR_MAX_RATE_CORRECTION), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_MISSING_OFFSET_CORRE, __pyx_k_XL_FR_ERROR_MISSING_OFFSET_CORRE, sizeof(__pyx_k_XL_FR_ERROR_MISSING_OFFSET_CORRE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_MISSING_RATE_CORRECT, __pyx_k_XL_FR_ERROR_MISSING_RATE_CORRECT, sizeof(__pyx_k_XL_FR_ERROR_MISSING_RATE_CORRECT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_NIT_FAILURE, __pyx_k_XL_FR_ERROR_NIT_FAILURE, sizeof(__pyx_k_XL_FR_ERROR_NIT_FAILURE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_NIT_SBNA, __pyx_k_XL_FR_ERROR_NIT_SBNA, sizeof(__pyx_k_XL_FR_ERROR_NIT_SBNA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_NIT_SBNB, __pyx_k_XL_FR_ERROR_NIT_SBNB, sizeof(__pyx_k_XL_FR_ERROR_NIT_SBNB), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_NIT_SENA, __pyx_k_XL_FR_ERROR_NIT_SENA, sizeof(__pyx_k_XL_FR_ERROR_NIT_SENA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_NIT_SENB, __pyx_k_XL_FR_ERROR_NIT_SENB, sizeof(__pyx_k_XL_FR_ERROR_NIT_SENB), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_POC_ACTIVE, __pyx_k_XL_FR_ERROR_POC_ACTIVE, sizeof(__pyx_k_XL_FR_ERROR_POC_ACTIVE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_POC_COMM_HALT, __pyx_k_XL_FR_ERROR_POC_COMM_HALT, sizeof(__pyx_k_XL_FR_ERROR_POC_COMM_HALT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_POC_MODE, __pyx_k_XL_FR_ERROR_POC_MODE, sizeof(__pyx_k_XL_FR_ERROR_POC_MODE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_POC_PASSIVE, __pyx_k_XL_FR_ERROR_POC_PASSIVE, sizeof(__pyx_k_XL_FR_ERROR_POC_PASSIVE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_BELOWMIN, __pyx_k_XL_FR_ERROR_SYNC_FRAMES_BELOWMIN, sizeof(__pyx_k_XL_FR_ERROR_SYNC_FRAMES_BELOWMIN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_OVERLOAD, __pyx_k_XL_FR_ERROR_SYNC_FRAMES_OVERLOAD, sizeof(__pyx_k_XL_FR_ERROR_SYNC_FRAMES_OVERLOAD), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FILTER_BLOCK, __pyx_k_XL_FR_FILTER_BLOCK, sizeof(__pyx_k_XL_FR_FILTER_BLOCK), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FILTER_CHANNEL_A, __pyx_k_XL_FR_FILTER_CHANNEL_A, sizeof(__pyx_k_XL_FR_FILTER_CHANNEL_A), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FILTER_CHANNEL_B, __pyx_k_XL_FR_FILTER_CHANNEL_B, sizeof(__pyx_k_XL_FR_FILTER_CHANNEL_B), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FILTER_PASS, __pyx_k_XL_FR_FILTER_PASS, sizeof(__pyx_k_XL_FR_FILTER_PASS), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FILTER_TYPE_DATA, __pyx_k_XL_FR_FILTER_TYPE_DATA, sizeof(__pyx_k_XL_FR_FILTER_TYPE_DATA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FILTER_TYPE_FILLUP_NF, __pyx_k_XL_FR_FILTER_TYPE_FILLUP_NF, sizeof(__pyx_k_XL_FR_FILTER_TYPE_FILLUP_NF), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FILTER_TYPE_NF, __pyx_k_XL_FR_FILTER_TYPE_NF, sizeof(__pyx_k_XL_FR_FILTER_TYPE_NF), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_CONTENT_ERROR, __pyx_k_XL_FR_FRAMEFLAG_CONTENT_ERROR, sizeof(__pyx_k_XL_FR_FRAMEFLAG_CONTENT_ERROR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_DATA_UPDATE_LOST, __pyx_k_XL_FR_FRAMEFLAG_DATA_UPDATE_LOST, sizeof(__pyx_k_XL_FR_FRAMEFLAG_DATA_UPDATE_LOST), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_EMPTY_SLOT, __pyx_k_XL_FR_FRAMEFLAG_EMPTY_SLOT, sizeof(__pyx_k_XL_FR_FRAMEFLAG_EMPTY_SLOT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_FRAME_TRANSMITTE, __pyx_k_XL_FR_FRAMEFLAG_FRAME_TRANSMITTE, sizeof(__pyx_k_XL_FR_FRAMEFLAG_FRAME_TRANSMITTE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_FR_RESERVED, __pyx_k_XL_FR_FRAMEFLAG_FR_RESERVED, sizeof(__pyx_k_XL_FR_FRAMEFLAG_FR_RESERVED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_NEW_DATA_TX, __pyx_k_XL_FR_FRAMEFLAG_NEW_DATA_TX, sizeof(__pyx_k_XL_FR_FRAMEFLAG_NEW_DATA_TX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_NULLFRAME, __pyx_k_XL_FR_FRAMEFLAG_NULLFRAME, sizeof(__pyx_k_XL_FR_FRAMEFLAG_NULLFRAME), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE, __pyx_k_XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE, sizeof(__pyx_k_XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_REQ_TXACK, __pyx_k_XL_FR_FRAMEFLAG_REQ_TXACK, sizeof(__pyx_k_XL_FR_FRAMEFLAG_REQ_TXACK), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_RX_UNEXPECTED, __pyx_k_XL_FR_FRAMEFLAG_RX_UNEXPECTED, sizeof(__pyx_k_XL_FR_FRAMEFLAG_RX_UNEXPECTED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VI, __pyx_k_XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VI, sizeof(__pyx_k_XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VI), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_STARTUP, __pyx_k_XL_FR_FRAMEFLAG_STARTUP, sizeof(__pyx_k_XL_FR_FRAMEFLAG_STARTUP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_SYNC, __pyx_k_XL_FR_FRAMEFLAG_SYNC, sizeof(__pyx_k_XL_FR_FRAMEFLAG_SYNC), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_SYNTAX_ERROR, __pyx_k_XL_FR_FRAMEFLAG_SYNTAX_ERROR, sizeof(__pyx_k_XL_FR_FRAMEFLAG_SYNTAX_ERROR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_TXACK_SS, __pyx_k_XL_FR_FRAMEFLAG_TXACK_SS, sizeof(__pyx_k_XL_FR_FRAMEFLAG_TXACK_SS), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_FRAMEFLAG_TX_CONFLICT, __pyx_k_XL_FR_FRAMEFLAG_TX_CONFLICT, sizeof(__pyx_k_XL_FR_FRAMEFLAG_TX_CONFLICT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_MODE_COLDSTART_FOLLOWING, __pyx_k_XL_FR_MODE_COLDSTART_FOLLOWING, sizeof(__pyx_k_XL_FR_MODE_COLDSTART_FOLLOWING), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_MODE_COLDSTART_LEADING, __pyx_k_XL_FR_MODE_COLDSTART_LEADING, sizeof(__pyx_k_XL_FR_MODE_COLDSTART_LEADING), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_MODE_COLD_NORMAL, __pyx_k_XL_FR_MODE_COLD_NORMAL, sizeof(__pyx_k_XL_FR_MODE_COLD_NORMAL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_MODE_NONE, __pyx_k_XL_FR_MODE_NONE, sizeof(__pyx_k_XL_FR_MODE_NONE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_MODE_NORMAL, __pyx_k_XL_FR_MODE_NORMAL, sizeof(__pyx_k_XL_FR_MODE_NORMAL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_MODE_WAKEUP, __pyx_k_XL_FR_MODE_WAKEUP, sizeof(__pyx_k_XL_FR_MODE_WAKEUP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART, __pyx_k_XL_FR_MODE_WAKEUP_AND_COLDSTART, sizeof(__pyx_k_XL_FR_MODE_WAKEUP_AND_COLDSTART), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART_2, __pyx_k_XL_FR_MODE_WAKEUP_AND_COLDSTART_2, sizeof(__pyx_k_XL_FR_MODE_WAKEUP_AND_COLDSTART_2), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_NM_VECTOR, __pyx_k_XL_FR_NM_VECTOR, sizeof(__pyx_k_XL_FR_NM_VECTOR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_16BIT, __pyx_k_XL_FR_PAYLOAD_INCREMENT_16BIT, sizeof(__pyx_k_XL_FR_PAYLOAD_INCREMENT_16BIT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_32BIT, __pyx_k_XL_FR_PAYLOAD_INCREMENT_32BIT, sizeof(__pyx_k_XL_FR_PAYLOAD_INCREMENT_32BIT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_8BIT, __pyx_k_XL_FR_PAYLOAD_INCREMENT_8BIT, sizeof(__pyx_k_XL_FR_PAYLOAD_INCREMENT_8BIT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_PAYLOAD_INCREMENT_NONE, __pyx_k_XL_FR_PAYLOAD_INCREMENT_NONE, sizeof(__pyx_k_XL_FR_PAYLOAD_INCREMENT_NONE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_QUEUE_OVERFLOW, __pyx_k_XL_FR_QUEUE_OVERFLOW, sizeof(__pyx_k_XL_FR_QUEUE_OVERFLOW), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_RX_FRAME, __pyx_k_XL_FR_RX_FRAME, sizeof(__pyx_k_XL_FR_RX_FRAME), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SPY_CHANNEL_A, __pyx_k_XL_FR_SPY_CHANNEL_A, sizeof(__pyx_k_XL_FR_SPY_CHANNEL_A), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SPY_CHANNEL_B, __pyx_k_XL_FR_SPY_CHANNEL_B, sizeof(__pyx_k_XL_FR_SPY_CHANNEL_B), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SPY_FRAME, __pyx_k_XL_FR_SPY_FRAME, sizeof(__pyx_k_XL_FR_SPY_FRAME), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SPY_FRAMEFLAG_BUS_ERROR, __pyx_k_XL_FR_SPY_FRAMEFLAG_BUS_ERROR, sizeof(__pyx_k_XL_FR_SPY_FRAMEFLAG_BUS_ERROR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ER, __pyx_k_XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ER, sizeof(__pyx_k_XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ER), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAMING_ERRO, __pyx_k_XL_FR_SPY_FRAMEFLAG_FRAMING_ERRO, sizeof(__pyx_k_XL_FR_SPY_FRAMEFLAG_FRAMING_ERRO), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SPY_FRAMEFLAG_HEADER_CRC_E, __pyx_k_XL_FR_SPY_FRAMEFLAG_HEADER_CRC_E, sizeof(__pyx_k_XL_FR_SPY_FRAMEFLAG_HEADER_CRC_E), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SPY_SYMBOL, __pyx_k_XL_FR_SPY_SYMBOL, sizeof(__pyx_k_XL_FR_SPY_SYMBOL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_START_CYCLE, __pyx_k_XL_FR_START_CYCLE, sizeof(__pyx_k_XL_FR_START_CYCLE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS, __pyx_k_XL_FR_STATUS, sizeof(__pyx_k_XL_FR_STATUS), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_ABORT_STARTUP, __pyx_k_XL_FR_STATUS_ABORT_STARTUP, sizeof(__pyx_k_XL_FR_STATUS_ABORT_STARTUP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_COLDSTART_COLLISION, __pyx_k_XL_FR_STATUS_COLDSTART_COLLISION, sizeof(__pyx_k_XL_FR_STATUS_COLDSTART_COLLISION), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_COLDSTART_CONSISTEN, __pyx_k_XL_FR_STATUS_COLDSTART_CONSISTEN, sizeof(__pyx_k_XL_FR_STATUS_COLDSTART_CONSISTEN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_COLDSTART_GAP, __pyx_k_XL_FR_STATUS_COLDSTART_GAP, sizeof(__pyx_k_XL_FR_STATUS_COLDSTART_GAP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_COLDSTART_JOIN, __pyx_k_XL_FR_STATUS_COLDSTART_JOIN, sizeof(__pyx_k_XL_FR_STATUS_COLDSTART_JOIN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_COLDSTART_LISTEN, __pyx_k_XL_FR_STATUS_COLDSTART_LISTEN, sizeof(__pyx_k_XL_FR_STATUS_COLDSTART_LISTEN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_CONFIG, __pyx_k_XL_FR_STATUS_CONFIG, sizeof(__pyx_k_XL_FR_STATUS_CONFIG), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_DEFAULT_CONFIG, __pyx_k_XL_FR_STATUS_DEFAULT_CONFIG, sizeof(__pyx_k_XL_FR_STATUS_DEFAULT_CONFIG), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_HALT, __pyx_k_XL_FR_STATUS_HALT, sizeof(__pyx_k_XL_FR_STATUS_HALT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_INITIALIZE_SCHEDULE, __pyx_k_XL_FR_STATUS_INITIALIZE_SCHEDULE, sizeof(__pyx_k_XL_FR_STATUS_INITIALIZE_SCHEDULE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_INTEGRATION_COLDSTA, __pyx_k_XL_FR_STATUS_INTEGRATION_COLDSTA, sizeof(__pyx_k_XL_FR_STATUS_INTEGRATION_COLDSTA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_INTEGRATION_CONSIST, __pyx_k_XL_FR_STATUS_INTEGRATION_CONSIST, sizeof(__pyx_k_XL_FR_STATUS_INTEGRATION_CONSIST), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_INTEGRATION_LISTEN, __pyx_k_XL_FR_STATUS_INTEGRATION_LISTEN, sizeof(__pyx_k_XL_FR_STATUS_INTEGRATION_LISTEN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_MONITOR_MODE, __pyx_k_XL_FR_STATUS_MONITOR_MODE, sizeof(__pyx_k_XL_FR_STATUS_MONITOR_MODE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_NORMAL_ACTIVE, __pyx_k_XL_FR_STATUS_NORMAL_ACTIVE, sizeof(__pyx_k_XL_FR_STATUS_NORMAL_ACTIVE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_NORMAL_PASSIVE, __pyx_k_XL_FR_STATUS_NORMAL_PASSIVE, sizeof(__pyx_k_XL_FR_STATUS_NORMAL_PASSIVE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_READY, __pyx_k_XL_FR_STATUS_READY, sizeof(__pyx_k_XL_FR_STATUS_READY), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_STARTUP_PREPARE, __pyx_k_XL_FR_STATUS_STARTUP_PREPARE, sizeof(__pyx_k_XL_FR_STATUS_STARTUP_PREPARE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_STARTUP_SUCCESS, __pyx_k_XL_FR_STATUS_STARTUP_SUCCESS, sizeof(__pyx_k_XL_FR_STATUS_STARTUP_SUCCESS), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_WAKEUP_DETECT, __pyx_k_XL_FR_STATUS_WAKEUP_DETECT, sizeof(__pyx_k_XL_FR_STATUS_WAKEUP_DETECT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_WAKEUP_LISTEN, __pyx_k_XL_FR_STATUS_WAKEUP_LISTEN, sizeof(__pyx_k_XL_FR_STATUS_WAKEUP_LISTEN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_WAKEUP_SEND, __pyx_k_XL_FR_STATUS_WAKEUP_SEND, sizeof(__pyx_k_XL_FR_STATUS_WAKEUP_SEND), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_STATUS_WAKEUP_STANDBY, __pyx_k_XL_FR_STATUS_WAKEUP_STANDBY, sizeof(__pyx_k_XL_FR_STATUS_WAKEUP_STANDBY), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SYMBOL_CAS, __pyx_k_XL_FR_SYMBOL_CAS, sizeof(__pyx_k_XL_FR_SYMBOL_CAS), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SYMBOL_MTS, __pyx_k_XL_FR_SYMBOL_MTS, sizeof(__pyx_k_XL_FR_SYMBOL_MTS), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SYMBOL_STATUS_MTSA, __pyx_k_XL_FR_SYMBOL_STATUS_MTSA, sizeof(__pyx_k_XL_FR_SYMBOL_STATUS_MTSA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SYMBOL_STATUS_MTSB, __pyx_k_XL_FR_SYMBOL_STATUS_MTSB, sizeof(__pyx_k_XL_FR_SYMBOL_STATUS_MTSB), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SYMBOL_STATUS_SBSA, __pyx_k_XL_FR_SYMBOL_STATUS_SBSA, sizeof(__pyx_k_XL_FR_SYMBOL_STATUS_SBSA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SYMBOL_STATUS_SBSB, __pyx_k_XL_FR_SYMBOL_STATUS_SBSB, sizeof(__pyx_k_XL_FR_SYMBOL_STATUS_SBSB), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SYMBOL_STATUS_SESA, __pyx_k_XL_FR_SYMBOL_STATUS_SESA, sizeof(__pyx_k_XL_FR_SYMBOL_STATUS_SESA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SYMBOL_STATUS_SESB, __pyx_k_XL_FR_SYMBOL_STATUS_SESB, sizeof(__pyx_k_XL_FR_SYMBOL_STATUS_SESB), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SYMBOL_STATUS_TCSA, __pyx_k_XL_FR_SYMBOL_STATUS_TCSA, sizeof(__pyx_k_XL_FR_SYMBOL_STATUS_TCSA), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SYMBOL_STATUS_TCSB, __pyx_k_XL_FR_SYMBOL_STATUS_TCSB, sizeof(__pyx_k_XL_FR_SYMBOL_STATUS_TCSB), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_SYMBOL_WINDOW, __pyx_k_XL_FR_SYMBOL_WINDOW, sizeof(__pyx_k_XL_FR_SYMBOL_WINDOW), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_TRANCEIVER_STATUS, __pyx_k_XL_FR_TRANCEIVER_STATUS, sizeof(__pyx_k_XL_FR_TRANCEIVER_STATUS), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_TRANSCEIVER_MODE_NORMAL, __pyx_k_XL_FR_TRANSCEIVER_MODE_NORMAL, sizeof(__pyx_k_XL_FR_TRANSCEIVER_MODE_NORMAL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_TRANSCEIVER_MODE_RECEIVE_O, __pyx_k_XL_FR_TRANSCEIVER_MODE_RECEIVE_O, sizeof(__pyx_k_XL_FR_TRANSCEIVER_MODE_RECEIVE_O), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_TRANSCEIVER_MODE_SLEEP, __pyx_k_XL_FR_TRANSCEIVER_MODE_SLEEP, sizeof(__pyx_k_XL_FR_TRANSCEIVER_MODE_SLEEP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_TRANSCEIVER_MODE_STANDBY, __pyx_k_XL_FR_TRANSCEIVER_MODE_STANDBY, sizeof(__pyx_k_XL_FR_TRANSCEIVER_MODE_STANDBY), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_TX_FRAME, __pyx_k_XL_FR_TX_FRAME, sizeof(__pyx_k_XL_FR_TX_FRAME), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_TX_MODE_CYCLIC, __pyx_k_XL_FR_TX_MODE_CYCLIC, sizeof(__pyx_k_XL_FR_TX_MODE_CYCLIC), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_TX_MODE_NONE, __pyx_k_XL_FR_TX_MODE_NONE, sizeof(__pyx_k_XL_FR_TX_MODE_NONE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_TX_MODE_SINGLE_SHOT, __pyx_k_XL_FR_TX_MODE_SINGLE_SHOT, sizeof(__pyx_k_XL_FR_TX_MODE_SINGLE_SHOT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_WAKEUP, __pyx_k_XL_FR_WAKEUP, sizeof(__pyx_k_XL_FR_WAKEUP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_WAKEUP_COLLISION_HEADER, __pyx_k_XL_FR_WAKEUP_COLLISION_HEADER, sizeof(__pyx_k_XL_FR_WAKEUP_COLLISION_HEADER), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_WAKEUP_COLLISION_UNKNOWN, __pyx_k_XL_FR_WAKEUP_COLLISION_UNKNOWN, sizeof(__pyx_k_XL_FR_WAKEUP_COLLISION_UNKNOWN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_WAKEUP_COLLISION_WUP, __pyx_k_XL_FR_WAKEUP_COLLISION_WUP, sizeof(__pyx_k_XL_FR_WAKEUP_COLLISION_WUP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_WAKEUP_RECEIVED_HEADER, __pyx_k_XL_FR_WAKEUP_RECEIVED_HEADER, sizeof(__pyx_k_XL_FR_WAKEUP_RECEIVED_HEADER), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_WAKEUP_RECEIVED_WUP, __pyx_k_XL_FR_WAKEUP_RECEIVED_WUP, sizeof(__pyx_k_XL_FR_WAKEUP_RECEIVED_WUP), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_WAKEUP_RESERVED, __pyx_k_XL_FR_WAKEUP_RESERVED, sizeof(__pyx_k_XL_FR_WAKEUP_RESERVED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_WAKEUP_TRANSMITTED, __pyx_k_XL_FR_WAKEUP_TRANSMITTED, sizeof(__pyx_k_XL_FR_WAKEUP_TRANSMITTED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_FR_WAKEUP_UNDEFINED, __pyx_k_XL_FR_WAKEUP_UNDEFINED, sizeof(__pyx_k_XL_FR_WAKEUP_UNDEFINED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_CANAC2PCI, __pyx_k_XL_HWTYPE_CANAC2PCI, sizeof(__pyx_k_XL_HWTYPE_CANAC2PCI), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_CANBOARDXL, __pyx_k_XL_HWTYPE_CANBOARDXL, sizeof(__pyx_k_XL_HWTYPE_CANBOARDXL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_CANBOARDXL_PXI, __pyx_k_XL_HWTYPE_CANBOARDXL_PXI, sizeof(__pyx_k_XL_HWTYPE_CANBOARDXL_PXI), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_CANCARDX, __pyx_k_XL_HWTYPE_CANCARDX, sizeof(__pyx_k_XL_HWTYPE_CANCARDX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_CANCARDXL, __pyx_k_XL_HWTYPE_CANCARDXL, sizeof(__pyx_k_XL_HWTYPE_CANCARDXL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_CANCARDXLE, __pyx_k_XL_HWTYPE_CANCARDXLE, sizeof(__pyx_k_XL_HWTYPE_CANCARDXLE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_CANCARDY, __pyx_k_XL_HWTYPE_CANCARDY, sizeof(__pyx_k_XL_HWTYPE_CANCARDY), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_CANCASEXL, __pyx_k_XL_HWTYPE_CANCASEXL, sizeof(__pyx_k_XL_HWTYPE_CANCASEXL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_CANCASEXL_LOG_OBSOLETE, __pyx_k_XL_HWTYPE_CANCASEXL_LOG_OBSOLETE, sizeof(__pyx_k_XL_HWTYPE_CANCASEXL_LOG_OBSOLETE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_CSMCAN, __pyx_k_XL_HWTYPE_CSMCAN, sizeof(__pyx_k_XL_HWTYPE_CSMCAN), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_IPCL8800, __pyx_k_XL_HWTYPE_IPCL8800, sizeof(__pyx_k_XL_HWTYPE_IPCL8800), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_IPCLIENT, __pyx_k_XL_HWTYPE_IPCLIENT, sizeof(__pyx_k_XL_HWTYPE_IPCLIENT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_IPSERVER, __pyx_k_XL_HWTYPE_IPSERVER, sizeof(__pyx_k_XL_HWTYPE_IPSERVER), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_IPSRV8800, __pyx_k_XL_HWTYPE_IPSRV8800, sizeof(__pyx_k_XL_HWTYPE_IPSRV8800), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_NONE, __pyx_k_XL_HWTYPE_NONE, sizeof(__pyx_k_XL_HWTYPE_NONE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VIRTUAL, __pyx_k_XL_HWTYPE_VIRTUAL, sizeof(__pyx_k_XL_HWTYPE_VIRTUAL), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN0601, __pyx_k_XL_HWTYPE_VN0601, sizeof(__pyx_k_XL_HWTYPE_VN0601), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN1610, __pyx_k_XL_HWTYPE_VN1610, sizeof(__pyx_k_XL_HWTYPE_VN1610), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN1611, __pyx_k_XL_HWTYPE_VN1611, sizeof(__pyx_k_XL_HWTYPE_VN1611), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN1630, __pyx_k_XL_HWTYPE_VN1630, sizeof(__pyx_k_XL_HWTYPE_VN1630), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN1630_LOG, __pyx_k_XL_HWTYPE_VN1630_LOG, sizeof(__pyx_k_XL_HWTYPE_VN1630_LOG), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN1640, __pyx_k_XL_HWTYPE_VN1640, sizeof(__pyx_k_XL_HWTYPE_VN1640), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN2600, __pyx_k_XL_HWTYPE_VN2600, sizeof(__pyx_k_XL_HWTYPE_VN2600), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN2610, __pyx_k_XL_HWTYPE_VN2610, sizeof(__pyx_k_XL_HWTYPE_VN2610), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN2640, __pyx_k_XL_HWTYPE_VN2640, sizeof(__pyx_k_XL_HWTYPE_VN2640), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN3300, __pyx_k_XL_HWTYPE_VN3300, sizeof(__pyx_k_XL_HWTYPE_VN3300), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN3600, __pyx_k_XL_HWTYPE_VN3600, sizeof(__pyx_k_XL_HWTYPE_VN3600), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN5610, __pyx_k_XL_HWTYPE_VN5610, sizeof(__pyx_k_XL_HWTYPE_VN5610), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN5610A, __pyx_k_XL_HWTYPE_VN5610A, sizeof(__pyx_k_XL_HWTYPE_VN5610A), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN7570, __pyx_k_XL_HWTYPE_VN7570, sizeof(__pyx_k_XL_HWTYPE_VN7570), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN7572, __pyx_k_XL_HWTYPE_VN7572, sizeof(__pyx_k_XL_HWTYPE_VN7572), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN7600, __pyx_k_XL_HWTYPE_VN7600, sizeof(__pyx_k_XL_HWTYPE_VN7600), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN7610, __pyx_k_XL_HWTYPE_VN7610, sizeof(__pyx_k_XL_HWTYPE_VN7610), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN7640, __pyx_k_XL_HWTYPE_VN7640, sizeof(__pyx_k_XL_HWTYPE_VN7640), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN8800, __pyx_k_XL_HWTYPE_VN8800, sizeof(__pyx_k_XL_HWTYPE_VN8800), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN8900, __pyx_k_XL_HWTYPE_VN8900, sizeof(__pyx_k_XL_HWTYPE_VN8900), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN8950, __pyx_k_XL_HWTYPE_VN8950, sizeof(__pyx_k_XL_HWTYPE_VN8950), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN8970, __pyx_k_XL_HWTYPE_VN8970, sizeof(__pyx_k_XL_HWTYPE_VN8970), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VN8972, __pyx_k_XL_HWTYPE_VN8972, sizeof(__pyx_k_XL_HWTYPE_VN8972), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VT6204, __pyx_k_XL_HWTYPE_VT6204, sizeof(__pyx_k_XL_HWTYPE_VT6204), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VX0312, __pyx_k_XL_HWTYPE_VX0312, sizeof(__pyx_k_XL_HWTYPE_VX0312), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VX1121, __pyx_k_XL_HWTYPE_VX1121, sizeof(__pyx_k_XL_HWTYPE_VX1121), 0, 0, 1, 1},
    {&__pyx_n_s_XL_HWTYPE_VX1131, __pyx_k_XL_HWTYPE_VX1131, sizeof(__pyx_k_XL_HWTYPE_VX1131), 0, 0, 1, 1},
    {&__pyx_n_s_XL_INTERFACE_VERSION, __pyx_k_XL_INTERFACE_VERSION, sizeof(__pyx_k_XL_INTERFACE_VERSION), 0, 0, 1, 1},
    {&__pyx_n_s_XL_INTERFACE_VERSION_V2, __pyx_k_XL_INTERFACE_VERSION_V2, sizeof(__pyx_k_XL_INTERFACE_VERSION_V2), 0, 0, 1, 1},
    {&__pyx_n_s_XL_INTERFACE_VERSION_V3, __pyx_k_XL_INTERFACE_VERSION_V3, sizeof(__pyx_k_XL_INTERFACE_VERSION_V3), 0, 0, 1, 1},
    {&__pyx_n_s_XL_INTERFACE_VERSION_V4, __pyx_k_XL_INTERFACE_VERSION_V4, sizeof(__pyx_k_XL_INTERFACE_VERSION_V4), 0, 0, 1, 1},
    {&__pyx_n_s_XL_INVALID_PORTHANDLE, __pyx_k_XL_INVALID_PORTHANDLE, sizeof(__pyx_k_XL_INVALID_PORTHANDLE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_LIN_MSGFLAG_CRCERROR, __pyx_k_XL_LIN_MSGFLAG_CRCERROR, sizeof(__pyx_k_XL_LIN_MSGFLAG_CRCERROR), 0, 0, 1, 1},
    {&__pyx_n_s_XL_LIN_MSGFLAG_TX, __pyx_k_XL_LIN_MSGFLAG_TX, sizeof(__pyx_k_XL_LIN_MSGFLAG_TX), 0, 0, 1, 1},
    {&__pyx_n_s_XL_MAX_HWTYPE, __pyx_k_XL_MAX_HWTYPE, sizeof(__pyx_k_XL_MAX_HWTYPE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_NOTIFY_REASON_CHANNEL_ACTIVAT, __pyx_k_XL_NOTIFY_REASON_CHANNEL_ACTIVAT, sizeof(__pyx_k_XL_NOTIFY_REASON_CHANNEL_ACTIVAT), 0, 0, 1, 1},
    {&__pyx_n_s_XL_NOTIFY_REASON_CHANNEL_DEACTIV, __pyx_k_XL_NOTIFY_REASON_CHANNEL_DEACTIV, sizeof(__pyx_k_XL_NOTIFY_REASON_CHANNEL_DEACTIV), 0, 0, 1, 1},
    {&__pyx_n_s_XL_NOTIFY_REASON_PORT_CLOSED, __pyx_k_XL_NOTIFY_REASON_PORT_CLOSED, sizeof(__pyx_k_XL_NOTIFY_REASON_PORT_CLOSED), 0, 0, 1, 1},
    {&__pyx_n_s_XL_PENDING, __pyx_k_XL_PENDING, sizeof(__pyx_k_XL_PENDING), 0, 0, 1, 1},
    {&__pyx_n_s_XL_SET_TIMESYNC_NO_CHANGE, __pyx_k_XL_SET_TIMESYNC_NO_CHANGE, sizeof(__pyx_k_XL_SET_TIMESYNC_NO_CHANGE), 0, 0, 1, 1},
    {&__pyx_n_s_XL_SET_TIMESYNC_OFF, __pyx_k_XL_SET_TIMESYNC_OFF, sizeof(__pyx_k_XL_SET_TIMESYNC_OFF), 0, 0, 1, 1},
    {&__pyx_n_s_XL_SET_TIMESYNC_ON, __pyx_k_XL_SET_TIMESYNC_ON, sizeof(__pyx_k_XL_SET_TIMESYNC_ON), 0, 0, 1, 1},
    {&__pyx_n_s_XL_SUCCESS, __pyx_k_XL_SUCCESS, sizeof(__pyx_k_XL_SUCCESS), 0, 0, 1, 1},
    {&__pyx_n_s_XLstatus, __pyx_k_XLstatus, sizeof(__pyx_k_XLstatus), 0, 0, 1, 1},
    {&__pyx_n_s__104, __pyx_k__104, sizeof(__pyx_k__104), 0, 0, 1, 1},
    {&__pyx_n_s_a429, __pyx_k_a429, sizeof(__pyx_k_a429), 0, 0, 1, 1},
    {&__pyx_n_s_acceptanceFilter, __pyx_k_acceptanceFilter, sizeof(__pyx_k_acceptanceFilter), 0, 0, 1, 1},
    {&__pyx_n_s_accessMask, __pyx_k_accessMask, sizeof(__pyx_k_accessMask), 0, 0, 1, 1},
    {&__pyx_n_s_activeSpeedGrade, __pyx_k_activeSpeedGrade, sizeof(__pyx_k_activeSpeedGrade), 0, 0, 1, 1},
    {&__pyx_n_s_appChannel, __pyx_k_appChannel, sizeof(__pyx_k_appChannel), 0, 0, 1, 1},
    {&__pyx_n_s_appName, __pyx_k_appName, sizeof(__pyx_k_appName), 0, 0, 1, 1},
    {&__pyx_n_s_applicationNotification, __pyx_k_applicationNotification, sizeof(__pyx_k_applicationNotification), 0, 0, 1, 1},
    {&__pyx_n_s_arbitrationBitRate, __pyx_k_arbitrationBitRate, sizeof(__pyx_k_arbitrationBitRate), 0, 0, 1, 1},
    {&__pyx_n_s_articleNumber, __pyx_k_articleNumber, sizeof(__pyx_k_articleNumber), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_autoBaudrate, __pyx_k_autoBaudrate, sizeof(__pyx_k_autoBaudrate), 0, 0, 1, 1},
    {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
    {&__pyx_n_s_bAvailable, __pyx_k_bAvailable, sizeof(__pyx_k_bAvailable), 0, 0, 1, 1},
    {&__pyx_n_s_baudrate, __pyx_k_baudrate, sizeof(__pyx_k_baudrate), 0, 0, 1, 1},
    {&__pyx_n_s_bitRate, __pyx_k_bitRate, sizeof(__pyx_k_bitRate), 0, 0, 1, 1},
    {&__pyx_n_s_bitrate, __pyx_k_bitrate, sizeof(__pyx_k_bitrate), 0, 0, 1, 1},
    {&__pyx_n_s_boxCount, __pyx_k_boxCount, sizeof(__pyx_k_boxCount), 0, 0, 1, 1},
    {&__pyx_n_s_boxIndex, __pyx_k_boxIndex, sizeof(__pyx_k_boxIndex), 0, 0, 1, 1},
    {&__pyx_n_s_boxMask, __pyx_k_boxMask, sizeof(__pyx_k_boxMask), 0, 0, 1, 1},
    {&__pyx_n_s_boxSerial, __pyx_k_boxSerial, sizeof(__pyx_k_boxSerial), 0, 0, 1, 1},
    {&__pyx_n_s_breakOffset, __pyx_k_breakOffset, sizeof(__pyx_k_breakOffset), 0, 0, 1, 1},
    {&__pyx_n_s_btr0, __pyx_k_btr0, sizeof(__pyx_k_btr0), 0, 0, 1, 1},
    {&__pyx_n_s_btr1, __pyx_k_btr1, sizeof(__pyx_k_btr1), 0, 0, 1, 1},
    {&__pyx_n_s_busGuardianEnable, __pyx_k_busGuardianEnable, sizeof(__pyx_k_busGuardianEnable), 0, 0, 1, 1},
    {&__pyx_n_s_busGuardianTick, __pyx_k_busGuardianTick, sizeof(__pyx_k_busGuardianTick), 0, 0, 1, 1},
    {&__pyx_n_s_busParams, __pyx_k_busParams, sizeof(__pyx_k_busParams), 0, 0, 1, 1},
    {&__pyx_n_s_busType, __pyx_k_busType, sizeof(__pyx_k_busType), 0, 0, 1, 1},
    {&__pyx_n_s_bypass, __pyx_k_bypass, sizeof(__pyx_k_bypass), 0, 0, 1, 1},
    {&__pyx_n_s_callSign, __pyx_k_callSign, sizeof(__pyx_k_callSign), 0, 0, 1, 1},
    {&__pyx_n_s_can, __pyx_k_can, sizeof(__pyx_k_can), 0, 0, 1, 1},
    {&__pyx_n_s_canFD, __pyx_k_canFD, sizeof(__pyx_k_canFD), 0, 0, 1, 1},
    {&__pyx_n_s_canFdConf, __pyx_k_canFdConf, sizeof(__pyx_k_canFdConf), 0, 0, 1, 1},
    {&__pyx_n_s_canId, __pyx_k_canId, sizeof(__pyx_k_canId), 0, 0, 1, 1},
    {&__pyx_n_s_canOpMode, __pyx_k_canOpMode, sizeof(__pyx_k_canOpMode), 0, 0, 1, 1},
    {&__pyx_n_s_ccError, __pyx_k_ccError, sizeof(__pyx_k_ccError), 0, 0, 1, 1},
    {&__pyx_n_s_cfgMode, __pyx_k_cfgMode, sizeof(__pyx_k_cfgMode), 0, 0, 1, 1},
    {&__pyx_n_s_ch, __pyx_k_ch, sizeof(__pyx_k_ch), 0, 0, 1, 1},
    {&__pyx_n_s_chanIndex, __pyx_k_chanIndex, sizeof(__pyx_k_chanIndex), 0, 0, 1, 1},
    {&__pyx_n_s_channel, __pyx_k_channel, sizeof(__pyx_k_channel), 0, 0, 1, 1},
    {&__pyx_n_s_channelBusActiveCapabilities, __pyx_k_channelBusActiveCapabilities, sizeof(__pyx_k_channelBusActiveCapabilities), 0, 0, 1, 1},
    {&__pyx_n_s_channelBusCapabilities, __pyx_k_channelBusCapabilities, sizeof(__pyx_k_channelBusCapabilities), 0, 0, 1, 1},
    {&__pyx_n_s_channelCapabilities, __pyx_k_channelCapabilities, sizeof(__pyx_k_channelCapabilities), 0, 0, 1, 1},
    {&__pyx_n_s_channelConfig, __pyx_k_channelConfig, sizeof(__pyx_k_channelConfig), 0, 0, 1, 1},
    {&__pyx_n_s_channelCount, __pyx_k_channelCount, sizeof(__pyx_k_channelCount), 0, 0, 1, 1},
    {&__pyx_n_s_channelDirection, __pyx_k_channelDirection, sizeof(__pyx_k_channelDirection), 0, 0, 1, 1},
    {&__pyx_n_s_channelIndex, __pyx_k_channelIndex, sizeof(__pyx_k_channelIndex), 0, 0, 1, 1},
    {&__pyx_n_s_channelMask, __pyx_k_channelMask, sizeof(__pyx_k_channelMask), 0, 0, 1, 1},
    {&__pyx_n_s_channelTime, __pyx_k_channelTime, sizeof(__pyx_k_channelTime), 0, 0, 1, 1},
    {&__pyx_n_s_chipParams, __pyx_k_chipParams, sizeof(__pyx_k_chipParams), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_clockCorrFailedCounter, __pyx_k_clockCorrFailedCounter, sizeof(__pyx_k_clockCorrFailedCounter), 0, 0, 1, 1},
    {&__pyx_n_s_clockMode, __pyx_k_clockMode, sizeof(__pyx_k_clockMode), 0, 0, 1, 1},
    {&__pyx_n_s_clusterConfig, __pyx_k_clusterConfig, sizeof(__pyx_k_clusterConfig), 0, 0, 1, 1},
    {&__pyx_n_s_code, __pyx_k_code, sizeof(__pyx_k_code), 0, 0, 1, 1},
    {&__pyx_n_s_compatibleSpeedGrade, __pyx_k_compatibleSpeedGrade, sizeof(__pyx_k_compatibleSpeedGrade), 0, 0, 1, 1},
    {&__pyx_n_s_configError, __pyx_k_configError, sizeof(__pyx_k_configError), 0, 0, 1, 1},
    {&__pyx_n_s_connectedBusType, __pyx_k_connectedBusType, sizeof(__pyx_k_connectedBusType), 0, 0, 1, 1},
    {&__pyx_n_s_connectionInfo, __pyx_k_connectionInfo, sizeof(__pyx_k_connectionInfo), 0, 0, 1, 1},
    {&__pyx_n_s_connector, __pyx_k_connector, sizeof(__pyx_k_connector), 0, 0, 1, 1},
    {&__pyx_n_s_currentlyAvailableTimestamps, __pyx_k_currentlyAvailableTimestamps, sizeof(__pyx_k_currentlyAvailableTimestamps), 0, 0, 1, 1},
    {&__pyx_n_s_cycleCount, __pyx_k_cycleCount, sizeof(__pyx_k_cycleCount), 0, 0, 1, 1},
    {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
    {&__pyx_n_s_dataBitRate, __pyx_k_dataBitRate, sizeof(__pyx_k_dataBitRate), 0, 0, 1, 1},
    {&__pyx_n_s_delimiterOffset, __pyx_k_delimiterOffset, sizeof(__pyx_k_delimiterOffset), 0, 0, 1, 1},
    {&__pyx_n_s_dir, __pyx_k_dir, sizeof(__pyx_k_dir), 0, 0, 1, 1},
    {&__pyx_n_s_dlc, __pyx_k_dlc, sizeof(__pyx_k_dlc), 0, 0, 1, 1},
    {&__pyx_n_s_dllVersion, __pyx_k_dllVersion, sizeof(__pyx_k_dllVersion), 0, 0, 1, 1},
    {&__pyx_n_s_doNotUse, __pyx_k_doNotUse, sizeof(__pyx_k_doNotUse), 0, 0, 1, 1},
    {&__pyx_n_s_dominantRecessiveDelay, __pyx_k_dominantRecessiveDelay, sizeof(__pyx_k_dominantRecessiveDelay), 0, 0, 1, 1},
    {&__pyx_n_s_dominantTimeout, __pyx_k_dominantTimeout, sizeof(__pyx_k_dominantTimeout), 0, 0, 1, 1},
    {&__pyx_n_s_driverConfig, __pyx_k_driverConfig, sizeof(__pyx_k_driverConfig), 0, 0, 1, 1},
    {&__pyx_n_s_driverVersion, __pyx_k_driverVersion, sizeof(__pyx_k_driverVersion), 0, 0, 1, 1},
    {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
    {&__pyx_n_s_err, __pyx_k_err, sizeof(__pyx_k_err), 0, 0, 1, 1},
    {&__pyx_n_s_errorInfo, __pyx_k_errorInfo, sizeof(__pyx_k_errorInfo), 0, 0, 1, 1},
    {&__pyx_n_s_errorMode, __pyx_k_errorMode, sizeof(__pyx_k_errorMode), 0, 0, 1, 1},
    {&__pyx_n_s_ethernet, __pyx_k_ethernet, sizeof(__pyx_k_ethernet), 0, 0, 1, 1},
    {&__pyx_n_s_evenSyncFramesA, __pyx_k_evenSyncFramesA, sizeof(__pyx_k_evenSyncFramesA), 0, 0, 1, 1},
    {&__pyx_n_s_evenSyncFramesB, __pyx_k_evenSyncFramesB, sizeof(__pyx_k_evenSyncFramesB), 0, 0, 1, 1},
    {&__pyx_n_s_eventBuffer, __pyx_k_eventBuffer, sizeof(__pyx_k_eventBuffer), 0, 0, 1, 1},
    {&__pyx_n_s_eventCount, __pyx_k_eventCount, sizeof(__pyx_k_eventCount), 0, 0, 1, 1},
    {&__pyx_n_s_externalClockCorrectionMode, __pyx_k_externalClockCorrectionMode, sizeof(__pyx_k_externalClockCorrectionMode), 0, 0, 1, 1},
    {&__pyx_n_s_filterChannelMask, __pyx_k_filterChannelMask, sizeof(__pyx_k_filterChannelMask), 0, 0, 1, 1},
    {&__pyx_n_s_filterFirstSlot, __pyx_k_filterFirstSlot, sizeof(__pyx_k_filterFirstSlot), 0, 0, 1, 1},
    {&__pyx_n_s_filterLastSlot, __pyx_k_filterLastSlot, sizeof(__pyx_k_filterLastSlot), 0, 0, 1, 1},
    {&__pyx_n_s_filterStatus, __pyx_k_filterStatus, sizeof(__pyx_k_filterStatus), 0, 0, 1, 1},
    {&__pyx_n_s_filterTypeMask, __pyx_k_filterTypeMask, sizeof(__pyx_k_filterTypeMask), 0, 0, 1, 1},
    {&__pyx_n_s_first_id, __pyx_k_first_id, sizeof(__pyx_k_first_id), 0, 0, 1, 1},
    {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
    {&__pyx_n_s_flagsChip, __pyx_k_flagsChip, sizeof(__pyx_k_flagsChip), 0, 0, 1, 1},
    {&__pyx_n_s_flexray, __pyx_k_flexray, sizeof(__pyx_k_flexray), 0, 0, 1, 1},
    {&__pyx_n_s_fpgaCoreCapabilities, __pyx_k_fpgaCoreCapabilities, sizeof(__pyx_k_fpgaCoreCapabilities), 0, 0, 1, 1},
    {&__pyx_n_s_frCCError, __pyx_k_frCCError, sizeof(__pyx_k_frCCError), 0, 0, 1, 1},
    {&__pyx_n_s_frChannel, __pyx_k_frChannel, sizeof(__pyx_k_frChannel), 0, 0, 1, 1},
    {&__pyx_n_s_frClockCorrectionFailure, __pyx_k_frClockCorrectionFailure, sizeof(__pyx_k_frClockCorrectionFailure), 0, 0, 1, 1},
    {&__pyx_n_s_frError, __pyx_k_frError, sizeof(__pyx_k_frError), 0, 0, 1, 1},
    {&__pyx_n_s_frMode, __pyx_k_frMode, sizeof(__pyx_k_frMode), 0, 0, 1, 1},
    {&__pyx_n_s_frNitFailure, __pyx_k_frNitFailure, sizeof(__pyx_k_frNitFailure), 0, 0, 1, 1},
    {&__pyx_n_s_frNmVector, __pyx_k_frNmVector, sizeof(__pyx_k_frNmVector), 0, 0, 1, 1},
    {&__pyx_n_s_frPocMode, __pyx_k_frPocMode, sizeof(__pyx_k_frPocMode), 0, 0, 1, 1},
    {&__pyx_n_s_frRxFrame, __pyx_k_frRxFrame, sizeof(__pyx_k_frRxFrame), 0, 0, 1, 1},
    {&__pyx_n_s_frSpyFrame, __pyx_k_frSpyFrame, sizeof(__pyx_k_frSpyFrame), 0, 0, 1, 1},
    {&__pyx_n_s_frSpySymbol, __pyx_k_frSpySymbol, sizeof(__pyx_k_frSpySymbol), 0, 0, 1, 1},
    {&__pyx_n_s_frStartCycle, __pyx_k_frStartCycle, sizeof(__pyx_k_frStartCycle), 0, 0, 1, 1},
    {&__pyx_n_s_frStartupAttributes, __pyx_k_frStartupAttributes, sizeof(__pyx_k_frStartupAttributes), 0, 0, 1, 1},
    {&__pyx_n_s_frStatus, __pyx_k_frStatus, sizeof(__pyx_k_frStatus), 0, 0, 1, 1},
    {&__pyx_n_s_frSymbolWindow, __pyx_k_frSymbolWindow, sizeof(__pyx_k_frSymbolWindow), 0, 0, 1, 1},
    {&__pyx_n_s_frSyncFramesBelowMin, __pyx_k_frSyncFramesBelowMin, sizeof(__pyx_k_frSyncFramesBelowMin), 0, 0, 1, 1},
    {&__pyx_n_s_frSyncFramesOverload, __pyx_k_frSyncFramesOverload, sizeof(__pyx_k_frSyncFramesOverload), 0, 0, 1, 1},
    {&__pyx_n_s_frSyncPulse, __pyx_k_frSyncPulse, sizeof(__pyx_k_frSyncPulse), 0, 0, 1, 1},
    {&__pyx_n_s_frTxFrame, __pyx_k_frTxFrame, sizeof(__pyx_k_frTxFrame), 0, 0, 1, 1},
    {&__pyx_n_s_frWakeup, __pyx_k_frWakeup, sizeof(__pyx_k_frWakeup), 0, 0, 1, 1},
    {&__pyx_n_s_frameCRC, __pyx_k_frameCRC, sizeof(__pyx_k_frameCRC), 0, 0, 1, 1},
    {&__pyx_n_s_frameError, __pyx_k_frameError, sizeof(__pyx_k_frameError), 0, 0, 1, 1},
    {&__pyx_n_s_frameLength, __pyx_k_frameLength, sizeof(__pyx_k_frameLength), 0, 0, 1, 1},
    {&__pyx_n_s_gChannels, __pyx_k_gChannels, sizeof(__pyx_k_gChannels), 0, 0, 1, 1},
    {&__pyx_n_s_gColdStartAttempts, __pyx_k_gColdStartAttempts, sizeof(__pyx_k_gColdStartAttempts), 0, 0, 1, 1},
    {&__pyx_n_s_gListenNoise, __pyx_k_gListenNoise, sizeof(__pyx_k_gListenNoise), 0, 0, 1, 1},
    {&__pyx_n_s_gMacroPerCycle, __pyx_k_gMacroPerCycle, sizeof(__pyx_k_gMacroPerCycle), 0, 0, 1, 1},
    {&__pyx_n_s_gMaxWithoutClockCorrectionFatal, __pyx_k_gMaxWithoutClockCorrectionFatal, sizeof(__pyx_k_gMaxWithoutClockCorrectionFatal), 0, 0, 1, 1},
    {&__pyx_n_s_gMaxWithoutClockCorrectionPassiv, __pyx_k_gMaxWithoutClockCorrectionPassiv, sizeof(__pyx_k_gMaxWithoutClockCorrectionPassiv), 0, 0, 1, 1},
    {&__pyx_n_s_gNetworkManagementVectorLength, __pyx_k_gNetworkManagementVectorLength, sizeof(__pyx_k_gNetworkManagementVectorLength), 0, 0, 1, 1},
    {&__pyx_n_s_gNumberOfMinislots, __pyx_k_gNumberOfMinislots, sizeof(__pyx_k_gNumberOfMinislots), 0, 0, 1, 1},
    {&__pyx_n_s_gNumberOfStaticSlots, __pyx_k_gNumberOfStaticSlots, sizeof(__pyx_k_gNumberOfStaticSlots), 0, 0, 1, 1},
    {&__pyx_n_s_gOffsetCorrectionStart, __pyx_k_gOffsetCorrectionStart, sizeof(__pyx_k_gOffsetCorrectionStart), 0, 0, 1, 1},
    {&__pyx_n_s_gPayloadLengthStatic, __pyx_k_gPayloadLengthStatic, sizeof(__pyx_k_gPayloadLengthStatic), 0, 0, 1, 1},
    {&__pyx_n_s_gSyncNodeMax, __pyx_k_gSyncNodeMax, sizeof(__pyx_k_gSyncNodeMax), 0, 0, 1, 1},
    {&__pyx_n_s_gdActionPointOffset, __pyx_k_gdActionPointOffset, sizeof(__pyx_k_gdActionPointOffset), 0, 0, 1, 1},
    {&__pyx_n_s_gdCASRxLowMax, __pyx_k_gdCASRxLowMax, sizeof(__pyx_k_gdCASRxLowMax), 0, 0, 1, 1},
    {&__pyx_n_s_gdDynamicSlotIdlePhase, __pyx_k_gdDynamicSlotIdlePhase, sizeof(__pyx_k_gdDynamicSlotIdlePhase), 0, 0, 1, 1},
    {&__pyx_n_s_gdMacrotick, __pyx_k_gdMacrotick, sizeof(__pyx_k_gdMacrotick), 0, 0, 1, 1},
    {&__pyx_n_s_gdMiniSlotActionPointOffset, __pyx_k_gdMiniSlotActionPointOffset, sizeof(__pyx_k_gdMiniSlotActionPointOffset), 0, 0, 1, 1},
    {&__pyx_n_s_gdMinislot, __pyx_k_gdMinislot, sizeof(__pyx_k_gdMinislot), 0, 0, 1, 1},
    {&__pyx_n_s_gdNIT, __pyx_k_gdNIT, sizeof(__pyx_k_gdNIT), 0, 0, 1, 1},
    {&__pyx_n_s_gdStaticSlot, __pyx_k_gdStaticSlot, sizeof(__pyx_k_gdStaticSlot), 0, 0, 1, 1},
    {&__pyx_n_s_gdSymbolWindow, __pyx_k_gdSymbolWindow, sizeof(__pyx_k_gdSymbolWindow), 0, 0, 1, 1},
    {&__pyx_n_s_gdTSSTransmitter, __pyx_k_gdTSSTransmitter, sizeof(__pyx_k_gdTSSTransmitter), 0, 0, 1, 1},
    {&__pyx_n_s_gdWakeupSymbolRxIdle, __pyx_k_gdWakeupSymbolRxIdle, sizeof(__pyx_k_gdWakeupSymbolRxIdle), 0, 0, 1, 1},
    {&__pyx_n_s_gdWakeupSymbolRxLow, __pyx_k_gdWakeupSymbolRxLow, sizeof(__pyx_k_gdWakeupSymbolRxLow), 0, 0, 1, 1},
    {&__pyx_n_s_gdWakeupSymbolRxWindow, __pyx_k_gdWakeupSymbolRxWindow, sizeof(__pyx_k_gdWakeupSymbolRxWindow), 0, 0, 1, 1},
    {&__pyx_n_s_gdWakeupSymbolTxIdle, __pyx_k_gdWakeupSymbolTxIdle, sizeof(__pyx_k_gdWakeupSymbolTxIdle), 0, 0, 1, 1},
    {&__pyx_n_s_gdWakeupSymbolTxLow, __pyx_k_gdWakeupSymbolTxLow, sizeof(__pyx_k_gdWakeupSymbolTxLow), 0, 0, 1, 1},
    {&__pyx_n_s_headerCRC, __pyx_k_headerCRC, sizeof(__pyx_k_headerCRC), 0, 0, 1, 1},
    {&__pyx_n_s_headerFlags, __pyx_k_headerFlags, sizeof(__pyx_k_headerFlags), 0, 0, 1, 1},
    {&__pyx_n_s_hwChannel, __pyx_k_hwChannel, sizeof(__pyx_k_hwChannel), 0, 0, 1, 1},
    {&__pyx_n_s_hwIndex, __pyx_k_hwIndex, sizeof(__pyx_k_hwIndex), 0, 0, 1, 1},
    {&__pyx_n_s_hwType, __pyx_k_hwType, sizeof(__pyx_k_hwType), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
    {&__pyx_n_s_idRange, __pyx_k_idRange, sizeof(__pyx_k_idRange), 0, 0, 1, 1},
    {&__pyx_n_s_incrementOffset, __pyx_k_incrementOffset, sizeof(__pyx_k_incrementOffset), 0, 0, 1, 1},
    {&__pyx_n_s_incrementSize, __pyx_k_incrementSize, sizeof(__pyx_k_incrementSize), 0, 0, 1, 1},
    {&__pyx_n_s_inicFwVersion, __pyx_k_inicFwVersion, sizeof(__pyx_k_inicFwVersion), 0, 0, 1, 1},
    {&__pyx_n_s_interfaceVersion, __pyx_k_interfaceVersion, sizeof(__pyx_k_interfaceVersion), 0, 0, 1, 1},
    {&__pyx_n_s_isOnBus, __pyx_k_isOnBus, sizeof(__pyx_k_isOnBus), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
    {&__pyx_n_s_last_id, __pyx_k_last_id, sizeof(__pyx_k_last_id), 0, 0, 1, 1},
    {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
    {&__pyx_n_s_licInfo, __pyx_k_licInfo, sizeof(__pyx_k_licInfo), 0, 0, 1, 1},
    {&__pyx_n_s_licInfoArray, __pyx_k_licInfoArray, sizeof(__pyx_k_licInfoArray), 0, 0, 1, 1},
    {&__pyx_n_s_licInfoArraySize, __pyx_k_licInfoArraySize, sizeof(__pyx_k_licInfoArraySize), 0, 0, 1, 1},
    {&__pyx_n_s_licName, __pyx_k_licName, sizeof(__pyx_k_licName), 0, 0, 1, 1},
    {&__pyx_n_s_lineMode, __pyx_k_lineMode, sizeof(__pyx_k_lineMode), 0, 0, 1, 1},
    {&__pyx_n_s_link, __pyx_k_link, sizeof(__pyx_k_link), 0, 0, 1, 1},
    {&__pyx_n_s_lowLength, __pyx_k_lowLength, sizeof(__pyx_k_lowLength), 0, 0, 1, 1},
    {&__pyx_kp_s_macAddr_6, __pyx_k_macAddr_6, sizeof(__pyx_k_macAddr_6), 0, 0, 1, 0},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_mask, __pyx_k_mask, sizeof(__pyx_k_mask), 0, 0, 1, 1},
    {&__pyx_n_s_maxBitrate, __pyx_k_maxBitrate, sizeof(__pyx_k_maxBitrate), 0, 0, 1, 1},
    {&__pyx_n_s_maximalBaudrate, __pyx_k_maximalBaudrate, sizeof(__pyx_k_maximalBaudrate), 0, 0, 1, 1},
    {&__pyx_n_s_maximalSupplyVoltage, __pyx_k_maximalSupplyVoltage, sizeof(__pyx_k_maximalSupplyVoltage), 0, 0, 1, 1},
    {&__pyx_n_s_messageCount, __pyx_k_messageCount, sizeof(__pyx_k_messageCount), 0, 0, 1, 1},
    {&__pyx_n_s_message_count, __pyx_k_message_count, sizeof(__pyx_k_message_count), 0, 0, 1, 1},
    {&__pyx_n_s_minBitrate, __pyx_k_minBitrate, sizeof(__pyx_k_minBitrate), 0, 0, 1, 1},
    {&__pyx_n_s_minGap, __pyx_k_minGap, sizeof(__pyx_k_minGap), 0, 0, 1, 1},
    {&__pyx_n_s_minimalSupplyVoltage, __pyx_k_minimalSupplyVoltage, sizeof(__pyx_k_minimalSupplyVoltage), 0, 0, 1, 1},
    {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
    {&__pyx_n_s_most, __pyx_k_most, sizeof(__pyx_k_most), 0, 0, 1, 1},
    {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
    {&__pyx_n_s_msgCnt, __pyx_k_msgCnt, sizeof(__pyx_k_msgCnt), 0, 0, 1, 1},
    {&__pyx_n_s_msgCntSent, __pyx_k_msgCntSent, sizeof(__pyx_k_msgCntSent), 0, 0, 1, 1},
    {&__pyx_n_s_msgFlags, __pyx_k_msgFlags, sizeof(__pyx_k_msgFlags), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_n_s_newValue, __pyx_k_newValue, sizeof(__pyx_k_newValue), 0, 0, 1, 1},
    {&__pyx_n_s_nmVector, __pyx_k_nmVector, sizeof(__pyx_k_nmVector), 0, 0, 1, 1},
    {&__pyx_n_s_notifyReason, __pyx_k_notifyReason, sizeof(__pyx_k_notifyReason), 0, 0, 1, 1},
    {&__pyx_n_s_oddSyncFramesA, __pyx_k_oddSyncFramesA, sizeof(__pyx_k_oddSyncFramesA), 0, 0, 1, 1},
    {&__pyx_n_s_oddSyncFramesB, __pyx_k_oddSyncFramesB, sizeof(__pyx_k_oddSyncFramesB), 0, 0, 1, 1},
    {&__pyx_n_s_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 0, 1, 1},
    {&__pyx_n_s_options, __pyx_k_options, sizeof(__pyx_k_options), 0, 0, 1, 1},
    {&__pyx_n_s_outputMode, __pyx_k_outputMode, sizeof(__pyx_k_outputMode), 0, 0, 1, 1},
    {&__pyx_n_s_pAcceptanceFilter, __pyx_k_pAcceptanceFilter, sizeof(__pyx_k_pAcceptanceFilter), 0, 0, 1, 1},
    {&__pyx_n_s_pAllowHaltDueToClock, __pyx_k_pAllowHaltDueToClock, sizeof(__pyx_k_pAllowHaltDueToClock), 0, 0, 1, 1},
    {&__pyx_n_s_pAllowPassiveToActive, __pyx_k_pAllowPassiveToActive, sizeof(__pyx_k_pAllowPassiveToActive), 0, 0, 1, 1},
    {&__pyx_n_s_pBoxCount, __pyx_k_pBoxCount, sizeof(__pyx_k_pBoxCount), 0, 0, 1, 1},
    {&__pyx_n_s_pBoxMask, __pyx_k_pBoxMask, sizeof(__pyx_k_pBoxMask), 0, 0, 1, 1},
    {&__pyx_n_s_pBoxSerial, __pyx_k_pBoxSerial, sizeof(__pyx_k_pBoxSerial), 0, 0, 1, 1},
    {&__pyx_n_s_pCanFdConf, __pyx_k_pCanFdConf, sizeof(__pyx_k_pCanFdConf), 0, 0, 1, 1},
    {&__pyx_n_s_pChannelTime, __pyx_k_pChannelTime, sizeof(__pyx_k_pChannelTime), 0, 0, 1, 1},
    {&__pyx_n_s_pChannels, __pyx_k_pChannels, sizeof(__pyx_k_pChannels), 0, 0, 1, 1},
    {&__pyx_n_s_pChannelsMTS, __pyx_k_pChannelsMTS, sizeof(__pyx_k_pChannelsMTS), 0, 0, 1, 1},
    {&__pyx_n_s_pChipParams, __pyx_k_pChipParams, sizeof(__pyx_k_pChipParams), 0, 0, 1, 1},
    {&__pyx_n_s_pClusterDriftDamping, __pyx_k_pClusterDriftDamping, sizeof(__pyx_k_pClusterDriftDamping), 0, 0, 1, 1},
    {&__pyx_n_s_pDecodingCorrection, __pyx_k_pDecodingCorrection, sizeof(__pyx_k_pDecodingCorrection), 0, 0, 1, 1},
    {&__pyx_n_s_pDelayCompensationA, __pyx_k_pDelayCompensationA, sizeof(__pyx_k_pDelayCompensationA), 0, 0, 1, 1},
    {&__pyx_n_s_pDelayCompensationB, __pyx_k_pDelayCompensationB, sizeof(__pyx_k_pDelayCompensationB), 0, 0, 1, 1},
    {&__pyx_n_s_pDriverConfig, __pyx_k_pDriverConfig, sizeof(__pyx_k_pDriverConfig), 0, 0, 1, 1},
    {&__pyx_n_s_pEventBuffer, __pyx_k_pEventBuffer, sizeof(__pyx_k_pEventBuffer), 0, 0, 1, 1},
    {&__pyx_n_s_pEventCount, __pyx_k_pEventCount, sizeof(__pyx_k_pEventCount), 0, 0, 1, 1},
    {&__pyx_n_s_pEventList, __pyx_k_pEventList, sizeof(__pyx_k_pEventList), 0, 0, 1, 1},
    {&__pyx_n_s_pEventString, __pyx_k_pEventString, sizeof(__pyx_k_pEventString), 0, 0, 1, 1},
    {&__pyx_n_s_pExternOffsetCorrection, __pyx_k_pExternOffsetCorrection, sizeof(__pyx_k_pExternOffsetCorrection), 0, 0, 1, 1},
    {&__pyx_n_s_pExternRateCorrection, __pyx_k_pExternRateCorrection, sizeof(__pyx_k_pExternRateCorrection), 0, 0, 1, 1},
    {&__pyx_n_s_pHwChannel, __pyx_k_pHwChannel, sizeof(__pyx_k_pHwChannel), 0, 0, 1, 1},
    {&__pyx_n_s_pHwIndex, __pyx_k_pHwIndex, sizeof(__pyx_k_pHwIndex), 0, 0, 1, 1},
    {&__pyx_n_s_pHwType, __pyx_k_pHwType, sizeof(__pyx_k_pHwType), 0, 0, 1, 1},
    {&__pyx_n_s_pKeySlotUsedForStartup, __pyx_k_pKeySlotUsedForStartup, sizeof(__pyx_k_pKeySlotUsedForStartup), 0, 0, 1, 1},
    {&__pyx_n_s_pKeySlotUsedForSync, __pyx_k_pKeySlotUsedForSync, sizeof(__pyx_k_pKeySlotUsedForSync), 0, 0, 1, 1},
    {&__pyx_n_s_pLatestTx, __pyx_k_pLatestTx, sizeof(__pyx_k_pLatestTx), 0, 0, 1, 1},
    {&__pyx_n_s_pLicInfo, __pyx_k_pLicInfo, sizeof(__pyx_k_pLicInfo), 0, 0, 1, 1},
    {&__pyx_n_s_pLicInfoArray, __pyx_k_pLicInfoArray, sizeof(__pyx_k_pLicInfoArray), 0, 0, 1, 1},
    {&__pyx_n_s_pMacroInitialOffsetA, __pyx_k_pMacroInitialOffsetA, sizeof(__pyx_k_pMacroInitialOffsetA), 0, 0, 1, 1},
    {&__pyx_n_s_pMacroInitialOffsetB, __pyx_k_pMacroInitialOffsetB, sizeof(__pyx_k_pMacroInitialOffsetB), 0, 0, 1, 1},
    {&__pyx_n_s_pMaxPayloadLengthDynamic, __pyx_k_pMaxPayloadLengthDynamic, sizeof(__pyx_k_pMaxPayloadLengthDynamic), 0, 0, 1, 1},
    {&__pyx_n_s_pMessage, __pyx_k_pMessage, sizeof(__pyx_k_pMessage), 0, 0, 1, 1},
    {&__pyx_n_s_pMicroInitialOffsetA, __pyx_k_pMicroInitialOffsetA, sizeof(__pyx_k_pMicroInitialOffsetA), 0, 0, 1, 1},
    {&__pyx_n_s_pMicroInitialOffsetB, __pyx_k_pMicroInitialOffsetB, sizeof(__pyx_k_pMicroInitialOffsetB), 0, 0, 1, 1},
    {&__pyx_n_s_pMicroPerCycle, __pyx_k_pMicroPerCycle, sizeof(__pyx_k_pMicroPerCycle), 0, 0, 1, 1},
    {&__pyx_n_s_pMicroPerMacroNom, __pyx_k_pMicroPerMacroNom, sizeof(__pyx_k_pMicroPerMacroNom), 0, 0, 1, 1},
    {&__pyx_n_s_pMsgCntSent, __pyx_k_pMsgCntSent, sizeof(__pyx_k_pMsgCntSent), 0, 0, 1, 1},
    {&__pyx_n_s_pOffsetCorrectionOut, __pyx_k_pOffsetCorrectionOut, sizeof(__pyx_k_pOffsetCorrectionOut), 0, 0, 1, 1},
    {&__pyx_n_s_pPreviousValue, __pyx_k_pPreviousValue, sizeof(__pyx_k_pPreviousValue), 0, 0, 1, 1},
    {&__pyx_n_s_pRateCorrectionOut, __pyx_k_pRateCorrectionOut, sizeof(__pyx_k_pRateCorrectionOut), 0, 0, 1, 1},
    {&__pyx_n_s_pSamplesPerMicrotick, __pyx_k_pSamplesPerMicrotick, sizeof(__pyx_k_pSamplesPerMicrotick), 0, 0, 1, 1},
    {&__pyx_n_s_pSingleSlotEnabled, __pyx_k_pSingleSlotEnabled, sizeof(__pyx_k_pSingleSlotEnabled), 0, 0, 1, 1},
    {&__pyx_n_s_pTime, __pyx_k_pTime, sizeof(__pyx_k_pTime), 0, 0, 1, 1},
    {&__pyx_n_s_pWakeupChannel, __pyx_k_pWakeupChannel, sizeof(__pyx_k_pWakeupChannel), 0, 0, 1, 1},
    {&__pyx_n_s_pWakeupPattern, __pyx_k_pWakeupPattern, sizeof(__pyx_k_pWakeupPattern), 0, 0, 1, 1},
    {&__pyx_n_s_pXLcanTxEvents, __pyx_k_pXLcanTxEvents, sizeof(__pyx_k_pXLcanTxEvents), 0, 0, 1, 1},
    {&__pyx_n_s_pXlCanTxEvt, __pyx_k_pXlCanTxEvt, sizeof(__pyx_k_pXlCanTxEvt), 0, 0, 1, 1},
    {&__pyx_n_s_pXlHandle, __pyx_k_pXlHandle, sizeof(__pyx_k_pXlHandle), 0, 0, 1, 1},
    {&__pyx_n_s_parity, __pyx_k_parity, sizeof(__pyx_k_parity), 0, 0, 1, 1},
    {&__pyx_n_s_payloadLength, __pyx_k_payloadLength, sizeof(__pyx_k_payloadLength), 0, 0, 1, 1},
    {&__pyx_n_s_pdAcceptedStartupRange, __pyx_k_pdAcceptedStartupRange, sizeof(__pyx_k_pdAcceptedStartupRange), 0, 0, 1, 1},
    {&__pyx_n_s_pdListenTimeout, __pyx_k_pdListenTimeout, sizeof(__pyx_k_pdListenTimeout), 0, 0, 1, 1},
    {&__pyx_n_s_pdMaxDrift, __pyx_k_pdMaxDrift, sizeof(__pyx_k_pdMaxDrift), 0, 0, 1, 1},
    {&__pyx_n_s_pdMicrotick, __pyx_k_pdMicrotick, sizeof(__pyx_k_pdMicrotick), 0, 0, 1, 1},
    {&__pyx_n_s_permissionMask, __pyx_k_permissionMask, sizeof(__pyx_k_permissionMask), 0, 0, 1, 1},
    {&__pyx_n_s_permission_mask, __pyx_k_permission_mask, sizeof(__pyx_k_permission_mask), 0, 0, 1, 1},
    {&__pyx_n_s_phy, __pyx_k_phy, sizeof(__pyx_k_phy), 0, 0, 1, 1},
    {&__pyx_n_s_plevel, __pyx_k_plevel, sizeof(__pyx_k_plevel), 0, 0, 1, 1},
    {&__pyx_n_s_portHandle, __pyx_k_portHandle, sizeof(__pyx_k_portHandle), 0, 0, 1, 1},
    {&__pyx_n_s_port_handle, __pyx_k_port_handle, sizeof(__pyx_k_port_handle), 0, 0, 1, 1},
    {&__pyx_n_s_previousValue, __pyx_k_previousValue, sizeof(__pyx_k_previousValue), 0, 0, 1, 1},
    {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
    {&__pyx_n_s_ptimerChannelMask, __pyx_k_ptimerChannelMask, sizeof(__pyx_k_ptimerChannelMask), 0, 0, 1, 1},
    {&__pyx_n_s_ptimerRate, __pyx_k_ptimerRate, sizeof(__pyx_k_ptimerRate), 0, 0, 1, 1},
    {&__pyx_n_s_pxlClusterConfig, __pyx_k_pxlClusterConfig, sizeof(__pyx_k_pxlClusterConfig), 0, 0, 1, 1},
    {&__pyx_n_s_pxlEvent, __pyx_k_pxlEvent, sizeof(__pyx_k_pxlEvent), 0, 0, 1, 1},
    {&__pyx_n_s_pxlFrChannelConfig, __pyx_k_pxlFrChannelConfig, sizeof(__pyx_k_pxlFrChannelConfig), 0, 0, 1, 1},
    {&__pyx_n_s_queueLevel, __pyx_k_queueLevel, sizeof(__pyx_k_queueLevel), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_raw, __pyx_k_raw, sizeof(__pyx_k_raw), 0, 0, 1, 1},
    {&__pyx_kp_s_raw_24, __pyx_k_raw_24, sizeof(__pyx_k_raw_24), 0, 0, 1, 0},
    {&__pyx_kp_s_raw_28, __pyx_k_raw_28, sizeof(__pyx_k_raw_28), 0, 0, 1, 0},
    {&__pyx_kp_s_raw_data_10, __pyx_k_raw_data_10, sizeof(__pyx_k_raw_data_10), 0, 0, 1, 0},
    {&__pyx_n_s_recessiveDominantDelay, __pyx_k_recessiveDominantDelay, sizeof(__pyx_k_recessiveDominantDelay), 0, 0, 1, 1},
    {&__pyx_n_s_repetition, __pyx_k_repetition, sizeof(__pyx_k_repetition), 0, 0, 1, 1},
    {&__pyx_n_s_res1, __pyx_k_res1, sizeof(__pyx_k_res1), 0, 0, 1, 1},
    {&__pyx_n_s_resNet, __pyx_k_resNet, sizeof(__pyx_k_resNet), 0, 0, 1, 1},
    {&__pyx_n_s_reserved, __pyx_k_reserved, sizeof(__pyx_k_reserved), 0, 0, 1, 1},
    {&__pyx_n_s_reserved0, __pyx_k_reserved0, sizeof(__pyx_k_reserved0), 0, 0, 1, 1},
    {&__pyx_n_s_reserved1, __pyx_k_reserved1, sizeof(__pyx_k_reserved1), 0, 0, 1, 1},
    {&__pyx_kp_s_reserved1_7, __pyx_k_reserved1_7, sizeof(__pyx_k_reserved1_7), 0, 0, 1, 0},
    {&__pyx_n_s_reserved2, __pyx_k_reserved2, sizeof(__pyx_k_reserved2), 0, 0, 1, 1},
    {&__pyx_kp_s_reserved_10, __pyx_k_reserved_10, sizeof(__pyx_k_reserved_10), 0, 0, 1, 0},
    {&__pyx_kp_s_reserved_3, __pyx_k_reserved_3, sizeof(__pyx_k_reserved_3), 0, 0, 1, 0},
    {&__pyx_n_s_retEvent, __pyx_k_retEvent, sizeof(__pyx_k_retEvent), 0, 0, 1, 1},
    {&__pyx_n_s_rxQueueSize, __pyx_k_rxQueueSize, sizeof(__pyx_k_rxQueueSize), 0, 0, 1, 1},
    {&__pyx_n_s_sam, __pyx_k_sam, sizeof(__pyx_k_sam), 0, 0, 1, 1},
    {&__pyx_n_s_samAbr, __pyx_k_samAbr, sizeof(__pyx_k_samAbr), 0, 0, 1, 1},
    {&__pyx_n_s_serialNumber, __pyx_k_serialNumber, sizeof(__pyx_k_serialNumber), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_n_s_sjw, __pyx_k_sjw, sizeof(__pyx_k_sjw), 0, 0, 1, 1},
    {&__pyx_n_s_sjwAbr, __pyx_k_sjwAbr, sizeof(__pyx_k_sjwAbr), 0, 0, 1, 1},
    {&__pyx_n_s_sjwDbr, __pyx_k_sjwDbr, sizeof(__pyx_k_sjwDbr), 0, 0, 1, 1},
    {&__pyx_n_s_slotID, __pyx_k_slotID, sizeof(__pyx_k_slotID), 0, 0, 1, 1},
    {&__pyx_n_s_specialCabFlags, __pyx_k_specialCabFlags, sizeof(__pyx_k_specialCabFlags), 0, 0, 1, 1},
    {&__pyx_n_s_specialDeviceStatus, __pyx_k_specialDeviceStatus, sizeof(__pyx_k_specialDeviceStatus), 0, 0, 1, 1},
    {&__pyx_n_s_speed, __pyx_k_speed, sizeof(__pyx_k_speed), 0, 0, 1, 1},
    {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
    {&__pyx_n_s_statusType, __pyx_k_statusType, sizeof(__pyx_k_statusType), 0, 0, 1, 1},
    {&__pyx_n_s_symbol, __pyx_k_symbol, sizeof(__pyx_k_symbol), 0, 0, 1, 1},
    {&__pyx_n_s_symbolWindow, __pyx_k_symbolWindow, sizeof(__pyx_k_symbolWindow), 0, 0, 1, 1},
    {&__pyx_n_s_symbolWindowMask, __pyx_k_symbolWindowMask, sizeof(__pyx_k_symbolWindowMask), 0, 0, 1, 1},
    {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
    {&__pyx_n_s_tagData, __pyx_k_tagData, sizeof(__pyx_k_tagData), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
    {&__pyx_n_s_timeStamp, __pyx_k_timeStamp, sizeof(__pyx_k_timeStamp), 0, 0, 1, 1},
    {&__pyx_n_s_timeStampSync, __pyx_k_timeStampSync, sizeof(__pyx_k_timeStampSync), 0, 0, 1, 1},
    {&__pyx_n_s_timerChannelMask, __pyx_k_timerChannelMask, sizeof(__pyx_k_timerChannelMask), 0, 0, 1, 1},
    {&__pyx_n_s_timerRate, __pyx_k_timerRate, sizeof(__pyx_k_timerRate), 0, 0, 1, 1},
    {&__pyx_n_s_transId, __pyx_k_transId, sizeof(__pyx_k_transId), 0, 0, 1, 1},
    {&__pyx_n_s_transceiverName, __pyx_k_transceiverName, sizeof(__pyx_k_transceiverName), 0, 0, 1, 1},
    {&__pyx_n_s_transceiverState, __pyx_k_transceiverState, sizeof(__pyx_k_transceiverState), 0, 0, 1, 1},
    {&__pyx_n_s_transceiverType, __pyx_k_transceiverType, sizeof(__pyx_k_transceiverType), 0, 0, 1, 1},
    {&__pyx_n_s_triggerSource, __pyx_k_triggerSource, sizeof(__pyx_k_triggerSource), 0, 0, 1, 1},
    {&__pyx_n_s_tseg1, __pyx_k_tseg1, sizeof(__pyx_k_tseg1), 0, 0, 1, 1},
    {&__pyx_n_s_tseg1Abr, __pyx_k_tseg1Abr, sizeof(__pyx_k_tseg1Abr), 0, 0, 1, 1},
    {&__pyx_n_s_tseg1Dbr, __pyx_k_tseg1Dbr, sizeof(__pyx_k_tseg1Dbr), 0, 0, 1, 1},
    {&__pyx_n_s_tseg2, __pyx_k_tseg2, sizeof(__pyx_k_tseg2), 0, 0, 1, 1},
    {&__pyx_n_s_tseg2Abr, __pyx_k_tseg2Abr, sizeof(__pyx_k_tseg2Abr), 0, 0, 1, 1},
    {&__pyx_n_s_tseg2Dbr, __pyx_k_tseg2Dbr, sizeof(__pyx_k_tseg2Dbr), 0, 0, 1, 1},
    {&__pyx_n_s_tssLength, __pyx_k_tssLength, sizeof(__pyx_k_tssLength), 0, 0, 1, 1},
    {&__pyx_n_s_tx, __pyx_k_tx, sizeof(__pyx_k_tx), 0, 0, 1, 1},
    {&__pyx_n_s_txMode, __pyx_k_txMode, sizeof(__pyx_k_txMode), 0, 0, 1, 1},
    {&__pyx_n_s_txrq, __pyx_k_txrq, sizeof(__pyx_k_txrq), 0, 0, 1, 1},
    {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
    {&__pyx_n_s_userHandle, __pyx_k_userHandle, sizeof(__pyx_k_userHandle), 0, 0, 1, 1},
    {&__pyx_n_s_vAllowPassivToActive, __pyx_k_vAllowPassivToActive, sizeof(__pyx_k_vAllowPassivToActive), 0, 0, 1, 1},
    {&__pyx_n_s_vClockCorrectionFailed, __pyx_k_vClockCorrectionFailed, sizeof(__pyx_k_vClockCorrectionFailed), 0, 0, 1, 1},
    {&__pyx_n_s_vExternOffsetControl, __pyx_k_vExternOffsetControl, sizeof(__pyx_k_vExternOffsetControl), 0, 0, 1, 1},
    {&__pyx_n_s_vExternRateControl, __pyx_k_vExternRateControl, sizeof(__pyx_k_vExternRateControl), 0, 0, 1, 1},
    {&__pyx_n_s_vOffsetCorrection, __pyx_k_vOffsetCorrection, sizeof(__pyx_k_vOffsetCorrection), 0, 0, 1, 1},
    {&__pyx_n_s_vRateCorrection, __pyx_k_vRateCorrection, sizeof(__pyx_k_vRateCorrection), 0, 0, 1, 1},
    {&__pyx_n_s_vxlapi, __pyx_k_vxlapi, sizeof(__pyx_k_vxlapi), 0, 0, 1, 1},
    {&__pyx_kp_s_vxlapi_pyx, __pyx_k_vxlapi_pyx, sizeof(__pyx_k_vxlapi_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_waitForFinish, __pyx_k_waitForFinish, sizeof(__pyx_k_waitForFinish), 0, 0, 1, 1},
    {&__pyx_n_s_wakeupStatus, __pyx_k_wakeupStatus, sizeof(__pyx_k_wakeupStatus), 0, 0, 1, 1},
    {&__pyx_n_s_xlEvent, __pyx_k_xlEvent, sizeof(__pyx_k_xlEvent), 0, 0, 1, 1},
    {&__pyx_n_s_xlFrClusterConfig, __pyx_k_xlFrClusterConfig, sizeof(__pyx_k_xlFrClusterConfig), 0, 0, 1, 1},
    {&__pyx_n_s_xlHandle, __pyx_k_xlHandle, sizeof(__pyx_k_xlHandle), 0, 0, 1, 1},
    {&__pyx_n_s_xlInterfaceVersion, __pyx_k_xlInterfaceVersion, sizeof(__pyx_k_xlInterfaceVersion), 0, 0, 1, 1},
    {&__pyx_n_s_xlstring, __pyx_k_xlstring, sizeof(__pyx_k_xlstring), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 546, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 589, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 1237, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(1, 19, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 20, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "FromPyStructUtility":20
 *         value = obj['bitRate']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'bitRate'")             # <<<<<<<<<<<<<<
 *     result.bitRate = value
 *     try:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "FromPyStructUtility":25
 *         value = obj['sjw']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'sjw'")             # <<<<<<<<<<<<<<
 *     result.sjw = value
 *     try:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_2); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "FromPyStructUtility":30
 *         value = obj['tseg1']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'tseg1'")             # <<<<<<<<<<<<<<
 *     result.tseg1 = value
 *     try:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_3); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "FromPyStructUtility":35
 *         value = obj['tseg2']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'tseg2'")             # <<<<<<<<<<<<<<
 *     result.tseg2 = value
 *     try:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_4); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "FromPyStructUtility":40
 *         value = obj['sam']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'sam'")             # <<<<<<<<<<<<<<
 *     result.sam = value
 *     return result
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_5); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "vxlapi.pyx":477
 *     XL_RECEIVE_DAIO_PIGGY       = 34
 * 
 * def OpenDriver():             # <<<<<<<<<<<<<<
 *     return xlOpenDriver()
 * 
 */
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_OpenDriver, 477, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 477, __pyx_L1_error)

  /* "vxlapi.pyx":480
 *     return xlOpenDriver()
 * 
 * def CloseDriver():             # <<<<<<<<<<<<<<
 *     return xlCloseDriver()
 * 
 */
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CloseDriver, 480, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 480, __pyx_L1_error)

  /* "vxlapi.pyx":483
 *     return xlCloseDriver()
 * 
 * def GetChannelMask(int hwType, int hwIndex, int hwChannel):             # <<<<<<<<<<<<<<
 *     return xlGetChannelMask(hwType, hwIndex, hwChannel)
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(3, __pyx_n_s_hwType, __pyx_n_s_hwIndex, __pyx_n_s_hwChannel); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetChannelMask, 483, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 483, __pyx_L1_error)

  /* "vxlapi.pyx":486
 *     return xlGetChannelMask(hwType, hwIndex, hwChannel)
 * 
 * def GetChannelIndex(int hwType, int hwIndex, int hwChannel):             # <<<<<<<<<<<<<<
 *     return xlGetChannelIndex(hwType, hwIndex, hwChannel)
 * 
 */
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetChannelIndex, 486, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 486, __pyx_L1_error)

  /* "vxlapi.pyx":489
 *     return xlGetChannelIndex(hwType, hwIndex, hwChannel)
 * 
 * def OpenPort(list portHandle, char* appName, XLaccess accessMask, list permissionMask, unsigned int rxQueueSize, unsigned int xlInterfaceVersion, unsigned int busType):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLportHandle port_handle = XL_INVALID_PORTHANDLE
 */
  __pyx_tuple__11 = PyTuple_Pack(10, __pyx_n_s_portHandle, __pyx_n_s_appName, __pyx_n_s_accessMask, __pyx_n_s_permissionMask, __pyx_n_s_rxQueueSize, __pyx_n_s_xlInterfaceVersion, __pyx_n_s_busType, __pyx_n_s_status, __pyx_n_s_port_handle, __pyx_n_s_permission_mask); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_OpenPort, 489, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 489, __pyx_L1_error)

  /* "vxlapi.pyx":500
 *     return status
 * 
 * def ClosePort(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlClosePort(portHandle)
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_portHandle); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_ClosePort, 500, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 500, __pyx_L1_error)

  /* "vxlapi.pyx":503
 *     return xlClosePort(portHandle)
 * 
 * def SetTimerRate(XLportHandle portHandle, unsigned long timerRate):             # <<<<<<<<<<<<<<
 *     return xlSetTimerRate(portHandle, timerRate)
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_n_s_portHandle, __pyx_n_s_timerRate); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_SetTimerRate, 503, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 503, __pyx_L1_error)

  /* "vxlapi.pyx":506
 *     return xlSetTimerRate(portHandle, timerRate)
 * 
 * def SetTimerRateAndChannel(XLportHandle portHandle, list ptimerChannelMask, list ptimerRate):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLaccess timerChannelMask = ptimerChannelMask[0]
 */
  __pyx_tuple__17 = PyTuple_Pack(6, __pyx_n_s_portHandle, __pyx_n_s_ptimerChannelMask, __pyx_n_s_ptimerRate, __pyx_n_s_status, __pyx_n_s_timerChannelMask, __pyx_n_s_timerRate); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_SetTimerRateAndChannel, 506, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 506, __pyx_L1_error)

  /* "vxlapi.pyx":515
 *     return status
 * 
 * def CanSetChannelBitrate(XLportHandle portHandle, XLaccess accessMask, unsigned long bitrate):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelBitrate(portHandle, accessMask, bitrate)
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(3, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_bitrate); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanSetChannelBitrate, 515, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 515, __pyx_L1_error)

  /* "vxlapi.pyx":518
 *     return xlCanSetChannelBitrate(portHandle, accessMask, bitrate)
 * 
 * def CanSetChannelParams(XLportHandle portHandle, XLaccess accessMask, dict pChipParams):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLchipParams chipParams = {0}
 */
  __pyx_tuple__21 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_pChipParams, __pyx_n_s_status, __pyx_n_s_chipParams); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanSetChannelParams, 518, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 518, __pyx_L1_error)

  /* "vxlapi.pyx":531
 *     return status
 * 
 * def ActivateChannel(XLportHandle portHandle, XLaccess accessMask, unsigned int busType, unsigned int flags):             # <<<<<<<<<<<<<<
 *     return xlActivateChannel(portHandle, accessMask, busType, flags)
 * 
 */
  __pyx_tuple__23 = PyTuple_Pack(4, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_busType, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_ActivateChannel, 531, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 531, __pyx_L1_error)

  /* "vxlapi.pyx":534
 *     return xlActivateChannel(portHandle, accessMask, busType, flags)
 * 
 * def DeactivateChannel(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlDeactivateChannel(portHandle, accessMask)
 * 
 */
  __pyx_tuple__25 = PyTuple_Pack(2, __pyx_n_s_portHandle, __pyx_n_s_accessMask); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_DeactivateChannel, 534, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 534, __pyx_L1_error)

  /* "vxlapi.pyx":537
 *     return xlDeactivateChannel(portHandle, accessMask)
 * 
 * def CanTransmit(XLportHandle portHandle, XLaccess accessMask, list messageCount, list pMessage):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0
 */
  __pyx_tuple__27 = PyTuple_Pack(11, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_messageCount, __pyx_n_s_pMessage, __pyx_n_s_status, __pyx_n_s_message_count, __pyx_n_s_pxlEvent, __pyx_n_s_i, __pyx_n_s_msg, __pyx_n_s_j, __pyx_n_s_b); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanTransmit, 537, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 537, __pyx_L1_error)

  /* "vxlapi.pyx":558
 *     return status
 * 
 * def CanFlushTransmitQueue(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlCanFlushTransmitQueue(portHandle, accessMask)
 * 
 */
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanFlushTransmitQueue, 558, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 558, __pyx_L1_error)

  /* "vxlapi.pyx":561
 *     return xlCanFlushTransmitQueue(portHandle, accessMask)
 * 
 * def CanRequestChipState(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlCanRequestChipState(portHandle,accessMask)
 * 
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanRequestChipState, 561, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 561, __pyx_L1_error)

  /* "vxlapi.pyx":564
 *     return xlCanRequestChipState(portHandle,accessMask)
 * 
 * def Receive(XLportHandle portHandle, list pEventCount, list pEventList, list pEventString):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int eventCount = 1
 */
  __pyx_tuple__31 = PyTuple_Pack(12, __pyx_n_s_portHandle, __pyx_n_s_pEventCount, __pyx_n_s_pEventList, __pyx_n_s_pEventString, __pyx_n_s_status, __pyx_n_s_eventCount, __pyx_n_s_xlEvent, __pyx_n_s_xlstring, __pyx_n_s_retEvent, __pyx_n_s_tagData, __pyx_n_s_msg, __pyx_n_s_i); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_Receive, 564, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 564, __pyx_L1_error)

  /* "vxlapi.pyx":602
 *     return status
 * 
 * def FlushReceiveQueue(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlFlushReceiveQueue(portHandle)
 * 
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FlushReceiveQueue, 602, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 602, __pyx_L1_error)

  /* "vxlapi.pyx":605
 *     return xlFlushReceiveQueue(portHandle)
 * 
 * def GetReceiveQueueLevel(XLportHandle portHandle, list plevel):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef int level = plevel[0]
 */
  __pyx_tuple__34 = PyTuple_Pack(4, __pyx_n_s_portHandle, __pyx_n_s_plevel, __pyx_n_s_status, __pyx_n_s_level); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetReceiveQueueLevel, 605, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 605, __pyx_L1_error)

  /* "vxlapi.pyx":612
 *     return status
 * 
 * def SetNotification(XLportHandle portHandle, list pXlHandle, int queueLevel):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLhandle xlHandle = NULL
 */
  __pyx_tuple__36 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_pXlHandle, __pyx_n_s_queueLevel, __pyx_n_s_status, __pyx_n_s_xlHandle); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_SetNotification, 612, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 612, __pyx_L1_error)

  /* "vxlapi.pyx":619
 *     return status
 * 
 * def ResetClock(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlResetClock(portHandle)
 * 
 */
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_ResetClock, 619, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 619, __pyx_L1_error)

  /* "vxlapi.pyx":622
 *     return xlResetClock(portHandle)
 * 
 * def CanSetChannelMode(XLportHandle portHandle, XLaccess accessMask, int tx, int txrq):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelMode(portHandle, accessMask, tx, txrq)
 * 
 */
  __pyx_tuple__39 = PyTuple_Pack(4, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_tx, __pyx_n_s_txrq); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanSetChannelMode, 622, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 622, __pyx_L1_error)

  /* "vxlapi.pyx":625
 *     return xlCanSetChannelMode(portHandle, accessMask, tx, txrq)
 * 
 * def CanSetChannelOutput(XLportHandle portHandle, XLaccess accessMask, unsigned char mode):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelOutput(portHandle, accessMask, mode)
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(3, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_mode); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanSetChannelOutput, 625, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 625, __pyx_L1_error)

  /* "vxlapi.pyx":628
 *     return xlCanSetChannelOutput(portHandle, accessMask, mode)
 * 
 * def CanSetReceiveMode(XLportHandle portHandle, unsigned char ErrorFrame, unsigned char ChipState):             # <<<<<<<<<<<<<<
 *     return xlCanSetReceiveMode(portHandle, ErrorFrame, ChipState)
 * 
 */
  __pyx_tuple__43 = PyTuple_Pack(3, __pyx_n_s_portHandle, __pyx_n_s_ErrorFrame, __pyx_n_s_ChipState); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanSetReceiveMode, 628, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 628, __pyx_L1_error)

  /* "vxlapi.pyx":631
 *     return xlCanSetReceiveMode(portHandle, ErrorFrame, ChipState)
 * 
 * def CanSetChannelParamsC200(XLportHandle portHandle, XLaccess accessMask, unsigned char btr0, unsigned char btr1):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelParamsC200(portHandle, accessMask, btr0, btr1)
 * 
 */
  __pyx_tuple__45 = PyTuple_Pack(4, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_btr0, __pyx_n_s_btr1); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanSetChannelParamsC200, 631, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 631, __pyx_L1_error)

  /* "vxlapi.pyx":634
 *     return xlCanSetChannelParamsC200(portHandle, accessMask, btr0, btr1)
 * 
 * def CanSetChannelTransceiver(XLportHandle portHandle, XLaccess accessMask, int type, int lineMode, int resNet):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelTransceiver(portHandle, accessMask, type, lineMode, resNet)
 * 
 */
  __pyx_tuple__47 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_type, __pyx_n_s_lineMode, __pyx_n_s_resNet); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanSetChannelTransceiver, 634, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 634, __pyx_L1_error)

  /* "vxlapi.pyx":637
 *     return xlCanSetChannelTransceiver(portHandle, accessMask, type, lineMode, resNet)
 * 
 * def CanSetChannelAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned long code, unsigned long mask, unsigned int idRange):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelAcceptance(portHandle, accessMask, code, mask, idRange)
 * 
 */
  __pyx_tuple__49 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_code, __pyx_n_s_mask, __pyx_n_s_idRange); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanSetChannelAcceptance, 637, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 637, __pyx_L1_error)

  /* "vxlapi.pyx":640
 *     return xlCanSetChannelAcceptance(portHandle, accessMask, code, mask, idRange)
 * 
 * def CanAddAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):             # <<<<<<<<<<<<<<
 *     return xlCanAddAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(4, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_first_id, __pyx_n_s_last_id); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanAddAcceptanceRange, 640, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 640, __pyx_L1_error)

  /* "vxlapi.pyx":643
 *     return xlCanAddAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 * def CanRemoveAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):             # <<<<<<<<<<<<<<
 *     return xlCanRemoveAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 */
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanRemoveAcceptanceRange, 643, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 643, __pyx_L1_error)

  /* "vxlapi.pyx":646
 *     return xlCanRemoveAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 * def CanResetAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned int idRange):             # <<<<<<<<<<<<<<
 *     return xlCanResetAcceptance(portHandle, accessMask, idRange)
 * 
 */
  __pyx_tuple__54 = PyTuple_Pack(3, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_idRange); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanResetAcceptance, 646, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 646, __pyx_L1_error)

  /* "vxlapi.pyx":649
 *     return xlCanResetAcceptance(portHandle, accessMask, idRange)
 * 
 * def SetGlobalTimeSync(unsigned long newValue, list pPreviousValue):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned long previousValue = XL_SET_TIMESYNC_NO_CHANGE
 */
  __pyx_tuple__56 = PyTuple_Pack(4, __pyx_n_s_newValue, __pyx_n_s_pPreviousValue, __pyx_n_s_status, __pyx_n_s_previousValue); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_SetGlobalTimeSync, 649, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 649, __pyx_L1_error)

  /* "vxlapi.pyx":656
 *     return status
 * 
 * def GetSyncTime(XLportHandle portHandle, list pTime):             # <<<<<<<<<<<<<<
 *     cdef XLstatus = XL_ERROR
 *     cdef XLuint64 time = 0
 */
  __pyx_tuple__58 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_pTime, __pyx_n_s_XLstatus, __pyx_n_s_time, __pyx_n_s_status); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetSyncTime, 656, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 656, __pyx_L1_error)

  /* "vxlapi.pyx":663
 *     return status
 * 
 * def GetChannelTime(XLportHandle portHandle, XLaccess accessMask, list pChannelTime):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLuint64 channelTime
 */
  __pyx_tuple__60 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_pChannelTime, __pyx_n_s_status, __pyx_n_s_channelTime); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetChannelTime, 663, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 663, __pyx_L1_error)

  /* "vxlapi.pyx":670
 *     return status
 * 
 * def GenerateSyncPulse(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlGenerateSyncPulse(portHandle, accessMask)
 * 
 */
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GenerateSyncPulse, 670, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 670, __pyx_L1_error)

  /* "vxlapi.pyx":690
 *     #return xlGetEventString(&xlEvent)
 * 
 * def GetErrorString(XLstatus err):             # <<<<<<<<<<<<<<
 *     return xlGetErrorString(err)
 * 
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_n_s_err); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetErrorString, 690, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 690, __pyx_L1_error)

  /* "vxlapi.pyx":693
 *     return xlGetErrorString(err)
 * 
 * def GetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int hwType    = pHwType[0]
 */
  __pyx_tuple__65 = PyTuple_Pack(10, __pyx_n_s_appName, __pyx_n_s_appChannel, __pyx_n_s_pHwType, __pyx_n_s_pHwIndex, __pyx_n_s_pHwChannel, __pyx_n_s_busType, __pyx_n_s_status, __pyx_n_s_hwType, __pyx_n_s_hwIndex, __pyx_n_s_hwChannel); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetApplConfig, 693, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 693, __pyx_L1_error)

  /* "vxlapi.pyx":706
 *     return status
 * 
 * def SetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):             # <<<<<<<<<<<<<<
 *     return xlSetApplConfig(appName, appChannel, pHwType[0], pHwIndex[0], pHwChannel[0], busType)
 * 
 */
  __pyx_tuple__67 = PyTuple_Pack(6, __pyx_n_s_appName, __pyx_n_s_appChannel, __pyx_n_s_pHwType, __pyx_n_s_pHwIndex, __pyx_n_s_pHwChannel, __pyx_n_s_busType); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_SetApplConfig, 706, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 706, __pyx_L1_error)

  /* "vxlapi.pyx":709
 *     return xlSetApplConfig(appName, appChannel, pHwType[0], pHwIndex[0], pHwChannel[0], busType)
 * 
 * def GetDriverConfig(dict pDriverConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef XLdriverConfig driverConfig
 */
  __pyx_tuple__69 = PyTuple_Pack(23, __pyx_n_s_pDriverConfig, __pyx_n_s_status, __pyx_n_s_driverConfig, __pyx_n_s_channel, __pyx_n_s_channelCount, __pyx_n_s_i, __pyx_n_s_ch, __pyx_n_s_busParams, __pyx_n_s_data, __pyx_n_s_canFD, __pyx_n_s_can, __pyx_n_s_flexray, __pyx_n_s_most, __pyx_n_s_ethernet, __pyx_n_s_a429, __pyx_n_s_dir, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_j, __pyx_n_s_j, __pyx_n_s_j, __pyx_n_s_j, __pyx_n_s_j); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 23, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetDriverConfig, 709, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 709, __pyx_L1_error)

  /* "vxlapi.pyx":861
 * 
 * 
 * def GetRemoteDriverConfig(dict pDriverConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef XLdriverConfig driverConfig
 */
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 23, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetRemoteDriverConfig, 861, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 861, __pyx_L1_error)

  /* "vxlapi.pyx":1012
 *     return status
 * 
 * def PopupHwConfig(char* callSign=NULL, unsigned int waitForFinish=0):             # <<<<<<<<<<<<<<
 *     return xlPopupHwConfig(callSign, waitForFinish)
 * 
 */
  __pyx_tuple__72 = PyTuple_Pack(2, __pyx_n_s_callSign, __pyx_n_s_waitForFinish); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_PopupHwConfig, 1012, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 1012, __pyx_L1_error)

  /* "vxlapi.pyx":1015
 *     return xlPopupHwConfig(callSign, waitForFinish)
 * 
 * def GetLicenseInfo(XLaccess channelMask, list pLicInfoArray):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLlicenseInfo licInfoArray[1024]
 */
  __pyx_tuple__74 = PyTuple_Pack(8, __pyx_n_s_channelMask, __pyx_n_s_pLicInfoArray, __pyx_n_s_status, __pyx_n_s_licInfoArray, __pyx_n_s_licInfoArraySize, __pyx_n_s_i, __pyx_n_s_licInfo, __pyx_n_s_j); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetLicenseInfo, 1015, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 1015, __pyx_L1_error)

  /* "vxlapi.pyx":1032
 *     return status
 * 
 * def GetKeymanBoxes(list pBoxCount):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int boxCount = 0
 */
  __pyx_tuple__76 = PyTuple_Pack(3, __pyx_n_s_pBoxCount, __pyx_n_s_status, __pyx_n_s_boxCount); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetKeymanBoxes, 1032, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 1032, __pyx_L1_error)

  /* "vxlapi.pyx":1039
 *     return status
 * 
 * def GetKeymanInfo(unsigned int boxIndex, list pBoxMask, list pBoxSerial, list pLicInfo):             # <<<<<<<<<<<<<<
 *         cdef XLstatus status = XL_ERROR
 *         cdef unsigned int boxMask = 0
 */
  __pyx_tuple__78 = PyTuple_Pack(9, __pyx_n_s_boxIndex, __pyx_n_s_pBoxMask, __pyx_n_s_pBoxSerial, __pyx_n_s_pLicInfo, __pyx_n_s_status, __pyx_n_s_boxMask, __pyx_n_s_boxSerial, __pyx_n_s_licInfo, __pyx_n_s_i); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_GetKeymanInfo, 1039, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 1039, __pyx_L1_error)

  /* "vxlapi.pyx":1055
 *         return status
 * 
 * def CanFdSetConfiguration(XLportHandle portHandle, XLaccess accessMask, list pCanFdConf):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLcanFdConf canFdConf
 */
  __pyx_tuple__80 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_pCanFdConf, __pyx_n_s_status, __pyx_n_s_canFdConf); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanFdSetConfiguration, 1055, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 1055, __pyx_L1_error)

  /* "vxlapi.pyx":1066
 *     return status
 * 
 * def CanTransmitEx(XLportHandle portHandle, XLaccess accessMask, unsigned char channelIndex, unsigned int msgCnt, list pMsgCntSent, list pXlCanTxEvt):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0
 */
  __pyx_tuple__82 = PyTuple_Pack(14, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_channelIndex, __pyx_n_s_msgCnt, __pyx_n_s_pMsgCntSent, __pyx_n_s_pXlCanTxEvt, __pyx_n_s_status, __pyx_n_s_message_count, __pyx_n_s_msgCntSent, __pyx_n_s_pXLcanTxEvents, __pyx_n_s_i, __pyx_n_s_msg, __pyx_n_s_j, __pyx_n_s_b); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_CanTransmitEx, 1066, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 1066, __pyx_L1_error)

  /* "vxlapi.pyx":1096
 *     return status
 * 
 * def FrSetConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlClusterConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrClusterConfig clusterConfig
 */
  __pyx_tuple__84 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_pxlClusterConfig, __pyx_n_s_status, __pyx_n_s_clusterConfig); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FrSetConfiguration, 1096, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 1096, __pyx_L1_error)

  /* "vxlapi.pyx":1167
 *     return status
 * 
 * def FrGetChannelConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlFrChannelConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrChannelConfig channelConfig
 */
  __pyx_tuple__86 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_pxlFrChannelConfig, __pyx_n_s_status, __pyx_n_s_channelConfig); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FrGetChannelConfiguration, 1167, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 1167, __pyx_L1_error)

  /* "vxlapi.pyx":1174
 *     return status
 * 
 * def FrSetMode(XLportHandle portHandle, XLaccess accessMask, dict frMode):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrMode mode
 */
  __pyx_tuple__88 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_frMode, __pyx_n_s_status, __pyx_n_s_mode); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FrSetMode, 1174, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 1174, __pyx_L1_error)

  /* "vxlapi.pyx":1201
 * 
 * 
 * def FrInitStartupAndSync(XLportHandle portHandle, XLaccess accessMask, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */
  __pyx_tuple__90 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_pEventBuffer, __pyx_n_s_status, __pyx_n_s_eventBuffer); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FrInitStartupAndSync, 1201, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 1201, __pyx_L1_error)

  /* "vxlapi.pyx":1210
 *     return status
 * 
 * def FrSetupSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int symbolWindowMask):             # <<<<<<<<<<<<<<
 *     return xlFrSetupSymbolWindow(portHandle, accessMask, frChannel, symbolWindowMask)
 * 
 */
  __pyx_tuple__92 = PyTuple_Pack(4, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_frChannel, __pyx_n_s_symbolWindowMask); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FrSetupSymbolWindow, 1210, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 1210, __pyx_L1_error)

  /* "vxlapi.pyx":1213
 *     return xlFrSetupSymbolWindow(portHandle, accessMask, frChannel, symbolWindowMask)
 * 
 * def FrActivateSpy(XLportHandle portHandle, XLaccess accessMask, unsigned int mode):             # <<<<<<<<<<<<<<
 *     return xlFrActivateSpy(portHandle, accessMask, mode)
 * 
 */
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FrActivateSpy, 1213, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 1213, __pyx_L1_error)

  /* "vxlapi.pyx":1224
 * #    return status
 * 
 * def FrReceive(XLportHandle portHandle, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */
  __pyx_tuple__95 = PyTuple_Pack(4, __pyx_n_s_portHandle, __pyx_n_s_pEventBuffer, __pyx_n_s_status, __pyx_n_s_eventBuffer); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FrReceive, 1224, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 1224, __pyx_L1_error)

  /* "vxlapi.pyx":1232
 *     return status
 * 
 * def FrTransmit(XLportHandle portHandle, XLaccess accessMask, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FrTransmit, 1232, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 1232, __pyx_L1_error)

  /* "vxlapi.pyx":1242
 *     return status
 * 
 * def FrSetTransceiverMode(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int mode):             # <<<<<<<<<<<<<<
 *     return xlFrSetTransceiverMode(portHandle, accessMask, frChannel, mode)
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(4, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_frChannel, __pyx_n_s_mode); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FrSetTransceiverMode, 1242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 1242, __pyx_L1_error)

  /* "vxlapi.pyx":1245
 *     return xlFrSetTransceiverMode(portHandle, accessMask, frChannel, mode)
 * 
 * def FrSendSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int symbolWindow):             # <<<<<<<<<<<<<<
 *     return xlFrSendSymbolWindow(portHandle, accessMask, symbolWindow)
 * 
 */
  __pyx_tuple__100 = PyTuple_Pack(3, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_symbolWindow); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FrSendSymbolWindow, 1245, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 1245, __pyx_L1_error)

  /* "vxlapi.pyx":1248
 *     return xlFrSendSymbolWindow(portHandle, accessMask, symbolWindow)
 * 
 * def FrSetAcceptanceFilter(XLportHandle portHandle, XLaccess accessMask, dict pAcceptanceFilter):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrAcceptanceFilter acceptanceFilter
 */
  __pyx_tuple__102 = PyTuple_Pack(5, __pyx_n_s_portHandle, __pyx_n_s_accessMask, __pyx_n_s_pAcceptanceFilter, __pyx_n_s_status, __pyx_n_s_acceptanceFilter); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_vxlapi_pyx, __pyx_n_s_FrSetAcceptanceFilter, 1248, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_vxlapi(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_vxlapi},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "vxlapi",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initvxlapi(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initvxlapi(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_vxlapi(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_vxlapi(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_vxlapi(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'vxlapi' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("vxlapi", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to vxlapi pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_vxlapi(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_vxlapi) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "vxlapi")) {
      if (unlikely((PyDict_SetItemString(modules, "vxlapi", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "vxlapi.pyx":477
 *     XL_RECEIVE_DAIO_PIGGY       = 34
 * 
 * def OpenDriver():             # <<<<<<<<<<<<<<
 *     return xlOpenDriver()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_1OpenDriver, 0, __pyx_n_s_OpenDriver, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OpenDriver, __pyx_t_2) < 0) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":480
 *     return xlOpenDriver()
 * 
 * def CloseDriver():             # <<<<<<<<<<<<<<
 *     return xlCloseDriver()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_3CloseDriver, 0, __pyx_n_s_CloseDriver, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CloseDriver, __pyx_t_2) < 0) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":483
 *     return xlCloseDriver()
 * 
 * def GetChannelMask(int hwType, int hwIndex, int hwChannel):             # <<<<<<<<<<<<<<
 *     return xlGetChannelMask(hwType, hwIndex, hwChannel)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_5GetChannelMask, 0, __pyx_n_s_GetChannelMask, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetChannelMask, __pyx_t_2) < 0) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":486
 *     return xlGetChannelMask(hwType, hwIndex, hwChannel)
 * 
 * def GetChannelIndex(int hwType, int hwIndex, int hwChannel):             # <<<<<<<<<<<<<<
 *     return xlGetChannelIndex(hwType, hwIndex, hwChannel)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_7GetChannelIndex, 0, __pyx_n_s_GetChannelIndex, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetChannelIndex, __pyx_t_2) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":489
 *     return xlGetChannelIndex(hwType, hwIndex, hwChannel)
 * 
 * def OpenPort(list portHandle, char* appName, XLaccess accessMask, list permissionMask, unsigned int rxQueueSize, unsigned int xlInterfaceVersion, unsigned int busType):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLportHandle port_handle = XL_INVALID_PORTHANDLE
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_9OpenPort, 0, __pyx_n_s_OpenPort, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OpenPort, __pyx_t_2) < 0) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":500
 *     return status
 * 
 * def ClosePort(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlClosePort(portHandle)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_11ClosePort, 0, __pyx_n_s_ClosePort, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ClosePort, __pyx_t_2) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":503
 *     return xlClosePort(portHandle)
 * 
 * def SetTimerRate(XLportHandle portHandle, unsigned long timerRate):             # <<<<<<<<<<<<<<
 *     return xlSetTimerRate(portHandle, timerRate)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_13SetTimerRate, 0, __pyx_n_s_SetTimerRate, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetTimerRate, __pyx_t_2) < 0) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":506
 *     return xlSetTimerRate(portHandle, timerRate)
 * 
 * def SetTimerRateAndChannel(XLportHandle portHandle, list ptimerChannelMask, list ptimerRate):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLaccess timerChannelMask = ptimerChannelMask[0]
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_15SetTimerRateAndChannel, 0, __pyx_n_s_SetTimerRateAndChannel, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetTimerRateAndChannel, __pyx_t_2) < 0) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":515
 *     return status
 * 
 * def CanSetChannelBitrate(XLportHandle portHandle, XLaccess accessMask, unsigned long bitrate):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelBitrate(portHandle, accessMask, bitrate)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_17CanSetChannelBitrate, 0, __pyx_n_s_CanSetChannelBitrate, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanSetChannelBitrate, __pyx_t_2) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":518
 *     return xlCanSetChannelBitrate(portHandle, accessMask, bitrate)
 * 
 * def CanSetChannelParams(XLportHandle portHandle, XLaccess accessMask, dict pChipParams):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLchipParams chipParams = {0}
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_19CanSetChannelParams, 0, __pyx_n_s_CanSetChannelParams, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanSetChannelParams, __pyx_t_2) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":531
 *     return status
 * 
 * def ActivateChannel(XLportHandle portHandle, XLaccess accessMask, unsigned int busType, unsigned int flags):             # <<<<<<<<<<<<<<
 *     return xlActivateChannel(portHandle, accessMask, busType, flags)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_21ActivateChannel, 0, __pyx_n_s_ActivateChannel, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ActivateChannel, __pyx_t_2) < 0) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":534
 *     return xlActivateChannel(portHandle, accessMask, busType, flags)
 * 
 * def DeactivateChannel(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlDeactivateChannel(portHandle, accessMask)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_23DeactivateChannel, 0, __pyx_n_s_DeactivateChannel, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DeactivateChannel, __pyx_t_2) < 0) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":537
 *     return xlDeactivateChannel(portHandle, accessMask)
 * 
 * def CanTransmit(XLportHandle portHandle, XLaccess accessMask, list messageCount, list pMessage):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_25CanTransmit, 0, __pyx_n_s_CanTransmit, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanTransmit, __pyx_t_2) < 0) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":558
 *     return status
 * 
 * def CanFlushTransmitQueue(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlCanFlushTransmitQueue(portHandle, accessMask)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_27CanFlushTransmitQueue, 0, __pyx_n_s_CanFlushTransmitQueue, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanFlushTransmitQueue, __pyx_t_2) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":561
 *     return xlCanFlushTransmitQueue(portHandle, accessMask)
 * 
 * def CanRequestChipState(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlCanRequestChipState(portHandle,accessMask)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_29CanRequestChipState, 0, __pyx_n_s_CanRequestChipState, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanRequestChipState, __pyx_t_2) < 0) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":564
 *     return xlCanRequestChipState(portHandle,accessMask)
 * 
 * def Receive(XLportHandle portHandle, list pEventCount, list pEventList, list pEventString):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int eventCount = 1
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_31Receive, 0, __pyx_n_s_Receive, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Receive, __pyx_t_2) < 0) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":602
 *     return status
 * 
 * def FlushReceiveQueue(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlFlushReceiveQueue(portHandle)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_33FlushReceiveQueue, 0, __pyx_n_s_FlushReceiveQueue, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FlushReceiveQueue, __pyx_t_2) < 0) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":605
 *     return xlFlushReceiveQueue(portHandle)
 * 
 * def GetReceiveQueueLevel(XLportHandle portHandle, list plevel):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef int level = plevel[0]
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_35GetReceiveQueueLevel, 0, __pyx_n_s_GetReceiveQueueLevel, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetReceiveQueueLevel, __pyx_t_2) < 0) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":612
 *     return status
 * 
 * def SetNotification(XLportHandle portHandle, list pXlHandle, int queueLevel):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLhandle xlHandle = NULL
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_37SetNotification, 0, __pyx_n_s_SetNotification, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetNotification, __pyx_t_2) < 0) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":619
 *     return status
 * 
 * def ResetClock(XLportHandle portHandle):             # <<<<<<<<<<<<<<
 *     return xlResetClock(portHandle)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_39ResetClock, 0, __pyx_n_s_ResetClock, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ResetClock, __pyx_t_2) < 0) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":622
 *     return xlResetClock(portHandle)
 * 
 * def CanSetChannelMode(XLportHandle portHandle, XLaccess accessMask, int tx, int txrq):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelMode(portHandle, accessMask, tx, txrq)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_41CanSetChannelMode, 0, __pyx_n_s_CanSetChannelMode, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanSetChannelMode, __pyx_t_2) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":625
 *     return xlCanSetChannelMode(portHandle, accessMask, tx, txrq)
 * 
 * def CanSetChannelOutput(XLportHandle portHandle, XLaccess accessMask, unsigned char mode):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelOutput(portHandle, accessMask, mode)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_43CanSetChannelOutput, 0, __pyx_n_s_CanSetChannelOutput, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanSetChannelOutput, __pyx_t_2) < 0) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":628
 *     return xlCanSetChannelOutput(portHandle, accessMask, mode)
 * 
 * def CanSetReceiveMode(XLportHandle portHandle, unsigned char ErrorFrame, unsigned char ChipState):             # <<<<<<<<<<<<<<
 *     return xlCanSetReceiveMode(portHandle, ErrorFrame, ChipState)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_45CanSetReceiveMode, 0, __pyx_n_s_CanSetReceiveMode, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanSetReceiveMode, __pyx_t_2) < 0) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":631
 *     return xlCanSetReceiveMode(portHandle, ErrorFrame, ChipState)
 * 
 * def CanSetChannelParamsC200(XLportHandle portHandle, XLaccess accessMask, unsigned char btr0, unsigned char btr1):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelParamsC200(portHandle, accessMask, btr0, btr1)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_47CanSetChannelParamsC200, 0, __pyx_n_s_CanSetChannelParamsC200, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanSetChannelParamsC200, __pyx_t_2) < 0) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":634
 *     return xlCanSetChannelParamsC200(portHandle, accessMask, btr0, btr1)
 * 
 * def CanSetChannelTransceiver(XLportHandle portHandle, XLaccess accessMask, int type, int lineMode, int resNet):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelTransceiver(portHandle, accessMask, type, lineMode, resNet)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_49CanSetChannelTransceiver, 0, __pyx_n_s_CanSetChannelTransceiver, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanSetChannelTransceiver, __pyx_t_2) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":637
 *     return xlCanSetChannelTransceiver(portHandle, accessMask, type, lineMode, resNet)
 * 
 * def CanSetChannelAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned long code, unsigned long mask, unsigned int idRange):             # <<<<<<<<<<<<<<
 *     return xlCanSetChannelAcceptance(portHandle, accessMask, code, mask, idRange)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_51CanSetChannelAcceptance, 0, __pyx_n_s_CanSetChannelAcceptance, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanSetChannelAcceptance, __pyx_t_2) < 0) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":640
 *     return xlCanSetChannelAcceptance(portHandle, accessMask, code, mask, idRange)
 * 
 * def CanAddAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):             # <<<<<<<<<<<<<<
 *     return xlCanAddAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_53CanAddAcceptanceRange, 0, __pyx_n_s_CanAddAcceptanceRange, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanAddAcceptanceRange, __pyx_t_2) < 0) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":643
 *     return xlCanAddAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 * def CanRemoveAcceptanceRange(XLportHandle portHandle, XLaccess accessMask, unsigned long first_id, unsigned long last_id):             # <<<<<<<<<<<<<<
 *     return xlCanRemoveAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_55CanRemoveAcceptanceRange, 0, __pyx_n_s_CanRemoveAcceptanceRange, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanRemoveAcceptanceRange, __pyx_t_2) < 0) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":646
 *     return xlCanRemoveAcceptanceRange(portHandle, accessMask, first_id, last_id)
 * 
 * def CanResetAcceptance(XLportHandle portHandle, XLaccess accessMask, unsigned int idRange):             # <<<<<<<<<<<<<<
 *     return xlCanResetAcceptance(portHandle, accessMask, idRange)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_57CanResetAcceptance, 0, __pyx_n_s_CanResetAcceptance, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanResetAcceptance, __pyx_t_2) < 0) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":649
 *     return xlCanResetAcceptance(portHandle, accessMask, idRange)
 * 
 * def SetGlobalTimeSync(unsigned long newValue, list pPreviousValue):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned long previousValue = XL_SET_TIMESYNC_NO_CHANGE
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_59SetGlobalTimeSync, 0, __pyx_n_s_SetGlobalTimeSync, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetGlobalTimeSync, __pyx_t_2) < 0) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":656
 *     return status
 * 
 * def GetSyncTime(XLportHandle portHandle, list pTime):             # <<<<<<<<<<<<<<
 *     cdef XLstatus = XL_ERROR
 *     cdef XLuint64 time = 0
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_61GetSyncTime, 0, __pyx_n_s_GetSyncTime, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetSyncTime, __pyx_t_2) < 0) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":663
 *     return status
 * 
 * def GetChannelTime(XLportHandle portHandle, XLaccess accessMask, list pChannelTime):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLuint64 channelTime
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_63GetChannelTime, 0, __pyx_n_s_GetChannelTime, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetChannelTime, __pyx_t_2) < 0) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":670
 *     return status
 * 
 * def GenerateSyncPulse(XLportHandle portHandle, XLaccess accessMask):             # <<<<<<<<<<<<<<
 *     return xlGenerateSyncPulse(portHandle, accessMask)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_65GenerateSyncPulse, 0, __pyx_n_s_GenerateSyncPulse, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GenerateSyncPulse, __pyx_t_2) < 0) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":690
 *     #return xlGetEventString(&xlEvent)
 * 
 * def GetErrorString(XLstatus err):             # <<<<<<<<<<<<<<
 *     return xlGetErrorString(err)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_67GetErrorString, 0, __pyx_n_s_GetErrorString, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetErrorString, __pyx_t_2) < 0) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":693
 *     return xlGetErrorString(err)
 * 
 * def GetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int hwType    = pHwType[0]
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_69GetApplConfig, 0, __pyx_n_s_GetApplConfig, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetApplConfig, __pyx_t_2) < 0) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":706
 *     return status
 * 
 * def SetApplConfig(char *appName, unsigned int appChannel, list pHwType, list pHwIndex, list pHwChannel, unsigned int busType):             # <<<<<<<<<<<<<<
 *     return xlSetApplConfig(appName, appChannel, pHwType[0], pHwIndex[0], pHwChannel[0], busType)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_71SetApplConfig, 0, __pyx_n_s_SetApplConfig, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetApplConfig, __pyx_t_2) < 0) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":709
 *     return xlSetApplConfig(appName, appChannel, pHwType[0], pHwIndex[0], pHwChannel[0], busType)
 * 
 * def GetDriverConfig(dict pDriverConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef XLdriverConfig driverConfig
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_73GetDriverConfig, 0, __pyx_n_s_GetDriverConfig, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetDriverConfig, __pyx_t_2) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":861
 * 
 * 
 * def GetRemoteDriverConfig(dict pDriverConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status
 *     cdef XLdriverConfig driverConfig
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_75GetRemoteDriverConfig, 0, __pyx_n_s_GetRemoteDriverConfig, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetRemoteDriverConfig, __pyx_t_2) < 0) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1012
 *     return status
 * 
 * def PopupHwConfig(char* callSign=NULL, unsigned int waitForFinish=0):             # <<<<<<<<<<<<<<
 *     return xlPopupHwConfig(callSign, waitForFinish)
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(((unsigned int)0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_77PopupHwConfig, 0, __pyx_n_s_PopupHwConfig, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PopupHwConfig, __pyx_t_2) < 0) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1015
 *     return xlPopupHwConfig(callSign, waitForFinish)
 * 
 * def GetLicenseInfo(XLaccess channelMask, list pLicInfoArray):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLlicenseInfo licInfoArray[1024]
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_79GetLicenseInfo, 0, __pyx_n_s_GetLicenseInfo, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetLicenseInfo, __pyx_t_2) < 0) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1032
 *     return status
 * 
 * def GetKeymanBoxes(list pBoxCount):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int boxCount = 0
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_81GetKeymanBoxes, 0, __pyx_n_s_GetKeymanBoxes, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetKeymanBoxes, __pyx_t_2) < 0) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1039
 *     return status
 * 
 * def GetKeymanInfo(unsigned int boxIndex, list pBoxMask, list pBoxSerial, list pLicInfo):             # <<<<<<<<<<<<<<
 *         cdef XLstatus status = XL_ERROR
 *         cdef unsigned int boxMask = 0
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_83GetKeymanInfo, 0, __pyx_n_s_GetKeymanInfo, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetKeymanInfo, __pyx_t_2) < 0) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1055
 *         return status
 * 
 * def CanFdSetConfiguration(XLportHandle portHandle, XLaccess accessMask, list pCanFdConf):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLcanFdConf canFdConf
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_85CanFdSetConfiguration, 0, __pyx_n_s_CanFdSetConfiguration, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanFdSetConfiguration, __pyx_t_2) < 0) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1066
 *     return status
 * 
 * def CanTransmitEx(XLportHandle portHandle, XLaccess accessMask, unsigned char channelIndex, unsigned int msgCnt, list pMsgCntSent, list pXlCanTxEvt):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef unsigned int message_count = 0
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_87CanTransmitEx, 0, __pyx_n_s_CanTransmitEx, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanTransmitEx, __pyx_t_2) < 0) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1096
 *     return status
 * 
 * def FrSetConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlClusterConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrClusterConfig clusterConfig
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_89FrSetConfiguration, 0, __pyx_n_s_FrSetConfiguration, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrSetConfiguration, __pyx_t_2) < 0) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1167
 *     return status
 * 
 * def FrGetChannelConfiguration(XLportHandle portHandle, XLaccess accessMask, dict pxlFrChannelConfig):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrChannelConfig channelConfig
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_91FrGetChannelConfiguration, 0, __pyx_n_s_FrGetChannelConfiguration, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrGetChannelConfiguration, __pyx_t_2) < 0) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1174
 *     return status
 * 
 * def FrSetMode(XLportHandle portHandle, XLaccess accessMask, dict frMode):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrMode mode
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_93FrSetMode, 0, __pyx_n_s_FrSetMode, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrSetMode, __pyx_t_2) < 0) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1201
 * 
 * 
 * def FrInitStartupAndSync(XLportHandle portHandle, XLaccess accessMask, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_95FrInitStartupAndSync, 0, __pyx_n_s_FrInitStartupAndSync, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrInitStartupAndSync, __pyx_t_2) < 0) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1210
 *     return status
 * 
 * def FrSetupSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int symbolWindowMask):             # <<<<<<<<<<<<<<
 *     return xlFrSetupSymbolWindow(portHandle, accessMask, frChannel, symbolWindowMask)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_97FrSetupSymbolWindow, 0, __pyx_n_s_FrSetupSymbolWindow, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrSetupSymbolWindow, __pyx_t_2) < 0) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1213
 *     return xlFrSetupSymbolWindow(portHandle, accessMask, frChannel, symbolWindowMask)
 * 
 * def FrActivateSpy(XLportHandle portHandle, XLaccess accessMask, unsigned int mode):             # <<<<<<<<<<<<<<
 *     return xlFrActivateSpy(portHandle, accessMask, mode)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_99FrActivateSpy, 0, __pyx_n_s_FrActivateSpy, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrActivateSpy, __pyx_t_2) < 0) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1224
 * #    return status
 * 
 * def FrReceive(XLportHandle portHandle, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_101FrReceive, 0, __pyx_n_s_FrReceive, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrReceive, __pyx_t_2) < 0) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1232
 *     return status
 * 
 * def FrTransmit(XLportHandle portHandle, XLaccess accessMask, dict pEventBuffer):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrEvent eventBuffer
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_103FrTransmit, 0, __pyx_n_s_FrTransmit, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrTransmit, __pyx_t_2) < 0) __PYX_ERR(0, 1232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1242
 *     return status
 * 
 * def FrSetTransceiverMode(XLportHandle portHandle, XLaccess accessMask, unsigned int frChannel, unsigned int mode):             # <<<<<<<<<<<<<<
 *     return xlFrSetTransceiverMode(portHandle, accessMask, frChannel, mode)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_105FrSetTransceiverMode, 0, __pyx_n_s_FrSetTransceiverMode, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrSetTransceiverMode, __pyx_t_2) < 0) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1245
 *     return xlFrSetTransceiverMode(portHandle, accessMask, frChannel, mode)
 * 
 * def FrSendSymbolWindow(XLportHandle portHandle, XLaccess accessMask, unsigned int symbolWindow):             # <<<<<<<<<<<<<<
 *     return xlFrSendSymbolWindow(portHandle, accessMask, symbolWindow)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_107FrSendSymbolWindow, 0, __pyx_n_s_FrSendSymbolWindow, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrSendSymbolWindow, __pyx_t_2) < 0) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1248
 *     return xlFrSendSymbolWindow(portHandle, accessMask, symbolWindow)
 * 
 * def FrSetAcceptanceFilter(XLportHandle portHandle, XLaccess accessMask, dict pAcceptanceFilter):             # <<<<<<<<<<<<<<
 *     cdef XLstatus status = XL_ERROR
 *     cdef XLfrAcceptanceFilter acceptanceFilter
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6vxlapi_109FrSetAcceptanceFilter, 0, __pyx_n_s_FrSetAcceptanceFilter, NULL, __pyx_n_s_vxlapi, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrSetAcceptanceFilter, __pyx_t_2) < 0) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1262
 * 
 * # HwType
 * XL_HWTYPE_NONE                   = _XL_HWTYPE_NONE             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VIRTUAL                = _XL_HWTYPE_VIRTUAL
 * XL_HWTYPE_CANCARDX               = _XL_HWTYPE_CANCARDX
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_NONE, __pyx_t_2) < 0) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1263
 * # HwType
 * XL_HWTYPE_NONE                   = _XL_HWTYPE_NONE
 * XL_HWTYPE_VIRTUAL                = _XL_HWTYPE_VIRTUAL             # <<<<<<<<<<<<<<
 * XL_HWTYPE_CANCARDX               = _XL_HWTYPE_CANCARDX
 * XL_HWTYPE_CANAC2PCI              = _XL_HWTYPE_CANAC2PCI
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VIRTUAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VIRTUAL, __pyx_t_2) < 0) __PYX_ERR(0, 1263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1264
 * XL_HWTYPE_NONE                   = _XL_HWTYPE_NONE
 * XL_HWTYPE_VIRTUAL                = _XL_HWTYPE_VIRTUAL
 * XL_HWTYPE_CANCARDX               = _XL_HWTYPE_CANCARDX             # <<<<<<<<<<<<<<
 * XL_HWTYPE_CANAC2PCI              = _XL_HWTYPE_CANAC2PCI
 * XL_HWTYPE_CANCARDY               = _XL_HWTYPE_CANCARDY
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_CANCARDX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_CANCARDX, __pyx_t_2) < 0) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1265
 * XL_HWTYPE_VIRTUAL                = _XL_HWTYPE_VIRTUAL
 * XL_HWTYPE_CANCARDX               = _XL_HWTYPE_CANCARDX
 * XL_HWTYPE_CANAC2PCI              = _XL_HWTYPE_CANAC2PCI             # <<<<<<<<<<<<<<
 * XL_HWTYPE_CANCARDY               = _XL_HWTYPE_CANCARDY
 * XL_HWTYPE_CANCARDXL              = _XL_HWTYPE_CANCARDXL
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_CANAC2PCI); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_CANAC2PCI, __pyx_t_2) < 0) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1266
 * XL_HWTYPE_CANCARDX               = _XL_HWTYPE_CANCARDX
 * XL_HWTYPE_CANAC2PCI              = _XL_HWTYPE_CANAC2PCI
 * XL_HWTYPE_CANCARDY               = _XL_HWTYPE_CANCARDY             # <<<<<<<<<<<<<<
 * XL_HWTYPE_CANCARDXL              = _XL_HWTYPE_CANCARDXL
 * XL_HWTYPE_CANCASEXL              = _XL_HWTYPE_CANCASEXL
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_CANCARDY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_CANCARDY, __pyx_t_2) < 0) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1267
 * XL_HWTYPE_CANAC2PCI              = _XL_HWTYPE_CANAC2PCI
 * XL_HWTYPE_CANCARDY               = _XL_HWTYPE_CANCARDY
 * XL_HWTYPE_CANCARDXL              = _XL_HWTYPE_CANCARDXL             # <<<<<<<<<<<<<<
 * XL_HWTYPE_CANCASEXL              = _XL_HWTYPE_CANCASEXL
 * XL_HWTYPE_CANCASEXL_LOG_OBSOLETE = _XL_HWTYPE_CANCASEXL_LOG_OBSOLETE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_CANCARDXL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_CANCARDXL, __pyx_t_2) < 0) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1268
 * XL_HWTYPE_CANCARDY               = _XL_HWTYPE_CANCARDY
 * XL_HWTYPE_CANCARDXL              = _XL_HWTYPE_CANCARDXL
 * XL_HWTYPE_CANCASEXL              = _XL_HWTYPE_CANCASEXL             # <<<<<<<<<<<<<<
 * XL_HWTYPE_CANCASEXL_LOG_OBSOLETE = _XL_HWTYPE_CANCASEXL_LOG_OBSOLETE
 * XL_HWTYPE_CANBOARDXL             = _XL_HWTYPE_CANBOARDXL
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_CANCASEXL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_CANCASEXL, __pyx_t_2) < 0) __PYX_ERR(0, 1268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1269
 * XL_HWTYPE_CANCARDXL              = _XL_HWTYPE_CANCARDXL
 * XL_HWTYPE_CANCASEXL              = _XL_HWTYPE_CANCASEXL
 * XL_HWTYPE_CANCASEXL_LOG_OBSOLETE = _XL_HWTYPE_CANCASEXL_LOG_OBSOLETE             # <<<<<<<<<<<<<<
 * XL_HWTYPE_CANBOARDXL             = _XL_HWTYPE_CANBOARDXL
 * XL_HWTYPE_CANBOARDXL_PXI         = _XL_HWTYPE_CANBOARDXL_PXI
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_CANCASEXL_LOG_OBSOLETE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_CANCASEXL_LOG_OBSOLETE, __pyx_t_2) < 0) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1270
 * XL_HWTYPE_CANCASEXL              = _XL_HWTYPE_CANCASEXL
 * XL_HWTYPE_CANCASEXL_LOG_OBSOLETE = _XL_HWTYPE_CANCASEXL_LOG_OBSOLETE
 * XL_HWTYPE_CANBOARDXL             = _XL_HWTYPE_CANBOARDXL             # <<<<<<<<<<<<<<
 * XL_HWTYPE_CANBOARDXL_PXI         = _XL_HWTYPE_CANBOARDXL_PXI
 * XL_HWTYPE_VN2600                 = _XL_HWTYPE_VN2600
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_CANBOARDXL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_CANBOARDXL, __pyx_t_2) < 0) __PYX_ERR(0, 1270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1271
 * XL_HWTYPE_CANCASEXL_LOG_OBSOLETE = _XL_HWTYPE_CANCASEXL_LOG_OBSOLETE
 * XL_HWTYPE_CANBOARDXL             = _XL_HWTYPE_CANBOARDXL
 * XL_HWTYPE_CANBOARDXL_PXI         = _XL_HWTYPE_CANBOARDXL_PXI             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN2600                 = _XL_HWTYPE_VN2600
 * XL_HWTYPE_VN2610                 = _XL_HWTYPE_VN2610
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_CANBOARDXL_PXI); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_CANBOARDXL_PXI, __pyx_t_2) < 0) __PYX_ERR(0, 1271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1272
 * XL_HWTYPE_CANBOARDXL             = _XL_HWTYPE_CANBOARDXL
 * XL_HWTYPE_CANBOARDXL_PXI         = _XL_HWTYPE_CANBOARDXL_PXI
 * XL_HWTYPE_VN2600                 = _XL_HWTYPE_VN2600             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN2610                 = _XL_HWTYPE_VN2610
 * XL_HWTYPE_VN3300                 = _XL_HWTYPE_VN3300
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN2600); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN2600, __pyx_t_2) < 0) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1273
 * XL_HWTYPE_CANBOARDXL_PXI         = _XL_HWTYPE_CANBOARDXL_PXI
 * XL_HWTYPE_VN2600                 = _XL_HWTYPE_VN2600
 * XL_HWTYPE_VN2610                 = _XL_HWTYPE_VN2610             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN3300                 = _XL_HWTYPE_VN3300
 * XL_HWTYPE_VN3600                 = _XL_HWTYPE_VN3600
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN2610); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN2610, __pyx_t_2) < 0) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1274
 * XL_HWTYPE_VN2600                 = _XL_HWTYPE_VN2600
 * XL_HWTYPE_VN2610                 = _XL_HWTYPE_VN2610
 * XL_HWTYPE_VN3300                 = _XL_HWTYPE_VN3300             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN3600                 = _XL_HWTYPE_VN3600
 * XL_HWTYPE_VN7600                 = _XL_HWTYPE_VN7600
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN3300); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN3300, __pyx_t_2) < 0) __PYX_ERR(0, 1274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1275
 * XL_HWTYPE_VN2610                 = _XL_HWTYPE_VN2610
 * XL_HWTYPE_VN3300                 = _XL_HWTYPE_VN3300
 * XL_HWTYPE_VN3600                 = _XL_HWTYPE_VN3600             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN7600                 = _XL_HWTYPE_VN7600
 * XL_HWTYPE_CANCARDXLE             = _XL_HWTYPE_CANCARDXLE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN3600); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN3600, __pyx_t_2) < 0) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1276
 * XL_HWTYPE_VN3300                 = _XL_HWTYPE_VN3300
 * XL_HWTYPE_VN3600                 = _XL_HWTYPE_VN3600
 * XL_HWTYPE_VN7600                 = _XL_HWTYPE_VN7600             # <<<<<<<<<<<<<<
 * XL_HWTYPE_CANCARDXLE             = _XL_HWTYPE_CANCARDXLE
 * XL_HWTYPE_VN8900                 = _XL_HWTYPE_VN8900
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN7600); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN7600, __pyx_t_2) < 0) __PYX_ERR(0, 1276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1277
 * XL_HWTYPE_VN3600                 = _XL_HWTYPE_VN3600
 * XL_HWTYPE_VN7600                 = _XL_HWTYPE_VN7600
 * XL_HWTYPE_CANCARDXLE             = _XL_HWTYPE_CANCARDXLE             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN8900                 = _XL_HWTYPE_VN8900
 * XL_HWTYPE_VN8950                 = _XL_HWTYPE_VN8950
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_CANCARDXLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_CANCARDXLE, __pyx_t_2) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1278
 * XL_HWTYPE_VN7600                 = _XL_HWTYPE_VN7600
 * XL_HWTYPE_CANCARDXLE             = _XL_HWTYPE_CANCARDXLE
 * XL_HWTYPE_VN8900                 = _XL_HWTYPE_VN8900             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN8950                 = _XL_HWTYPE_VN8950
 * XL_HWTYPE_VN2640                 = _XL_HWTYPE_VN2640
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN8900); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN8900, __pyx_t_2) < 0) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1279
 * XL_HWTYPE_CANCARDXLE             = _XL_HWTYPE_CANCARDXLE
 * XL_HWTYPE_VN8900                 = _XL_HWTYPE_VN8900
 * XL_HWTYPE_VN8950                 = _XL_HWTYPE_VN8950             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN2640                 = _XL_HWTYPE_VN2640
 * XL_HWTYPE_VN1610                 = _XL_HWTYPE_VN1610
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN8950); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN8950, __pyx_t_2) < 0) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1280
 * XL_HWTYPE_VN8900                 = _XL_HWTYPE_VN8900
 * XL_HWTYPE_VN8950                 = _XL_HWTYPE_VN8950
 * XL_HWTYPE_VN2640                 = _XL_HWTYPE_VN2640             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN1610                 = _XL_HWTYPE_VN1610
 * XL_HWTYPE_VN1630                 = _XL_HWTYPE_VN1630
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN2640); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN2640, __pyx_t_2) < 0) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1281
 * XL_HWTYPE_VN8950                 = _XL_HWTYPE_VN8950
 * XL_HWTYPE_VN2640                 = _XL_HWTYPE_VN2640
 * XL_HWTYPE_VN1610                 = _XL_HWTYPE_VN1610             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN1630                 = _XL_HWTYPE_VN1630
 * XL_HWTYPE_VN1640                 = _XL_HWTYPE_VN1640
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN1610); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN1610, __pyx_t_2) < 0) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1282
 * XL_HWTYPE_VN2640                 = _XL_HWTYPE_VN2640
 * XL_HWTYPE_VN1610                 = _XL_HWTYPE_VN1610
 * XL_HWTYPE_VN1630                 = _XL_HWTYPE_VN1630             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN1640                 = _XL_HWTYPE_VN1640
 * XL_HWTYPE_VN8970                 = _XL_HWTYPE_VN8970
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN1630); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN1630, __pyx_t_2) < 0) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1283
 * XL_HWTYPE_VN1610                 = _XL_HWTYPE_VN1610
 * XL_HWTYPE_VN1630                 = _XL_HWTYPE_VN1630
 * XL_HWTYPE_VN1640                 = _XL_HWTYPE_VN1640             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN8970                 = _XL_HWTYPE_VN8970
 * XL_HWTYPE_VN1611                 = _XL_HWTYPE_VN1611
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN1640); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN1640, __pyx_t_2) < 0) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1284
 * XL_HWTYPE_VN1630                 = _XL_HWTYPE_VN1630
 * XL_HWTYPE_VN1640                 = _XL_HWTYPE_VN1640
 * XL_HWTYPE_VN8970                 = _XL_HWTYPE_VN8970             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN1611                 = _XL_HWTYPE_VN1611
 * XL_HWTYPE_VN5610                 = _XL_HWTYPE_VN5610
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN8970); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN8970, __pyx_t_2) < 0) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1285
 * XL_HWTYPE_VN1640                 = _XL_HWTYPE_VN1640
 * XL_HWTYPE_VN8970                 = _XL_HWTYPE_VN8970
 * XL_HWTYPE_VN1611                 = _XL_HWTYPE_VN1611             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN5610                 = _XL_HWTYPE_VN5610
 * XL_HWTYPE_VN7570                 = _XL_HWTYPE_VN7570
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN1611); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN1611, __pyx_t_2) < 0) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1286
 * XL_HWTYPE_VN8970                 = _XL_HWTYPE_VN8970
 * XL_HWTYPE_VN1611                 = _XL_HWTYPE_VN1611
 * XL_HWTYPE_VN5610                 = _XL_HWTYPE_VN5610             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN7570                 = _XL_HWTYPE_VN7570
 * XL_HWTYPE_IPCLIENT               = _XL_HWTYPE_IPCLIENT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN5610); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN5610, __pyx_t_2) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1287
 * XL_HWTYPE_VN1611                 = _XL_HWTYPE_VN1611
 * XL_HWTYPE_VN5610                 = _XL_HWTYPE_VN5610
 * XL_HWTYPE_VN7570                 = _XL_HWTYPE_VN7570             # <<<<<<<<<<<<<<
 * XL_HWTYPE_IPCLIENT               = _XL_HWTYPE_IPCLIENT
 * XL_HWTYPE_IPSERVER               = _XL_HWTYPE_IPSERVER
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN7570); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN7570, __pyx_t_2) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1288
 * XL_HWTYPE_VN5610                 = _XL_HWTYPE_VN5610
 * XL_HWTYPE_VN7570                 = _XL_HWTYPE_VN7570
 * XL_HWTYPE_IPCLIENT               = _XL_HWTYPE_IPCLIENT             # <<<<<<<<<<<<<<
 * XL_HWTYPE_IPSERVER               = _XL_HWTYPE_IPSERVER
 * XL_HWTYPE_VX1121                 = _XL_HWTYPE_VX1121
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_IPCLIENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_IPCLIENT, __pyx_t_2) < 0) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1289
 * XL_HWTYPE_VN7570                 = _XL_HWTYPE_VN7570
 * XL_HWTYPE_IPCLIENT               = _XL_HWTYPE_IPCLIENT
 * XL_HWTYPE_IPSERVER               = _XL_HWTYPE_IPSERVER             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VX1121                 = _XL_HWTYPE_VX1121
 * XL_HWTYPE_VX1131                 = _XL_HWTYPE_VX1131
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_IPSERVER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_IPSERVER, __pyx_t_2) < 0) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1290
 * XL_HWTYPE_IPCLIENT               = _XL_HWTYPE_IPCLIENT
 * XL_HWTYPE_IPSERVER               = _XL_HWTYPE_IPSERVER
 * XL_HWTYPE_VX1121                 = _XL_HWTYPE_VX1121             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VX1131                 = _XL_HWTYPE_VX1131
 * XL_HWTYPE_VT6204                 = _XL_HWTYPE_VT6204
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VX1121); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VX1121, __pyx_t_2) < 0) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1291
 * XL_HWTYPE_IPSERVER               = _XL_HWTYPE_IPSERVER
 * XL_HWTYPE_VX1121                 = _XL_HWTYPE_VX1121
 * XL_HWTYPE_VX1131                 = _XL_HWTYPE_VX1131             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VT6204                 = _XL_HWTYPE_VT6204
 * XL_HWTYPE_VN1630_LOG             = _XL_HWTYPE_VN1630_LOG
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VX1131); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VX1131, __pyx_t_2) < 0) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1292
 * XL_HWTYPE_VX1121                 = _XL_HWTYPE_VX1121
 * XL_HWTYPE_VX1131                 = _XL_HWTYPE_VX1131
 * XL_HWTYPE_VT6204                 = _XL_HWTYPE_VT6204             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN1630_LOG             = _XL_HWTYPE_VN1630_LOG
 * XL_HWTYPE_VN7610                 = _XL_HWTYPE_VN7610
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VT6204); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VT6204, __pyx_t_2) < 0) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1293
 * XL_HWTYPE_VX1131                 = _XL_HWTYPE_VX1131
 * XL_HWTYPE_VT6204                 = _XL_HWTYPE_VT6204
 * XL_HWTYPE_VN1630_LOG             = _XL_HWTYPE_VN1630_LOG             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN7610                 = _XL_HWTYPE_VN7610
 * XL_HWTYPE_VN7572                 = _XL_HWTYPE_VN7572
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN1630_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN1630_LOG, __pyx_t_2) < 0) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1294
 * XL_HWTYPE_VT6204                 = _XL_HWTYPE_VT6204
 * XL_HWTYPE_VN1630_LOG             = _XL_HWTYPE_VN1630_LOG
 * XL_HWTYPE_VN7610                 = _XL_HWTYPE_VN7610             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN7572                 = _XL_HWTYPE_VN7572
 * XL_HWTYPE_VN8972                 = _XL_HWTYPE_VN8972
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN7610); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN7610, __pyx_t_2) < 0) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1295
 * XL_HWTYPE_VN1630_LOG             = _XL_HWTYPE_VN1630_LOG
 * XL_HWTYPE_VN7610                 = _XL_HWTYPE_VN7610
 * XL_HWTYPE_VN7572                 = _XL_HWTYPE_VN7572             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN8972                 = _XL_HWTYPE_VN8972
 * XL_HWTYPE_VN0601                 = _XL_HWTYPE_VN0601
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN7572); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN7572, __pyx_t_2) < 0) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1296
 * XL_HWTYPE_VN7610                 = _XL_HWTYPE_VN7610
 * XL_HWTYPE_VN7572                 = _XL_HWTYPE_VN7572
 * XL_HWTYPE_VN8972                 = _XL_HWTYPE_VN8972             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN0601                 = _XL_HWTYPE_VN0601
 * XL_HWTYPE_VX0312                 = _XL_HWTYPE_VX0312
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN8972); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN8972, __pyx_t_2) < 0) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1297
 * XL_HWTYPE_VN7572                 = _XL_HWTYPE_VN7572
 * XL_HWTYPE_VN8972                 = _XL_HWTYPE_VN8972
 * XL_HWTYPE_VN0601                 = _XL_HWTYPE_VN0601             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VX0312                 = _XL_HWTYPE_VX0312
 * XL_HWTYPE_VN8800                 = _XL_HWTYPE_VN8800
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN0601); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN0601, __pyx_t_2) < 0) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1298
 * XL_HWTYPE_VN8972                 = _XL_HWTYPE_VN8972
 * XL_HWTYPE_VN0601                 = _XL_HWTYPE_VN0601
 * XL_HWTYPE_VX0312                 = _XL_HWTYPE_VX0312             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN8800                 = _XL_HWTYPE_VN8800
 * XL_HWTYPE_IPCL8800               = _XL_HWTYPE_IPCL8800
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VX0312); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VX0312, __pyx_t_2) < 0) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1299
 * XL_HWTYPE_VN0601                 = _XL_HWTYPE_VN0601
 * XL_HWTYPE_VX0312                 = _XL_HWTYPE_VX0312
 * XL_HWTYPE_VN8800                 = _XL_HWTYPE_VN8800             # <<<<<<<<<<<<<<
 * XL_HWTYPE_IPCL8800               = _XL_HWTYPE_IPCL8800
 * XL_HWTYPE_IPSRV8800              = _XL_HWTYPE_IPSRV8800
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN8800); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN8800, __pyx_t_2) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1300
 * XL_HWTYPE_VX0312                 = _XL_HWTYPE_VX0312
 * XL_HWTYPE_VN8800                 = _XL_HWTYPE_VN8800
 * XL_HWTYPE_IPCL8800               = _XL_HWTYPE_IPCL8800             # <<<<<<<<<<<<<<
 * XL_HWTYPE_IPSRV8800              = _XL_HWTYPE_IPSRV8800
 * XL_HWTYPE_CSMCAN                 = _XL_HWTYPE_CSMCAN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_IPCL8800); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_IPCL8800, __pyx_t_2) < 0) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1301
 * XL_HWTYPE_VN8800                 = _XL_HWTYPE_VN8800
 * XL_HWTYPE_IPCL8800               = _XL_HWTYPE_IPCL8800
 * XL_HWTYPE_IPSRV8800              = _XL_HWTYPE_IPSRV8800             # <<<<<<<<<<<<<<
 * XL_HWTYPE_CSMCAN                 = _XL_HWTYPE_CSMCAN
 * XL_HWTYPE_VN5610A                = _XL_HWTYPE_VN5610A
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_IPSRV8800); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_IPSRV8800, __pyx_t_2) < 0) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1302
 * XL_HWTYPE_IPCL8800               = _XL_HWTYPE_IPCL8800
 * XL_HWTYPE_IPSRV8800              = _XL_HWTYPE_IPSRV8800
 * XL_HWTYPE_CSMCAN                 = _XL_HWTYPE_CSMCAN             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN5610A                = _XL_HWTYPE_VN5610A
 * XL_HWTYPE_VN7640                 = _XL_HWTYPE_VN7640
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_CSMCAN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_CSMCAN, __pyx_t_2) < 0) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1303
 * XL_HWTYPE_IPSRV8800              = _XL_HWTYPE_IPSRV8800
 * XL_HWTYPE_CSMCAN                 = _XL_HWTYPE_CSMCAN
 * XL_HWTYPE_VN5610A                = _XL_HWTYPE_VN5610A             # <<<<<<<<<<<<<<
 * XL_HWTYPE_VN7640                 = _XL_HWTYPE_VN7640
 * XL_MAX_HWTYPE                    = _XL_MAX_HWTYPE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN5610A); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN5610A, __pyx_t_2) < 0) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1304
 * XL_HWTYPE_CSMCAN                 = _XL_HWTYPE_CSMCAN
 * XL_HWTYPE_VN5610A                = _XL_HWTYPE_VN5610A
 * XL_HWTYPE_VN7640                 = _XL_HWTYPE_VN7640             # <<<<<<<<<<<<<<
 * XL_MAX_HWTYPE                    = _XL_MAX_HWTYPE
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_HWTYPE_VN7640); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_HWTYPE_VN7640, __pyx_t_2) < 0) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1305
 * XL_HWTYPE_VN5610A                = _XL_HWTYPE_VN5610A
 * XL_HWTYPE_VN7640                 = _XL_HWTYPE_VN7640
 * XL_MAX_HWTYPE                    = _XL_MAX_HWTYPE             # <<<<<<<<<<<<<<
 * 
 * # BusType
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_MAX_HWTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_MAX_HWTYPE, __pyx_t_2) < 0) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1308
 * 
 * # BusType
 * XL_BUS_TYPE_NONE     = _XL_BUS_TYPE_NONE             # <<<<<<<<<<<<<<
 * XL_BUS_TYPE_CAN      = _XL_BUS_TYPE_CAN
 * XL_BUS_TYPE_LIN      = _XL_BUS_TYPE_LIN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_TYPE_NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_TYPE_NONE, __pyx_t_2) < 0) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1309
 * # BusType
 * XL_BUS_TYPE_NONE     = _XL_BUS_TYPE_NONE
 * XL_BUS_TYPE_CAN      = _XL_BUS_TYPE_CAN             # <<<<<<<<<<<<<<
 * XL_BUS_TYPE_LIN      = _XL_BUS_TYPE_LIN
 * XL_BUS_TYPE_FLEXRAY  = _XL_BUS_TYPE_FLEXRAY
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_TYPE_CAN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_TYPE_CAN, __pyx_t_2) < 0) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1310
 * XL_BUS_TYPE_NONE     = _XL_BUS_TYPE_NONE
 * XL_BUS_TYPE_CAN      = _XL_BUS_TYPE_CAN
 * XL_BUS_TYPE_LIN      = _XL_BUS_TYPE_LIN             # <<<<<<<<<<<<<<
 * XL_BUS_TYPE_FLEXRAY  = _XL_BUS_TYPE_FLEXRAY
 * XL_BUS_TYPE_AFDX     = _XL_BUS_TYPE_AFDX
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_TYPE_LIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_TYPE_LIN, __pyx_t_2) < 0) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1311
 * XL_BUS_TYPE_CAN      = _XL_BUS_TYPE_CAN
 * XL_BUS_TYPE_LIN      = _XL_BUS_TYPE_LIN
 * XL_BUS_TYPE_FLEXRAY  = _XL_BUS_TYPE_FLEXRAY             # <<<<<<<<<<<<<<
 * XL_BUS_TYPE_AFDX     = _XL_BUS_TYPE_AFDX
 * XL_BUS_TYPE_MOST     = _XL_BUS_TYPE_MOST
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_TYPE_FLEXRAY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_TYPE_FLEXRAY, __pyx_t_2) < 0) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1312
 * XL_BUS_TYPE_LIN      = _XL_BUS_TYPE_LIN
 * XL_BUS_TYPE_FLEXRAY  = _XL_BUS_TYPE_FLEXRAY
 * XL_BUS_TYPE_AFDX     = _XL_BUS_TYPE_AFDX             # <<<<<<<<<<<<<<
 * XL_BUS_TYPE_MOST     = _XL_BUS_TYPE_MOST
 * XL_BUS_TYPE_DAIO     = _XL_BUS_TYPE_DAIO
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_TYPE_AFDX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_TYPE_AFDX, __pyx_t_2) < 0) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1313
 * XL_BUS_TYPE_FLEXRAY  = _XL_BUS_TYPE_FLEXRAY
 * XL_BUS_TYPE_AFDX     = _XL_BUS_TYPE_AFDX
 * XL_BUS_TYPE_MOST     = _XL_BUS_TYPE_MOST             # <<<<<<<<<<<<<<
 * XL_BUS_TYPE_DAIO     = _XL_BUS_TYPE_DAIO
 * XL_BUS_TYPE_J1708    = _XL_BUS_TYPE_J1708
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_TYPE_MOST); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_TYPE_MOST, __pyx_t_2) < 0) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1314
 * XL_BUS_TYPE_AFDX     = _XL_BUS_TYPE_AFDX
 * XL_BUS_TYPE_MOST     = _XL_BUS_TYPE_MOST
 * XL_BUS_TYPE_DAIO     = _XL_BUS_TYPE_DAIO             # <<<<<<<<<<<<<<
 * XL_BUS_TYPE_J1708    = _XL_BUS_TYPE_J1708
 * XL_BUS_TYPE_ETHERNET = _XL_BUS_TYPE_ETHERNET
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_TYPE_DAIO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_TYPE_DAIO, __pyx_t_2) < 0) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1315
 * XL_BUS_TYPE_MOST     = _XL_BUS_TYPE_MOST
 * XL_BUS_TYPE_DAIO     = _XL_BUS_TYPE_DAIO
 * XL_BUS_TYPE_J1708    = _XL_BUS_TYPE_J1708             # <<<<<<<<<<<<<<
 * XL_BUS_TYPE_ETHERNET = _XL_BUS_TYPE_ETHERNET
 * XL_BUS_TYPE_A429     = _XL_BUS_TYPE_A429
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_TYPE_J1708); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_TYPE_J1708, __pyx_t_2) < 0) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1316
 * XL_BUS_TYPE_DAIO     = _XL_BUS_TYPE_DAIO
 * XL_BUS_TYPE_J1708    = _XL_BUS_TYPE_J1708
 * XL_BUS_TYPE_ETHERNET = _XL_BUS_TYPE_ETHERNET             # <<<<<<<<<<<<<<
 * XL_BUS_TYPE_A429     = _XL_BUS_TYPE_A429
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_TYPE_ETHERNET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_TYPE_ETHERNET, __pyx_t_2) < 0) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1317
 * XL_BUS_TYPE_J1708    = _XL_BUS_TYPE_J1708
 * XL_BUS_TYPE_ETHERNET = _XL_BUS_TYPE_ETHERNET
 * XL_BUS_TYPE_A429     = _XL_BUS_TYPE_A429             # <<<<<<<<<<<<<<
 * 
 * # interface version for our events
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_TYPE_A429); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_TYPE_A429, __pyx_t_2) < 0) __PYX_ERR(0, 1317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1320
 * 
 * # interface version for our events
 * XL_INTERFACE_VERSION_V2 = _XL_INTERFACE_VERSION_V2             # <<<<<<<<<<<<<<
 * XL_INTERFACE_VERSION_V3 = _XL_INTERFACE_VERSION_V3
 * XL_INTERFACE_VERSION_V4 = _XL_INTERFACE_VERSION_V4 # for MOST,CAN FD, Ethernet, FlexRay, ARINC429
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_INTERFACE_VERSION_V2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_INTERFACE_VERSION_V2, __pyx_t_2) < 0) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1321
 * # interface version for our events
 * XL_INTERFACE_VERSION_V2 = _XL_INTERFACE_VERSION_V2
 * XL_INTERFACE_VERSION_V3 = _XL_INTERFACE_VERSION_V3             # <<<<<<<<<<<<<<
 * XL_INTERFACE_VERSION_V4 = _XL_INTERFACE_VERSION_V4 # for MOST,CAN FD, Ethernet, FlexRay, ARINC429
 * XL_INTERFACE_VERSION    = _XL_INTERFACE_VERSION       # forCAN, LIN, DAIO.
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_INTERFACE_VERSION_V3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_INTERFACE_VERSION_V3, __pyx_t_2) < 0) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1322
 * XL_INTERFACE_VERSION_V2 = _XL_INTERFACE_VERSION_V2
 * XL_INTERFACE_VERSION_V3 = _XL_INTERFACE_VERSION_V3
 * XL_INTERFACE_VERSION_V4 = _XL_INTERFACE_VERSION_V4 # for MOST,CAN FD, Ethernet, FlexRay, ARINC429             # <<<<<<<<<<<<<<
 * XL_INTERFACE_VERSION    = _XL_INTERFACE_VERSION       # forCAN, LIN, DAIO.
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_INTERFACE_VERSION_V4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_INTERFACE_VERSION_V4, __pyx_t_2) < 0) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1323
 * XL_INTERFACE_VERSION_V3 = _XL_INTERFACE_VERSION_V3
 * XL_INTERFACE_VERSION_V4 = _XL_INTERFACE_VERSION_V4 # for MOST,CAN FD, Ethernet, FlexRay, ARINC429
 * XL_INTERFACE_VERSION    = _XL_INTERFACE_VERSION       # forCAN, LIN, DAIO.             # <<<<<<<<<<<<<<
 * 
 * # porthandle
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_INTERFACE_VERSION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_INTERFACE_VERSION, __pyx_t_2) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1326
 * 
 * # porthandle
 * XL_INVALID_PORTHANDLE = _XL_INVALID_PORTHANDLE             # <<<<<<<<<<<<<<
 * 
 * # defines for XLbusParams::data::can/canFD::canOpMode
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_INVALID_PORTHANDLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_INVALID_PORTHANDLE, __pyx_t_2) < 0) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1329
 * 
 * # defines for XLbusParams::data::can/canFD::canOpMode
 * XL_BUS_PARAMS_CANOPMODE_CAN20 = _XL_BUS_PARAMS_CANOPMODE_CAN20             # <<<<<<<<<<<<<<
 * XL_BUS_PARAMS_CANOPMODE_CANFD = _XL_BUS_PARAMS_CANOPMODE_CANFD
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_PARAMS_CANOPMODE_CAN20); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CAN20, __pyx_t_2) < 0) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1330
 * # defines for XLbusParams::data::can/canFD::canOpMode
 * XL_BUS_PARAMS_CANOPMODE_CAN20 = _XL_BUS_PARAMS_CANOPMODE_CAN20
 * XL_BUS_PARAMS_CANOPMODE_CANFD = _XL_BUS_PARAMS_CANOPMODE_CANFD             # <<<<<<<<<<<<<<
 * 
 * # ARINC429 types and definitions
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_BUS_PARAMS_CANOPMODE_CANFD); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_BUS_PARAMS_CANOPMODE_CANFD, __pyx_t_2) < 0) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1333
 * 
 * # ARINC429 types and definitions
 * XL_A429_MSG_CHANNEL_DIR_TX = _XL_A429_MSG_CHANNEL_DIR_TX             # <<<<<<<<<<<<<<
 * XL_A429_MSG_CHANNEL_DIR_RX = _XL_A429_MSG_CHANNEL_DIR_RX
 * XL_A429_MSG_BITRATE_SLOW_MIN = _XL_A429_MSG_BITRATE_SLOW_MIN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_CHANNEL_DIR_TX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_CHANNEL_DIR_TX, __pyx_t_2) < 0) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1334
 * # ARINC429 types and definitions
 * XL_A429_MSG_CHANNEL_DIR_TX = _XL_A429_MSG_CHANNEL_DIR_TX
 * XL_A429_MSG_CHANNEL_DIR_RX = _XL_A429_MSG_CHANNEL_DIR_RX             # <<<<<<<<<<<<<<
 * XL_A429_MSG_BITRATE_SLOW_MIN = _XL_A429_MSG_BITRATE_SLOW_MIN
 * XL_A429_MSG_BITRATE_SLOW_MAX = _XL_A429_MSG_BITRATE_SLOW_MAX
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_CHANNEL_DIR_RX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_CHANNEL_DIR_RX, __pyx_t_2) < 0) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1335
 * XL_A429_MSG_CHANNEL_DIR_TX = _XL_A429_MSG_CHANNEL_DIR_TX
 * XL_A429_MSG_CHANNEL_DIR_RX = _XL_A429_MSG_CHANNEL_DIR_RX
 * XL_A429_MSG_BITRATE_SLOW_MIN = _XL_A429_MSG_BITRATE_SLOW_MIN             # <<<<<<<<<<<<<<
 * XL_A429_MSG_BITRATE_SLOW_MAX = _XL_A429_MSG_BITRATE_SLOW_MAX
 * XL_A429_MSG_BITRATE_FAST_MIN = _XL_A429_MSG_BITRATE_FAST_MIN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_BITRATE_SLOW_MIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MIN, __pyx_t_2) < 0) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1336
 * XL_A429_MSG_CHANNEL_DIR_RX = _XL_A429_MSG_CHANNEL_DIR_RX
 * XL_A429_MSG_BITRATE_SLOW_MIN = _XL_A429_MSG_BITRATE_SLOW_MIN
 * XL_A429_MSG_BITRATE_SLOW_MAX = _XL_A429_MSG_BITRATE_SLOW_MAX             # <<<<<<<<<<<<<<
 * XL_A429_MSG_BITRATE_FAST_MIN = _XL_A429_MSG_BITRATE_FAST_MIN
 * XL_A429_MSG_BITRATE_FAST_MAX = _XL_A429_MSG_BITRATE_FAST_MAX
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_BITRATE_SLOW_MAX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_BITRATE_SLOW_MAX, __pyx_t_2) < 0) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1337
 * XL_A429_MSG_BITRATE_SLOW_MIN = _XL_A429_MSG_BITRATE_SLOW_MIN
 * XL_A429_MSG_BITRATE_SLOW_MAX = _XL_A429_MSG_BITRATE_SLOW_MAX
 * XL_A429_MSG_BITRATE_FAST_MIN = _XL_A429_MSG_BITRATE_FAST_MIN             # <<<<<<<<<<<<<<
 * XL_A429_MSG_BITRATE_FAST_MAX = _XL_A429_MSG_BITRATE_FAST_MAX
 * XL_A429_MSG_GAP_4BIT = _XL_A429_MSG_GAP_4BIT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_BITRATE_FAST_MIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_BITRATE_FAST_MIN, __pyx_t_2) < 0) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1338
 * XL_A429_MSG_BITRATE_SLOW_MAX = _XL_A429_MSG_BITRATE_SLOW_MAX
 * XL_A429_MSG_BITRATE_FAST_MIN = _XL_A429_MSG_BITRATE_FAST_MIN
 * XL_A429_MSG_BITRATE_FAST_MAX = _XL_A429_MSG_BITRATE_FAST_MAX             # <<<<<<<<<<<<<<
 * XL_A429_MSG_GAP_4BIT = _XL_A429_MSG_GAP_4BIT
 * XL_A429_MSG_BITRATE_RX_MIN = _XL_A429_MSG_BITRATE_RX_MIN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_BITRATE_FAST_MAX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_BITRATE_FAST_MAX, __pyx_t_2) < 0) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1339
 * XL_A429_MSG_BITRATE_FAST_MIN = _XL_A429_MSG_BITRATE_FAST_MIN
 * XL_A429_MSG_BITRATE_FAST_MAX = _XL_A429_MSG_BITRATE_FAST_MAX
 * XL_A429_MSG_GAP_4BIT = _XL_A429_MSG_GAP_4BIT             # <<<<<<<<<<<<<<
 * XL_A429_MSG_BITRATE_RX_MIN = _XL_A429_MSG_BITRATE_RX_MIN
 * XL_A429_MSG_BITRATE_RX_MAX = _XL_A429_MSG_BITRATE_RX_MAX
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_GAP_4BIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_GAP_4BIT, __pyx_t_2) < 0) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1340
 * XL_A429_MSG_BITRATE_FAST_MAX = _XL_A429_MSG_BITRATE_FAST_MAX
 * XL_A429_MSG_GAP_4BIT = _XL_A429_MSG_GAP_4BIT
 * XL_A429_MSG_BITRATE_RX_MIN = _XL_A429_MSG_BITRATE_RX_MIN             # <<<<<<<<<<<<<<
 * XL_A429_MSG_BITRATE_RX_MAX = _XL_A429_MSG_BITRATE_RX_MAX
 * XL_A429_MSG_AUTO_BAUDRATE_DISABLED = _XL_A429_MSG_AUTO_BAUDRATE_DISABLED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_BITRATE_RX_MIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_BITRATE_RX_MIN, __pyx_t_2) < 0) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1341
 * XL_A429_MSG_GAP_4BIT = _XL_A429_MSG_GAP_4BIT
 * XL_A429_MSG_BITRATE_RX_MIN = _XL_A429_MSG_BITRATE_RX_MIN
 * XL_A429_MSG_BITRATE_RX_MAX = _XL_A429_MSG_BITRATE_RX_MAX             # <<<<<<<<<<<<<<
 * XL_A429_MSG_AUTO_BAUDRATE_DISABLED = _XL_A429_MSG_AUTO_BAUDRATE_DISABLED
 * XL_A429_MSG_AUTO_BAUDRATE_ENABLED = _XL_A429_MSG_AUTO_BAUDRATE_ENABLED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_BITRATE_RX_MAX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_BITRATE_RX_MAX, __pyx_t_2) < 0) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1342
 * XL_A429_MSG_BITRATE_RX_MIN = _XL_A429_MSG_BITRATE_RX_MIN
 * XL_A429_MSG_BITRATE_RX_MAX = _XL_A429_MSG_BITRATE_RX_MAX
 * XL_A429_MSG_AUTO_BAUDRATE_DISABLED = _XL_A429_MSG_AUTO_BAUDRATE_DISABLED             # <<<<<<<<<<<<<<
 * XL_A429_MSG_AUTO_BAUDRATE_ENABLED = _XL_A429_MSG_AUTO_BAUDRATE_ENABLED
 * XL_A429_MSG_FLAG_ON_REQUEST = _XL_A429_MSG_FLAG_ON_REQUEST
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_AUTO_BAUDRATE_DISABLED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_DISABL, __pyx_t_2) < 0) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1343
 * XL_A429_MSG_BITRATE_RX_MAX = _XL_A429_MSG_BITRATE_RX_MAX
 * XL_A429_MSG_AUTO_BAUDRATE_DISABLED = _XL_A429_MSG_AUTO_BAUDRATE_DISABLED
 * XL_A429_MSG_AUTO_BAUDRATE_ENABLED = _XL_A429_MSG_AUTO_BAUDRATE_ENABLED             # <<<<<<<<<<<<<<
 * XL_A429_MSG_FLAG_ON_REQUEST = _XL_A429_MSG_FLAG_ON_REQUEST
 * XL_A429_MSG_FLAG_CYCLIC = _XL_A429_MSG_FLAG_CYCLIC
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_AUTO_BAUDRATE_ENABLED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_AUTO_BAUDRATE_ENABLE, __pyx_t_2) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1344
 * XL_A429_MSG_AUTO_BAUDRATE_DISABLED = _XL_A429_MSG_AUTO_BAUDRATE_DISABLED
 * XL_A429_MSG_AUTO_BAUDRATE_ENABLED = _XL_A429_MSG_AUTO_BAUDRATE_ENABLED
 * XL_A429_MSG_FLAG_ON_REQUEST = _XL_A429_MSG_FLAG_ON_REQUEST             # <<<<<<<<<<<<<<
 * XL_A429_MSG_FLAG_CYCLIC = _XL_A429_MSG_FLAG_CYCLIC
 * XL_A429_MSG_FLAG_DELETE_CYCLIC = _XL_A429_MSG_FLAG_DELETE_CYCLIC
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_FLAG_ON_REQUEST); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_FLAG_ON_REQUEST, __pyx_t_2) < 0) __PYX_ERR(0, 1344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1345
 * XL_A429_MSG_AUTO_BAUDRATE_ENABLED = _XL_A429_MSG_AUTO_BAUDRATE_ENABLED
 * XL_A429_MSG_FLAG_ON_REQUEST = _XL_A429_MSG_FLAG_ON_REQUEST
 * XL_A429_MSG_FLAG_CYCLIC = _XL_A429_MSG_FLAG_CYCLIC             # <<<<<<<<<<<<<<
 * XL_A429_MSG_FLAG_DELETE_CYCLIC = _XL_A429_MSG_FLAG_DELETE_CYCLIC
 * XL_A429_MSG_CYCLE_MAX = _XL_A429_MSG_CYCLE_MAX
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_FLAG_CYCLIC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_FLAG_CYCLIC, __pyx_t_2) < 0) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1346
 * XL_A429_MSG_FLAG_ON_REQUEST = _XL_A429_MSG_FLAG_ON_REQUEST
 * XL_A429_MSG_FLAG_CYCLIC = _XL_A429_MSG_FLAG_CYCLIC
 * XL_A429_MSG_FLAG_DELETE_CYCLIC = _XL_A429_MSG_FLAG_DELETE_CYCLIC             # <<<<<<<<<<<<<<
 * XL_A429_MSG_CYCLE_MAX = _XL_A429_MSG_CYCLE_MAX
 * XL_A429_MSG_GAP_DEFAULT = _XL_A429_MSG_GAP_DEFAULT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_FLAG_DELETE_CYCLIC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_FLAG_DELETE_CYCLIC, __pyx_t_2) < 0) __PYX_ERR(0, 1346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1347
 * XL_A429_MSG_FLAG_CYCLIC = _XL_A429_MSG_FLAG_CYCLIC
 * XL_A429_MSG_FLAG_DELETE_CYCLIC = _XL_A429_MSG_FLAG_DELETE_CYCLIC
 * XL_A429_MSG_CYCLE_MAX = _XL_A429_MSG_CYCLE_MAX             # <<<<<<<<<<<<<<
 * XL_A429_MSG_GAP_DEFAULT = _XL_A429_MSG_GAP_DEFAULT
 * XL_A429_MSG_GAP_MAX = _XL_A429_MSG_GAP_MAX
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_CYCLE_MAX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_CYCLE_MAX, __pyx_t_2) < 0) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1348
 * XL_A429_MSG_FLAG_DELETE_CYCLIC = _XL_A429_MSG_FLAG_DELETE_CYCLIC
 * XL_A429_MSG_CYCLE_MAX = _XL_A429_MSG_CYCLE_MAX
 * XL_A429_MSG_GAP_DEFAULT = _XL_A429_MSG_GAP_DEFAULT             # <<<<<<<<<<<<<<
 * XL_A429_MSG_GAP_MAX = _XL_A429_MSG_GAP_MAX
 * XL_A429_MSG_PARITY_DEFAULT = _XL_A429_MSG_PARITY_DEFAULT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_GAP_DEFAULT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_GAP_DEFAULT, __pyx_t_2) < 0) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1349
 * XL_A429_MSG_CYCLE_MAX = _XL_A429_MSG_CYCLE_MAX
 * XL_A429_MSG_GAP_DEFAULT = _XL_A429_MSG_GAP_DEFAULT
 * XL_A429_MSG_GAP_MAX = _XL_A429_MSG_GAP_MAX             # <<<<<<<<<<<<<<
 * XL_A429_MSG_PARITY_DEFAULT = _XL_A429_MSG_PARITY_DEFAULT
 * XL_A429_MSG_PARITY_DISABLED = _XL_A429_MSG_PARITY_DISABLED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_GAP_MAX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_GAP_MAX, __pyx_t_2) < 0) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1350
 * XL_A429_MSG_GAP_DEFAULT = _XL_A429_MSG_GAP_DEFAULT
 * XL_A429_MSG_GAP_MAX = _XL_A429_MSG_GAP_MAX
 * XL_A429_MSG_PARITY_DEFAULT = _XL_A429_MSG_PARITY_DEFAULT             # <<<<<<<<<<<<<<
 * XL_A429_MSG_PARITY_DISABLED = _XL_A429_MSG_PARITY_DISABLED
 * XL_A429_MSG_PARITY_ODD = _XL_A429_MSG_PARITY_ODD
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_PARITY_DEFAULT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_PARITY_DEFAULT, __pyx_t_2) < 0) __PYX_ERR(0, 1350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1351
 * XL_A429_MSG_GAP_MAX = _XL_A429_MSG_GAP_MAX
 * XL_A429_MSG_PARITY_DEFAULT = _XL_A429_MSG_PARITY_DEFAULT
 * XL_A429_MSG_PARITY_DISABLED = _XL_A429_MSG_PARITY_DISABLED             # <<<<<<<<<<<<<<
 * XL_A429_MSG_PARITY_ODD = _XL_A429_MSG_PARITY_ODD
 * XL_A429_MSG_PARITY_EVEN = _XL_A429_MSG_PARITY_EVEN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_PARITY_DISABLED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_PARITY_DISABLED, __pyx_t_2) < 0) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1352
 * XL_A429_MSG_PARITY_DEFAULT = _XL_A429_MSG_PARITY_DEFAULT
 * XL_A429_MSG_PARITY_DISABLED = _XL_A429_MSG_PARITY_DISABLED
 * XL_A429_MSG_PARITY_ODD = _XL_A429_MSG_PARITY_ODD             # <<<<<<<<<<<<<<
 * XL_A429_MSG_PARITY_EVEN = _XL_A429_MSG_PARITY_EVEN
 * XL_A429_EV_TX_MSG_CTRL_ON_REQUEST = _XL_A429_EV_TX_MSG_CTRL_ON_REQUEST
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_PARITY_ODD); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_PARITY_ODD, __pyx_t_2) < 0) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1353
 * XL_A429_MSG_PARITY_DISABLED = _XL_A429_MSG_PARITY_DISABLED
 * XL_A429_MSG_PARITY_ODD = _XL_A429_MSG_PARITY_ODD
 * XL_A429_MSG_PARITY_EVEN = _XL_A429_MSG_PARITY_EVEN             # <<<<<<<<<<<<<<
 * XL_A429_EV_TX_MSG_CTRL_ON_REQUEST = _XL_A429_EV_TX_MSG_CTRL_ON_REQUEST
 * XL_A429_EV_TX_MSG_CTRL_CYCLIC = _XL_A429_EV_TX_MSG_CTRL_CYCLIC
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_MSG_PARITY_EVEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_MSG_PARITY_EVEN, __pyx_t_2) < 0) __PYX_ERR(0, 1353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1354
 * XL_A429_MSG_PARITY_ODD = _XL_A429_MSG_PARITY_ODD
 * XL_A429_MSG_PARITY_EVEN = _XL_A429_MSG_PARITY_EVEN
 * XL_A429_EV_TX_MSG_CTRL_ON_REQUEST = _XL_A429_EV_TX_MSG_CTRL_ON_REQUEST             # <<<<<<<<<<<<<<
 * XL_A429_EV_TX_MSG_CTRL_CYCLIC = _XL_A429_EV_TX_MSG_CTRL_CYCLIC
 * XL_A429_EV_TX_ERROR_ACCESS_DENIED = _XL_A429_EV_TX_ERROR_ACCESS_DENIED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_TX_MSG_CTRL_ON_REQUEST); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_TX_MSG_CTRL_ON_REQUES, __pyx_t_2) < 0) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1355
 * XL_A429_MSG_PARITY_EVEN = _XL_A429_MSG_PARITY_EVEN
 * XL_A429_EV_TX_MSG_CTRL_ON_REQUEST = _XL_A429_EV_TX_MSG_CTRL_ON_REQUEST
 * XL_A429_EV_TX_MSG_CTRL_CYCLIC = _XL_A429_EV_TX_MSG_CTRL_CYCLIC             # <<<<<<<<<<<<<<
 * XL_A429_EV_TX_ERROR_ACCESS_DENIED = _XL_A429_EV_TX_ERROR_ACCESS_DENIED
 * XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR = _XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_TX_MSG_CTRL_CYCLIC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_TX_MSG_CTRL_CYCLIC, __pyx_t_2) < 0) __PYX_ERR(0, 1355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1356
 * XL_A429_EV_TX_MSG_CTRL_ON_REQUEST = _XL_A429_EV_TX_MSG_CTRL_ON_REQUEST
 * XL_A429_EV_TX_MSG_CTRL_CYCLIC = _XL_A429_EV_TX_MSG_CTRL_CYCLIC
 * XL_A429_EV_TX_ERROR_ACCESS_DENIED = _XL_A429_EV_TX_ERROR_ACCESS_DENIED             # <<<<<<<<<<<<<<
 * XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR = _XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR
 * XL_A429_EV_RX_ERROR_GAP_VIOLATION = _XL_A429_EV_RX_ERROR_GAP_VIOLATION
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_TX_ERROR_ACCESS_DENIED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_TX_ERROR_ACCESS_DENIE, __pyx_t_2) < 0) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1357
 * XL_A429_EV_TX_MSG_CTRL_CYCLIC = _XL_A429_EV_TX_MSG_CTRL_CYCLIC
 * XL_A429_EV_TX_ERROR_ACCESS_DENIED = _XL_A429_EV_TX_ERROR_ACCESS_DENIED
 * XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR = _XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR             # <<<<<<<<<<<<<<
 * XL_A429_EV_RX_ERROR_GAP_VIOLATION = _XL_A429_EV_RX_ERROR_GAP_VIOLATION
 * XL_A429_EV_RX_ERROR_PARITY = _XL_A429_EV_RX_ERROR_PARITY
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_TX_ERROR_TRANSMISSION, __pyx_t_2) < 0) __PYX_ERR(0, 1357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1358
 * XL_A429_EV_TX_ERROR_ACCESS_DENIED = _XL_A429_EV_TX_ERROR_ACCESS_DENIED
 * XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR = _XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR
 * XL_A429_EV_RX_ERROR_GAP_VIOLATION = _XL_A429_EV_RX_ERROR_GAP_VIOLATION             # <<<<<<<<<<<<<<
 * XL_A429_EV_RX_ERROR_PARITY = _XL_A429_EV_RX_ERROR_PARITY
 * XL_A429_EV_RX_ERROR_BITRATE_LOW = _XL_A429_EV_RX_ERROR_BITRATE_LOW
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_RX_ERROR_GAP_VIOLATION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_RX_ERROR_GAP_VIOLATIO, __pyx_t_2) < 0) __PYX_ERR(0, 1358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1359
 * XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR = _XL_A429_EV_TX_ERROR_TRANSMISSION_ERROR
 * XL_A429_EV_RX_ERROR_GAP_VIOLATION = _XL_A429_EV_RX_ERROR_GAP_VIOLATION
 * XL_A429_EV_RX_ERROR_PARITY = _XL_A429_EV_RX_ERROR_PARITY             # <<<<<<<<<<<<<<
 * XL_A429_EV_RX_ERROR_BITRATE_LOW = _XL_A429_EV_RX_ERROR_BITRATE_LOW
 * XL_A429_EV_RX_ERROR_BITRATE_HIGH = _XL_A429_EV_RX_ERROR_BITRATE_HIGH
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_RX_ERROR_PARITY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_RX_ERROR_PARITY, __pyx_t_2) < 0) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1360
 * XL_A429_EV_RX_ERROR_GAP_VIOLATION = _XL_A429_EV_RX_ERROR_GAP_VIOLATION
 * XL_A429_EV_RX_ERROR_PARITY = _XL_A429_EV_RX_ERROR_PARITY
 * XL_A429_EV_RX_ERROR_BITRATE_LOW = _XL_A429_EV_RX_ERROR_BITRATE_LOW             # <<<<<<<<<<<<<<
 * XL_A429_EV_RX_ERROR_BITRATE_HIGH = _XL_A429_EV_RX_ERROR_BITRATE_HIGH
 * XL_A429_EV_RX_ERROR_FRAME_FORMAT = _XL_A429_EV_RX_ERROR_FRAME_FORMAT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_RX_ERROR_BITRATE_LOW); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_LOW, __pyx_t_2) < 0) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1361
 * XL_A429_EV_RX_ERROR_PARITY = _XL_A429_EV_RX_ERROR_PARITY
 * XL_A429_EV_RX_ERROR_BITRATE_LOW = _XL_A429_EV_RX_ERROR_BITRATE_LOW
 * XL_A429_EV_RX_ERROR_BITRATE_HIGH = _XL_A429_EV_RX_ERROR_BITRATE_HIGH             # <<<<<<<<<<<<<<
 * XL_A429_EV_RX_ERROR_FRAME_FORMAT = _XL_A429_EV_RX_ERROR_FRAME_FORMAT
 * XL_A429_EV_RX_ERROR_CODING_RZ = _XL_A429_EV_RX_ERROR_CODING_RZ
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_RX_ERROR_BITRATE_HIGH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_RX_ERROR_BITRATE_HIGH, __pyx_t_2) < 0) __PYX_ERR(0, 1361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1362
 * XL_A429_EV_RX_ERROR_BITRATE_LOW = _XL_A429_EV_RX_ERROR_BITRATE_LOW
 * XL_A429_EV_RX_ERROR_BITRATE_HIGH = _XL_A429_EV_RX_ERROR_BITRATE_HIGH
 * XL_A429_EV_RX_ERROR_FRAME_FORMAT = _XL_A429_EV_RX_ERROR_FRAME_FORMAT             # <<<<<<<<<<<<<<
 * XL_A429_EV_RX_ERROR_CODING_RZ = _XL_A429_EV_RX_ERROR_CODING_RZ
 * XL_A429_EV_RX_ERROR_DUTY_FACTOR = _XL_A429_EV_RX_ERROR_DUTY_FACTOR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_RX_ERROR_FRAME_FORMAT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_RX_ERROR_FRAME_FORMAT, __pyx_t_2) < 0) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1363
 * XL_A429_EV_RX_ERROR_BITRATE_HIGH = _XL_A429_EV_RX_ERROR_BITRATE_HIGH
 * XL_A429_EV_RX_ERROR_FRAME_FORMAT = _XL_A429_EV_RX_ERROR_FRAME_FORMAT
 * XL_A429_EV_RX_ERROR_CODING_RZ = _XL_A429_EV_RX_ERROR_CODING_RZ             # <<<<<<<<<<<<<<
 * XL_A429_EV_RX_ERROR_DUTY_FACTOR = _XL_A429_EV_RX_ERROR_DUTY_FACTOR
 * XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH = _XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_RX_ERROR_CODING_RZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_RX_ERROR_CODING_RZ, __pyx_t_2) < 0) __PYX_ERR(0, 1363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1364
 * XL_A429_EV_RX_ERROR_FRAME_FORMAT = _XL_A429_EV_RX_ERROR_FRAME_FORMAT
 * XL_A429_EV_RX_ERROR_CODING_RZ = _XL_A429_EV_RX_ERROR_CODING_RZ
 * XL_A429_EV_RX_ERROR_DUTY_FACTOR = _XL_A429_EV_RX_ERROR_DUTY_FACTOR             # <<<<<<<<<<<<<<
 * XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH = _XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH
 * XL_A429_QUEUE_OVERFLOW = _XL_A429_QUEUE_OVERFLOW
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_RX_ERROR_DUTY_FACTOR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_RX_ERROR_DUTY_FACTOR, __pyx_t_2) < 0) __PYX_ERR(0, 1364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1365
 * XL_A429_EV_RX_ERROR_CODING_RZ = _XL_A429_EV_RX_ERROR_CODING_RZ
 * XL_A429_EV_RX_ERROR_DUTY_FACTOR = _XL_A429_EV_RX_ERROR_DUTY_FACTOR
 * XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH = _XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH             # <<<<<<<<<<<<<<
 * XL_A429_QUEUE_OVERFLOW = _XL_A429_QUEUE_OVERFLOW
 * XL_A429_RX_FIFO_QUEUE_SIZE_MAX = _XL_A429_RX_FIFO_QUEUE_SIZE_MAX
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_EV_RX_ERROR_AVG_BIT_LENG, __pyx_t_2) < 0) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1366
 * XL_A429_EV_RX_ERROR_DUTY_FACTOR = _XL_A429_EV_RX_ERROR_DUTY_FACTOR
 * XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH = _XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH
 * XL_A429_QUEUE_OVERFLOW = _XL_A429_QUEUE_OVERFLOW             # <<<<<<<<<<<<<<
 * XL_A429_RX_FIFO_QUEUE_SIZE_MAX = _XL_A429_RX_FIFO_QUEUE_SIZE_MAX
 * XL_A429_RX_FIFO_QUEUE_SIZE_MIN = _XL_A429_RX_FIFO_QUEUE_SIZE_MIN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_QUEUE_OVERFLOW); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_QUEUE_OVERFLOW, __pyx_t_2) < 0) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1367
 * XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH = _XL_A429_EV_RX_ERROR_AVG_BIT_LENGTH
 * XL_A429_QUEUE_OVERFLOW = _XL_A429_QUEUE_OVERFLOW
 * XL_A429_RX_FIFO_QUEUE_SIZE_MAX = _XL_A429_RX_FIFO_QUEUE_SIZE_MAX             # <<<<<<<<<<<<<<
 * XL_A429_RX_FIFO_QUEUE_SIZE_MIN = _XL_A429_RX_FIFO_QUEUE_SIZE_MIN
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_RX_FIFO_QUEUE_SIZE_MAX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MAX, __pyx_t_2) < 0) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1368
 * XL_A429_QUEUE_OVERFLOW = _XL_A429_QUEUE_OVERFLOW
 * XL_A429_RX_FIFO_QUEUE_SIZE_MAX = _XL_A429_RX_FIFO_QUEUE_SIZE_MAX
 * XL_A429_RX_FIFO_QUEUE_SIZE_MIN = _XL_A429_RX_FIFO_QUEUE_SIZE_MIN             # <<<<<<<<<<<<<<
 * 
 * # driver status
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_A429_RX_FIFO_QUEUE_SIZE_MIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_A429_RX_FIFO_QUEUE_SIZE_MIN, __pyx_t_2) < 0) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1371
 * 
 * # driver status
 * XL_SUCCESS                       = _XL_SUCCESS             # <<<<<<<<<<<<<<
 * XL_PENDING                       = _XL_PENDING
 * XL_ERR_QUEUE_IS_EMPTY            = _XL_ERR_QUEUE_IS_EMPTY
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_SUCCESS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_SUCCESS, __pyx_t_2) < 0) __PYX_ERR(0, 1371, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1372
 * # driver status
 * XL_SUCCESS                       = _XL_SUCCESS
 * XL_PENDING                       = _XL_PENDING             # <<<<<<<<<<<<<<
 * XL_ERR_QUEUE_IS_EMPTY            = _XL_ERR_QUEUE_IS_EMPTY
 * XL_ERR_QUEUE_IS_FULL             = _XL_ERR_QUEUE_IS_FULL
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_PENDING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_PENDING, __pyx_t_2) < 0) __PYX_ERR(0, 1372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1373
 * XL_SUCCESS                       = _XL_SUCCESS
 * XL_PENDING                       = _XL_PENDING
 * XL_ERR_QUEUE_IS_EMPTY            = _XL_ERR_QUEUE_IS_EMPTY             # <<<<<<<<<<<<<<
 * XL_ERR_QUEUE_IS_FULL             = _XL_ERR_QUEUE_IS_FULL
 * XL_ERR_TX_NOT_POSSIBLE           = _XL_ERR_TX_NOT_POSSIBLE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_QUEUE_IS_EMPTY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_QUEUE_IS_EMPTY, __pyx_t_2) < 0) __PYX_ERR(0, 1373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1374
 * XL_PENDING                       = _XL_PENDING
 * XL_ERR_QUEUE_IS_EMPTY            = _XL_ERR_QUEUE_IS_EMPTY
 * XL_ERR_QUEUE_IS_FULL             = _XL_ERR_QUEUE_IS_FULL             # <<<<<<<<<<<<<<
 * XL_ERR_TX_NOT_POSSIBLE           = _XL_ERR_TX_NOT_POSSIBLE
 * XL_ERR_NO_LICENSE                = _XL_ERR_NO_LICENSE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_QUEUE_IS_FULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_QUEUE_IS_FULL, __pyx_t_2) < 0) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1375
 * XL_ERR_QUEUE_IS_EMPTY            = _XL_ERR_QUEUE_IS_EMPTY
 * XL_ERR_QUEUE_IS_FULL             = _XL_ERR_QUEUE_IS_FULL
 * XL_ERR_TX_NOT_POSSIBLE           = _XL_ERR_TX_NOT_POSSIBLE             # <<<<<<<<<<<<<<
 * XL_ERR_NO_LICENSE                = _XL_ERR_NO_LICENSE
 * XL_ERR_WRONG_PARAMETER           = _XL_ERR_WRONG_PARAMETER
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_TX_NOT_POSSIBLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_TX_NOT_POSSIBLE, __pyx_t_2) < 0) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1376
 * XL_ERR_QUEUE_IS_FULL             = _XL_ERR_QUEUE_IS_FULL
 * XL_ERR_TX_NOT_POSSIBLE           = _XL_ERR_TX_NOT_POSSIBLE
 * XL_ERR_NO_LICENSE                = _XL_ERR_NO_LICENSE             # <<<<<<<<<<<<<<
 * XL_ERR_WRONG_PARAMETER           = _XL_ERR_WRONG_PARAMETER
 * XL_ERR_TWICE_REGISTER            = _XL_ERR_TWICE_REGISTER
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_NO_LICENSE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_NO_LICENSE, __pyx_t_2) < 0) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1377
 * XL_ERR_TX_NOT_POSSIBLE           = _XL_ERR_TX_NOT_POSSIBLE
 * XL_ERR_NO_LICENSE                = _XL_ERR_NO_LICENSE
 * XL_ERR_WRONG_PARAMETER           = _XL_ERR_WRONG_PARAMETER             # <<<<<<<<<<<<<<
 * XL_ERR_TWICE_REGISTER            = _XL_ERR_TWICE_REGISTER
 * XL_ERR_INVALID_CHAN_INDEX        = _XL_ERR_INVALID_CHAN_INDEX
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_WRONG_PARAMETER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_WRONG_PARAMETER, __pyx_t_2) < 0) __PYX_ERR(0, 1377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1378
 * XL_ERR_NO_LICENSE                = _XL_ERR_NO_LICENSE
 * XL_ERR_WRONG_PARAMETER           = _XL_ERR_WRONG_PARAMETER
 * XL_ERR_TWICE_REGISTER            = _XL_ERR_TWICE_REGISTER             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_CHAN_INDEX        = _XL_ERR_INVALID_CHAN_INDEX
 * XL_ERR_INVALID_ACCESS            = _XL_ERR_INVALID_ACCESS
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_TWICE_REGISTER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_TWICE_REGISTER, __pyx_t_2) < 0) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1379
 * XL_ERR_WRONG_PARAMETER           = _XL_ERR_WRONG_PARAMETER
 * XL_ERR_TWICE_REGISTER            = _XL_ERR_TWICE_REGISTER
 * XL_ERR_INVALID_CHAN_INDEX        = _XL_ERR_INVALID_CHAN_INDEX             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_ACCESS            = _XL_ERR_INVALID_ACCESS
 * XL_ERR_PORT_IS_OFFLINE           = _XL_ERR_PORT_IS_OFFLINE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_CHAN_INDEX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_CHAN_INDEX, __pyx_t_2) < 0) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1380
 * XL_ERR_TWICE_REGISTER            = _XL_ERR_TWICE_REGISTER
 * XL_ERR_INVALID_CHAN_INDEX        = _XL_ERR_INVALID_CHAN_INDEX
 * XL_ERR_INVALID_ACCESS            = _XL_ERR_INVALID_ACCESS             # <<<<<<<<<<<<<<
 * XL_ERR_PORT_IS_OFFLINE           = _XL_ERR_PORT_IS_OFFLINE
 * XL_ERR_CHAN_IS_ONLINE            = _XL_ERR_CHAN_IS_ONLINE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_ACCESS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_ACCESS, __pyx_t_2) < 0) __PYX_ERR(0, 1380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1381
 * XL_ERR_INVALID_CHAN_INDEX        = _XL_ERR_INVALID_CHAN_INDEX
 * XL_ERR_INVALID_ACCESS            = _XL_ERR_INVALID_ACCESS
 * XL_ERR_PORT_IS_OFFLINE           = _XL_ERR_PORT_IS_OFFLINE             # <<<<<<<<<<<<<<
 * XL_ERR_CHAN_IS_ONLINE            = _XL_ERR_CHAN_IS_ONLINE
 * XL_ERR_NOT_IMPLEMENTED           = _XL_ERR_NOT_IMPLEMENTED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_PORT_IS_OFFLINE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_PORT_IS_OFFLINE, __pyx_t_2) < 0) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1382
 * XL_ERR_INVALID_ACCESS            = _XL_ERR_INVALID_ACCESS
 * XL_ERR_PORT_IS_OFFLINE           = _XL_ERR_PORT_IS_OFFLINE
 * XL_ERR_CHAN_IS_ONLINE            = _XL_ERR_CHAN_IS_ONLINE             # <<<<<<<<<<<<<<
 * XL_ERR_NOT_IMPLEMENTED           = _XL_ERR_NOT_IMPLEMENTED
 * XL_ERR_INVALID_PORT              = _XL_ERR_INVALID_PORT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_CHAN_IS_ONLINE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_CHAN_IS_ONLINE, __pyx_t_2) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1383
 * XL_ERR_PORT_IS_OFFLINE           = _XL_ERR_PORT_IS_OFFLINE
 * XL_ERR_CHAN_IS_ONLINE            = _XL_ERR_CHAN_IS_ONLINE
 * XL_ERR_NOT_IMPLEMENTED           = _XL_ERR_NOT_IMPLEMENTED             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_PORT              = _XL_ERR_INVALID_PORT
 * XL_ERR_HW_NOT_READY              = _XL_ERR_HW_NOT_READY
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_NOT_IMPLEMENTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_NOT_IMPLEMENTED, __pyx_t_2) < 0) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1384
 * XL_ERR_CHAN_IS_ONLINE            = _XL_ERR_CHAN_IS_ONLINE
 * XL_ERR_NOT_IMPLEMENTED           = _XL_ERR_NOT_IMPLEMENTED
 * XL_ERR_INVALID_PORT              = _XL_ERR_INVALID_PORT             # <<<<<<<<<<<<<<
 * XL_ERR_HW_NOT_READY              = _XL_ERR_HW_NOT_READY
 * XL_ERR_CMD_TIMEOUT               = _XL_ERR_CMD_TIMEOUT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_PORT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_PORT, __pyx_t_2) < 0) __PYX_ERR(0, 1384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1385
 * XL_ERR_NOT_IMPLEMENTED           = _XL_ERR_NOT_IMPLEMENTED
 * XL_ERR_INVALID_PORT              = _XL_ERR_INVALID_PORT
 * XL_ERR_HW_NOT_READY              = _XL_ERR_HW_NOT_READY             # <<<<<<<<<<<<<<
 * XL_ERR_CMD_TIMEOUT               = _XL_ERR_CMD_TIMEOUT
 * XL_ERR_CMD_HANDLING              = _XL_ERR_CMD_HANDLING
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_HW_NOT_READY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_HW_NOT_READY, __pyx_t_2) < 0) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1386
 * XL_ERR_INVALID_PORT              = _XL_ERR_INVALID_PORT
 * XL_ERR_HW_NOT_READY              = _XL_ERR_HW_NOT_READY
 * XL_ERR_CMD_TIMEOUT               = _XL_ERR_CMD_TIMEOUT             # <<<<<<<<<<<<<<
 * XL_ERR_CMD_HANDLING              = _XL_ERR_CMD_HANDLING
 * XL_ERR_HW_NOT_PRESENT            = _XL_ERR_HW_NOT_PRESENT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_CMD_TIMEOUT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_CMD_TIMEOUT, __pyx_t_2) < 0) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1387
 * XL_ERR_HW_NOT_READY              = _XL_ERR_HW_NOT_READY
 * XL_ERR_CMD_TIMEOUT               = _XL_ERR_CMD_TIMEOUT
 * XL_ERR_CMD_HANDLING              = _XL_ERR_CMD_HANDLING             # <<<<<<<<<<<<<<
 * XL_ERR_HW_NOT_PRESENT            = _XL_ERR_HW_NOT_PRESENT
 * XL_ERR_NOTIFY_ALREADY_ACTIVE     = _XL_ERR_NOTIFY_ALREADY_ACTIVE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_CMD_HANDLING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_CMD_HANDLING, __pyx_t_2) < 0) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1388
 * XL_ERR_CMD_TIMEOUT               = _XL_ERR_CMD_TIMEOUT
 * XL_ERR_CMD_HANDLING              = _XL_ERR_CMD_HANDLING
 * XL_ERR_HW_NOT_PRESENT            = _XL_ERR_HW_NOT_PRESENT             # <<<<<<<<<<<<<<
 * XL_ERR_NOTIFY_ALREADY_ACTIVE     = _XL_ERR_NOTIFY_ALREADY_ACTIVE
 * XL_ERR_INVALID_TAG               = _XL_ERR_INVALID_TAG
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_HW_NOT_PRESENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_HW_NOT_PRESENT, __pyx_t_2) < 0) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1389
 * XL_ERR_CMD_HANDLING              = _XL_ERR_CMD_HANDLING
 * XL_ERR_HW_NOT_PRESENT            = _XL_ERR_HW_NOT_PRESENT
 * XL_ERR_NOTIFY_ALREADY_ACTIVE     = _XL_ERR_NOTIFY_ALREADY_ACTIVE             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_TAG               = _XL_ERR_INVALID_TAG
 * XL_ERR_INVALID_RESERVED_FLD      = _XL_ERR_INVALID_RESERVED_FLD
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_NOTIFY_ALREADY_ACTIVE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_NOTIFY_ALREADY_ACTIVE, __pyx_t_2) < 0) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1390
 * XL_ERR_HW_NOT_PRESENT            = _XL_ERR_HW_NOT_PRESENT
 * XL_ERR_NOTIFY_ALREADY_ACTIVE     = _XL_ERR_NOTIFY_ALREADY_ACTIVE
 * XL_ERR_INVALID_TAG               = _XL_ERR_INVALID_TAG             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_RESERVED_FLD      = _XL_ERR_INVALID_RESERVED_FLD
 * XL_ERR_INVALID_SIZE              = _XL_ERR_INVALID_SIZE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_TAG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 1390, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1391
 * XL_ERR_NOTIFY_ALREADY_ACTIVE     = _XL_ERR_NOTIFY_ALREADY_ACTIVE
 * XL_ERR_INVALID_TAG               = _XL_ERR_INVALID_TAG
 * XL_ERR_INVALID_RESERVED_FLD      = _XL_ERR_INVALID_RESERVED_FLD             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_SIZE              = _XL_ERR_INVALID_SIZE
 * XL_ERR_INSUFFICIENT_BUFFER       = _XL_ERR_INSUFFICIENT_BUFFER
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_RESERVED_FLD); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_RESERVED_FLD, __pyx_t_2) < 0) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1392
 * XL_ERR_INVALID_TAG               = _XL_ERR_INVALID_TAG
 * XL_ERR_INVALID_RESERVED_FLD      = _XL_ERR_INVALID_RESERVED_FLD
 * XL_ERR_INVALID_SIZE              = _XL_ERR_INVALID_SIZE             # <<<<<<<<<<<<<<
 * XL_ERR_INSUFFICIENT_BUFFER       = _XL_ERR_INSUFFICIENT_BUFFER
 * XL_ERR_ERROR_CRC                 = _XL_ERR_ERROR_CRC
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_SIZE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_SIZE, __pyx_t_2) < 0) __PYX_ERR(0, 1392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1393
 * XL_ERR_INVALID_RESERVED_FLD      = _XL_ERR_INVALID_RESERVED_FLD
 * XL_ERR_INVALID_SIZE              = _XL_ERR_INVALID_SIZE
 * XL_ERR_INSUFFICIENT_BUFFER       = _XL_ERR_INSUFFICIENT_BUFFER             # <<<<<<<<<<<<<<
 * XL_ERR_ERROR_CRC                 = _XL_ERR_ERROR_CRC
 * XL_ERR_BAD_EXE_FORMAT            = _XL_ERR_BAD_EXE_FORMAT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INSUFFICIENT_BUFFER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INSUFFICIENT_BUFFER, __pyx_t_2) < 0) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1394
 * XL_ERR_INVALID_SIZE              = _XL_ERR_INVALID_SIZE
 * XL_ERR_INSUFFICIENT_BUFFER       = _XL_ERR_INSUFFICIENT_BUFFER
 * XL_ERR_ERROR_CRC                 = _XL_ERR_ERROR_CRC             # <<<<<<<<<<<<<<
 * XL_ERR_BAD_EXE_FORMAT            = _XL_ERR_BAD_EXE_FORMAT
 * XL_ERR_NO_SYSTEM_RESOURCES       = _XL_ERR_NO_SYSTEM_RESOURCES
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_ERROR_CRC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_ERROR_CRC, __pyx_t_2) < 0) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1395
 * XL_ERR_INSUFFICIENT_BUFFER       = _XL_ERR_INSUFFICIENT_BUFFER
 * XL_ERR_ERROR_CRC                 = _XL_ERR_ERROR_CRC
 * XL_ERR_BAD_EXE_FORMAT            = _XL_ERR_BAD_EXE_FORMAT             # <<<<<<<<<<<<<<
 * XL_ERR_NO_SYSTEM_RESOURCES       = _XL_ERR_NO_SYSTEM_RESOURCES
 * XL_ERR_NOT_FOUND                 = _XL_ERR_NOT_FOUND
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_BAD_EXE_FORMAT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_BAD_EXE_FORMAT, __pyx_t_2) < 0) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1396
 * XL_ERR_ERROR_CRC                 = _XL_ERR_ERROR_CRC
 * XL_ERR_BAD_EXE_FORMAT            = _XL_ERR_BAD_EXE_FORMAT
 * XL_ERR_NO_SYSTEM_RESOURCES       = _XL_ERR_NO_SYSTEM_RESOURCES             # <<<<<<<<<<<<<<
 * XL_ERR_NOT_FOUND                 = _XL_ERR_NOT_FOUND
 * XL_ERR_INVALID_ADDRESS           = _XL_ERR_INVALID_ADDRESS
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_NO_SYSTEM_RESOURCES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_NO_SYSTEM_RESOURCES, __pyx_t_2) < 0) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1397
 * XL_ERR_BAD_EXE_FORMAT            = _XL_ERR_BAD_EXE_FORMAT
 * XL_ERR_NO_SYSTEM_RESOURCES       = _XL_ERR_NO_SYSTEM_RESOURCES
 * XL_ERR_NOT_FOUND                 = _XL_ERR_NOT_FOUND             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_ADDRESS           = _XL_ERR_INVALID_ADDRESS
 * XL_ERR_REQ_NOT_ACCEP             = _XL_ERR_REQ_NOT_ACCEP
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_NOT_FOUND); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_NOT_FOUND, __pyx_t_2) < 0) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1398
 * XL_ERR_NO_SYSTEM_RESOURCES       = _XL_ERR_NO_SYSTEM_RESOURCES
 * XL_ERR_NOT_FOUND                 = _XL_ERR_NOT_FOUND
 * XL_ERR_INVALID_ADDRESS           = _XL_ERR_INVALID_ADDRESS             # <<<<<<<<<<<<<<
 * XL_ERR_REQ_NOT_ACCEP             = _XL_ERR_REQ_NOT_ACCEP
 * XL_ERR_INVALID_LEVEL             = _XL_ERR_INVALID_LEVEL
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_ADDRESS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_ADDRESS, __pyx_t_2) < 0) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1399
 * XL_ERR_NOT_FOUND                 = _XL_ERR_NOT_FOUND
 * XL_ERR_INVALID_ADDRESS           = _XL_ERR_INVALID_ADDRESS
 * XL_ERR_REQ_NOT_ACCEP             = _XL_ERR_REQ_NOT_ACCEP             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_LEVEL             = _XL_ERR_INVALID_LEVEL
 * XL_ERR_NO_DATA_DETECTED          = _XL_ERR_NO_DATA_DETECTED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_REQ_NOT_ACCEP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_REQ_NOT_ACCEP, __pyx_t_2) < 0) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1400
 * XL_ERR_INVALID_ADDRESS           = _XL_ERR_INVALID_ADDRESS
 * XL_ERR_REQ_NOT_ACCEP             = _XL_ERR_REQ_NOT_ACCEP
 * XL_ERR_INVALID_LEVEL             = _XL_ERR_INVALID_LEVEL             # <<<<<<<<<<<<<<
 * XL_ERR_NO_DATA_DETECTED          = _XL_ERR_NO_DATA_DETECTED
 * XL_ERR_INTERNAL_ERROR            = _XL_ERR_INTERNAL_ERROR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_LEVEL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_LEVEL, __pyx_t_2) < 0) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1401
 * XL_ERR_REQ_NOT_ACCEP             = _XL_ERR_REQ_NOT_ACCEP
 * XL_ERR_INVALID_LEVEL             = _XL_ERR_INVALID_LEVEL
 * XL_ERR_NO_DATA_DETECTED          = _XL_ERR_NO_DATA_DETECTED             # <<<<<<<<<<<<<<
 * XL_ERR_INTERNAL_ERROR            = _XL_ERR_INTERNAL_ERROR
 * XL_ERR_UNEXP_NET_ERR             = _XL_ERR_UNEXP_NET_ERR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_NO_DATA_DETECTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_NO_DATA_DETECTED, __pyx_t_2) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1402
 * XL_ERR_INVALID_LEVEL             = _XL_ERR_INVALID_LEVEL
 * XL_ERR_NO_DATA_DETECTED          = _XL_ERR_NO_DATA_DETECTED
 * XL_ERR_INTERNAL_ERROR            = _XL_ERR_INTERNAL_ERROR             # <<<<<<<<<<<<<<
 * XL_ERR_UNEXP_NET_ERR             = _XL_ERR_UNEXP_NET_ERR
 * XL_ERR_INVALID_USER_BUFFER       = _XL_ERR_INVALID_USER_BUFFER
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INTERNAL_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INTERNAL_ERROR, __pyx_t_2) < 0) __PYX_ERR(0, 1402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1403
 * XL_ERR_NO_DATA_DETECTED          = _XL_ERR_NO_DATA_DETECTED
 * XL_ERR_INTERNAL_ERROR            = _XL_ERR_INTERNAL_ERROR
 * XL_ERR_UNEXP_NET_ERR             = _XL_ERR_UNEXP_NET_ERR             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_USER_BUFFER       = _XL_ERR_INVALID_USER_BUFFER
 * XL_ERR_NO_RESOURCES              = _XL_ERR_NO_RESOURCES
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_UNEXP_NET_ERR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_UNEXP_NET_ERR, __pyx_t_2) < 0) __PYX_ERR(0, 1403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1404
 * XL_ERR_INTERNAL_ERROR            = _XL_ERR_INTERNAL_ERROR
 * XL_ERR_UNEXP_NET_ERR             = _XL_ERR_UNEXP_NET_ERR
 * XL_ERR_INVALID_USER_BUFFER       = _XL_ERR_INVALID_USER_BUFFER             # <<<<<<<<<<<<<<
 * XL_ERR_NO_RESOURCES              = _XL_ERR_NO_RESOURCES
 * XL_ERR_WRONG_CHIP_TYPE           = _XL_ERR_WRONG_CHIP_TYPE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_USER_BUFFER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_USER_BUFFER, __pyx_t_2) < 0) __PYX_ERR(0, 1404, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1405
 * XL_ERR_UNEXP_NET_ERR             = _XL_ERR_UNEXP_NET_ERR
 * XL_ERR_INVALID_USER_BUFFER       = _XL_ERR_INVALID_USER_BUFFER
 * XL_ERR_NO_RESOURCES              = _XL_ERR_NO_RESOURCES             # <<<<<<<<<<<<<<
 * XL_ERR_WRONG_CHIP_TYPE           = _XL_ERR_WRONG_CHIP_TYPE
 * XL_ERR_WRONG_COMMAND             = _XL_ERR_WRONG_COMMAND
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_NO_RESOURCES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_NO_RESOURCES, __pyx_t_2) < 0) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1406
 * XL_ERR_INVALID_USER_BUFFER       = _XL_ERR_INVALID_USER_BUFFER
 * XL_ERR_NO_RESOURCES              = _XL_ERR_NO_RESOURCES
 * XL_ERR_WRONG_CHIP_TYPE           = _XL_ERR_WRONG_CHIP_TYPE             # <<<<<<<<<<<<<<
 * XL_ERR_WRONG_COMMAND             = _XL_ERR_WRONG_COMMAND
 * XL_ERR_INVALID_HANDLE            = _XL_ERR_INVALID_HANDLE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_WRONG_CHIP_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_WRONG_CHIP_TYPE, __pyx_t_2) < 0) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1407
 * XL_ERR_NO_RESOURCES              = _XL_ERR_NO_RESOURCES
 * XL_ERR_WRONG_CHIP_TYPE           = _XL_ERR_WRONG_CHIP_TYPE
 * XL_ERR_WRONG_COMMAND             = _XL_ERR_WRONG_COMMAND             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_HANDLE            = _XL_ERR_INVALID_HANDLE
 * XL_ERR_RESERVED_NOT_ZERO         = _XL_ERR_RESERVED_NOT_ZERO
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_WRONG_COMMAND); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_WRONG_COMMAND, __pyx_t_2) < 0) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1408
 * XL_ERR_WRONG_CHIP_TYPE           = _XL_ERR_WRONG_CHIP_TYPE
 * XL_ERR_WRONG_COMMAND             = _XL_ERR_WRONG_COMMAND
 * XL_ERR_INVALID_HANDLE            = _XL_ERR_INVALID_HANDLE             # <<<<<<<<<<<<<<
 * XL_ERR_RESERVED_NOT_ZERO         = _XL_ERR_RESERVED_NOT_ZERO
 * XL_ERR_INIT_ACCESS_MISSING       = _XL_ERR_INIT_ACCESS_MISSING
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_HANDLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_HANDLE, __pyx_t_2) < 0) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1409
 * XL_ERR_WRONG_COMMAND             = _XL_ERR_WRONG_COMMAND
 * XL_ERR_INVALID_HANDLE            = _XL_ERR_INVALID_HANDLE
 * XL_ERR_RESERVED_NOT_ZERO         = _XL_ERR_RESERVED_NOT_ZERO             # <<<<<<<<<<<<<<
 * XL_ERR_INIT_ACCESS_MISSING       = _XL_ERR_INIT_ACCESS_MISSING
 * XL_ERR_CANNOT_OPEN_DRIVER        = _XL_ERR_CANNOT_OPEN_DRIVER
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_RESERVED_NOT_ZERO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_RESERVED_NOT_ZERO, __pyx_t_2) < 0) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1410
 * XL_ERR_INVALID_HANDLE            = _XL_ERR_INVALID_HANDLE
 * XL_ERR_RESERVED_NOT_ZERO         = _XL_ERR_RESERVED_NOT_ZERO
 * XL_ERR_INIT_ACCESS_MISSING       = _XL_ERR_INIT_ACCESS_MISSING             # <<<<<<<<<<<<<<
 * XL_ERR_CANNOT_OPEN_DRIVER        = _XL_ERR_CANNOT_OPEN_DRIVER
 * XL_ERR_WRONG_BUS_TYPE            = _XL_ERR_WRONG_BUS_TYPE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INIT_ACCESS_MISSING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INIT_ACCESS_MISSING, __pyx_t_2) < 0) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1411
 * XL_ERR_RESERVED_NOT_ZERO         = _XL_ERR_RESERVED_NOT_ZERO
 * XL_ERR_INIT_ACCESS_MISSING       = _XL_ERR_INIT_ACCESS_MISSING
 * XL_ERR_CANNOT_OPEN_DRIVER        = _XL_ERR_CANNOT_OPEN_DRIVER             # <<<<<<<<<<<<<<
 * XL_ERR_WRONG_BUS_TYPE            = _XL_ERR_WRONG_BUS_TYPE
 * XL_ERR_DLL_NOT_FOUND             = _XL_ERR_DLL_NOT_FOUND
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_CANNOT_OPEN_DRIVER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_CANNOT_OPEN_DRIVER, __pyx_t_2) < 0) __PYX_ERR(0, 1411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1412
 * XL_ERR_INIT_ACCESS_MISSING       = _XL_ERR_INIT_ACCESS_MISSING
 * XL_ERR_CANNOT_OPEN_DRIVER        = _XL_ERR_CANNOT_OPEN_DRIVER
 * XL_ERR_WRONG_BUS_TYPE            = _XL_ERR_WRONG_BUS_TYPE             # <<<<<<<<<<<<<<
 * XL_ERR_DLL_NOT_FOUND             = _XL_ERR_DLL_NOT_FOUND
 * XL_ERR_INVALID_CHANNEL_MASK      = _XL_ERR_INVALID_CHANNEL_MASK
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_WRONG_BUS_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_WRONG_BUS_TYPE, __pyx_t_2) < 0) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1413
 * XL_ERR_CANNOT_OPEN_DRIVER        = _XL_ERR_CANNOT_OPEN_DRIVER
 * XL_ERR_WRONG_BUS_TYPE            = _XL_ERR_WRONG_BUS_TYPE
 * XL_ERR_DLL_NOT_FOUND             = _XL_ERR_DLL_NOT_FOUND             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_CHANNEL_MASK      = _XL_ERR_INVALID_CHANNEL_MASK
 * XL_ERR_NOT_SUPPORTED             = _XL_ERR_NOT_SUPPORTED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_DLL_NOT_FOUND); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_DLL_NOT_FOUND, __pyx_t_2) < 0) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1414
 * XL_ERR_WRONG_BUS_TYPE            = _XL_ERR_WRONG_BUS_TYPE
 * XL_ERR_DLL_NOT_FOUND             = _XL_ERR_DLL_NOT_FOUND
 * XL_ERR_INVALID_CHANNEL_MASK      = _XL_ERR_INVALID_CHANNEL_MASK             # <<<<<<<<<<<<<<
 * XL_ERR_NOT_SUPPORTED             = _XL_ERR_NOT_SUPPORTED
 * XL_ERR_CONNECTION_BROKEN         = _XL_ERR_CONNECTION_BROKEN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_CHANNEL_MASK); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_CHANNEL_MASK, __pyx_t_2) < 0) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1415
 * XL_ERR_DLL_NOT_FOUND             = _XL_ERR_DLL_NOT_FOUND
 * XL_ERR_INVALID_CHANNEL_MASK      = _XL_ERR_INVALID_CHANNEL_MASK
 * XL_ERR_NOT_SUPPORTED             = _XL_ERR_NOT_SUPPORTED             # <<<<<<<<<<<<<<
 * XL_ERR_CONNECTION_BROKEN         = _XL_ERR_CONNECTION_BROKEN
 * XL_ERR_CONNECTION_CLOSED         = _XL_ERR_CONNECTION_CLOSED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_NOT_SUPPORTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_NOT_SUPPORTED, __pyx_t_2) < 0) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1416
 * XL_ERR_INVALID_CHANNEL_MASK      = _XL_ERR_INVALID_CHANNEL_MASK
 * XL_ERR_NOT_SUPPORTED             = _XL_ERR_NOT_SUPPORTED
 * XL_ERR_CONNECTION_BROKEN         = _XL_ERR_CONNECTION_BROKEN             # <<<<<<<<<<<<<<
 * XL_ERR_CONNECTION_CLOSED         = _XL_ERR_CONNECTION_CLOSED
 * XL_ERR_INVALID_STREAM_NAME       = _XL_ERR_INVALID_STREAM_NAME
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_CONNECTION_BROKEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_CONNECTION_BROKEN, __pyx_t_2) < 0) __PYX_ERR(0, 1416, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1417
 * XL_ERR_NOT_SUPPORTED             = _XL_ERR_NOT_SUPPORTED
 * XL_ERR_CONNECTION_BROKEN         = _XL_ERR_CONNECTION_BROKEN
 * XL_ERR_CONNECTION_CLOSED         = _XL_ERR_CONNECTION_CLOSED             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_STREAM_NAME       = _XL_ERR_INVALID_STREAM_NAME
 * XL_ERR_CONNECTION_FAILED         = _XL_ERR_CONNECTION_FAILED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_CONNECTION_CLOSED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_CONNECTION_CLOSED, __pyx_t_2) < 0) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1418
 * XL_ERR_CONNECTION_BROKEN         = _XL_ERR_CONNECTION_BROKEN
 * XL_ERR_CONNECTION_CLOSED         = _XL_ERR_CONNECTION_CLOSED
 * XL_ERR_INVALID_STREAM_NAME       = _XL_ERR_INVALID_STREAM_NAME             # <<<<<<<<<<<<<<
 * XL_ERR_CONNECTION_FAILED         = _XL_ERR_CONNECTION_FAILED
 * XL_ERR_STREAM_NOT_FOUND          = _XL_ERR_STREAM_NOT_FOUND
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_STREAM_NAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_STREAM_NAME, __pyx_t_2) < 0) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1419
 * XL_ERR_CONNECTION_CLOSED         = _XL_ERR_CONNECTION_CLOSED
 * XL_ERR_INVALID_STREAM_NAME       = _XL_ERR_INVALID_STREAM_NAME
 * XL_ERR_CONNECTION_FAILED         = _XL_ERR_CONNECTION_FAILED             # <<<<<<<<<<<<<<
 * XL_ERR_STREAM_NOT_FOUND          = _XL_ERR_STREAM_NOT_FOUND
 * XL_ERR_STREAM_NOT_CONNECTED      = _XL_ERR_STREAM_NOT_CONNECTED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_CONNECTION_FAILED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_CONNECTION_FAILED, __pyx_t_2) < 0) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1420
 * XL_ERR_INVALID_STREAM_NAME       = _XL_ERR_INVALID_STREAM_NAME
 * XL_ERR_CONNECTION_FAILED         = _XL_ERR_CONNECTION_FAILED
 * XL_ERR_STREAM_NOT_FOUND          = _XL_ERR_STREAM_NOT_FOUND             # <<<<<<<<<<<<<<
 * XL_ERR_STREAM_NOT_CONNECTED      = _XL_ERR_STREAM_NOT_CONNECTED
 * XL_ERR_QUEUE_OVERRUN             = _XL_ERR_QUEUE_OVERRUN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_STREAM_NOT_FOUND); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_STREAM_NOT_FOUND, __pyx_t_2) < 0) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1421
 * XL_ERR_CONNECTION_FAILED         = _XL_ERR_CONNECTION_FAILED
 * XL_ERR_STREAM_NOT_FOUND          = _XL_ERR_STREAM_NOT_FOUND
 * XL_ERR_STREAM_NOT_CONNECTED      = _XL_ERR_STREAM_NOT_CONNECTED             # <<<<<<<<<<<<<<
 * XL_ERR_QUEUE_OVERRUN             = _XL_ERR_QUEUE_OVERRUN
 * XL_ERROR                         = _XL_ERROR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_STREAM_NOT_CONNECTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_STREAM_NOT_CONNECTED, __pyx_t_2) < 0) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1422
 * XL_ERR_STREAM_NOT_FOUND          = _XL_ERR_STREAM_NOT_FOUND
 * XL_ERR_STREAM_NOT_CONNECTED      = _XL_ERR_STREAM_NOT_CONNECTED
 * XL_ERR_QUEUE_OVERRUN             = _XL_ERR_QUEUE_OVERRUN             # <<<<<<<<<<<<<<
 * XL_ERROR                         = _XL_ERROR
 * XL_ERR_INVALID_DLC               = _XL_ERR_INVALID_DLC
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_QUEUE_OVERRUN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_QUEUE_OVERRUN, __pyx_t_2) < 0) __PYX_ERR(0, 1422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1423
 * XL_ERR_STREAM_NOT_CONNECTED      = _XL_ERR_STREAM_NOT_CONNECTED
 * XL_ERR_QUEUE_OVERRUN             = _XL_ERR_QUEUE_OVERRUN
 * XL_ERROR                         = _XL_ERROR             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_DLC               = _XL_ERR_INVALID_DLC
 * XL_ERR_INVALID_CANID             = _XL_ERR_INVALID_CANID
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERROR, __pyx_t_2) < 0) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1424
 * XL_ERR_QUEUE_OVERRUN             = _XL_ERR_QUEUE_OVERRUN
 * XL_ERROR                         = _XL_ERROR
 * XL_ERR_INVALID_DLC               = _XL_ERR_INVALID_DLC             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_CANID             = _XL_ERR_INVALID_CANID
 * XL_ERR_INVALID_FDFLAG_MODE20     = _XL_ERR_INVALID_FDFLAG_MODE20
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_DLC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_DLC, __pyx_t_2) < 0) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1425
 * XL_ERROR                         = _XL_ERROR
 * XL_ERR_INVALID_DLC               = _XL_ERR_INVALID_DLC
 * XL_ERR_INVALID_CANID             = _XL_ERR_INVALID_CANID             # <<<<<<<<<<<<<<
 * XL_ERR_INVALID_FDFLAG_MODE20     = _XL_ERR_INVALID_FDFLAG_MODE20
 * XL_ERR_EDL_RTR                   = _XL_ERR_EDL_RTR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_CANID); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_CANID, __pyx_t_2) < 0) __PYX_ERR(0, 1425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1426
 * XL_ERR_INVALID_DLC               = _XL_ERR_INVALID_DLC
 * XL_ERR_INVALID_CANID             = _XL_ERR_INVALID_CANID
 * XL_ERR_INVALID_FDFLAG_MODE20     = _XL_ERR_INVALID_FDFLAG_MODE20             # <<<<<<<<<<<<<<
 * XL_ERR_EDL_RTR                   = _XL_ERR_EDL_RTR
 * XL_ERR_EDL_NOT_SET               = _XL_ERR_EDL_NOT_SET
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_INVALID_FDFLAG_MODE20); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_INVALID_FDFLAG_MODE20, __pyx_t_2) < 0) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1427
 * XL_ERR_INVALID_CANID             = _XL_ERR_INVALID_CANID
 * XL_ERR_INVALID_FDFLAG_MODE20     = _XL_ERR_INVALID_FDFLAG_MODE20
 * XL_ERR_EDL_RTR                   = _XL_ERR_EDL_RTR             # <<<<<<<<<<<<<<
 * XL_ERR_EDL_NOT_SET               = _XL_ERR_EDL_NOT_SET
 * XL_ERR_UNKNOWN_FLAG              = _XL_ERR_UNKNOWN_FLAG
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_EDL_RTR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_EDL_RTR, __pyx_t_2) < 0) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1428
 * XL_ERR_INVALID_FDFLAG_MODE20     = _XL_ERR_INVALID_FDFLAG_MODE20
 * XL_ERR_EDL_RTR                   = _XL_ERR_EDL_RTR
 * XL_ERR_EDL_NOT_SET               = _XL_ERR_EDL_NOT_SET             # <<<<<<<<<<<<<<
 * XL_ERR_UNKNOWN_FLAG              = _XL_ERR_UNKNOWN_FLAG
 * XL_ERR_ETH_PHY_ACTIVATION_FAILED = _XL_ERR_ETH_PHY_ACTIVATION_FAILED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_EDL_NOT_SET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_EDL_NOT_SET, __pyx_t_2) < 0) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1429
 * XL_ERR_EDL_RTR                   = _XL_ERR_EDL_RTR
 * XL_ERR_EDL_NOT_SET               = _XL_ERR_EDL_NOT_SET
 * XL_ERR_UNKNOWN_FLAG              = _XL_ERR_UNKNOWN_FLAG             # <<<<<<<<<<<<<<
 * XL_ERR_ETH_PHY_ACTIVATION_FAILED = _XL_ERR_ETH_PHY_ACTIVATION_FAILED
 * XL_ERR_ETH_PHY_CONFIG_ABORTED    = _XL_ERR_ETH_PHY_CONFIG_ABORTED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_UNKNOWN_FLAG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_UNKNOWN_FLAG, __pyx_t_2) < 0) __PYX_ERR(0, 1429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1430
 * XL_ERR_EDL_NOT_SET               = _XL_ERR_EDL_NOT_SET
 * XL_ERR_UNKNOWN_FLAG              = _XL_ERR_UNKNOWN_FLAG
 * XL_ERR_ETH_PHY_ACTIVATION_FAILED = _XL_ERR_ETH_PHY_ACTIVATION_FAILED             # <<<<<<<<<<<<<<
 * XL_ERR_ETH_PHY_CONFIG_ABORTED    = _XL_ERR_ETH_PHY_CONFIG_ABORTED
 * XL_ERR_ETH_RESET_FAILED          = _XL_ERR_ETH_RESET_FAILED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_ETH_PHY_ACTIVATION_FAILED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_ETH_PHY_ACTIVATION_FAILED, __pyx_t_2) < 0) __PYX_ERR(0, 1430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1431
 * XL_ERR_UNKNOWN_FLAG              = _XL_ERR_UNKNOWN_FLAG
 * XL_ERR_ETH_PHY_ACTIVATION_FAILED = _XL_ERR_ETH_PHY_ACTIVATION_FAILED
 * XL_ERR_ETH_PHY_CONFIG_ABORTED    = _XL_ERR_ETH_PHY_CONFIG_ABORTED             # <<<<<<<<<<<<<<
 * XL_ERR_ETH_RESET_FAILED          = _XL_ERR_ETH_RESET_FAILED
 * XL_ERR_ETH_SET_CONFIG_DELAYED    = _XL_ERR_ETH_SET_CONFIG_DELAYED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_ETH_PHY_CONFIG_ABORTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_ETH_PHY_CONFIG_ABORTED, __pyx_t_2) < 0) __PYX_ERR(0, 1431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1432
 * XL_ERR_ETH_PHY_ACTIVATION_FAILED = _XL_ERR_ETH_PHY_ACTIVATION_FAILED
 * XL_ERR_ETH_PHY_CONFIG_ABORTED    = _XL_ERR_ETH_PHY_CONFIG_ABORTED
 * XL_ERR_ETH_RESET_FAILED          = _XL_ERR_ETH_RESET_FAILED             # <<<<<<<<<<<<<<
 * XL_ERR_ETH_SET_CONFIG_DELAYED    = _XL_ERR_ETH_SET_CONFIG_DELAYED
 * XL_ERR_ETH_UNSUPPORTED_FEATURE   = _XL_ERR_ETH_UNSUPPORTED_FEATURE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_ETH_RESET_FAILED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_ETH_RESET_FAILED, __pyx_t_2) < 0) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1433
 * XL_ERR_ETH_PHY_CONFIG_ABORTED    = _XL_ERR_ETH_PHY_CONFIG_ABORTED
 * XL_ERR_ETH_RESET_FAILED          = _XL_ERR_ETH_RESET_FAILED
 * XL_ERR_ETH_SET_CONFIG_DELAYED    = _XL_ERR_ETH_SET_CONFIG_DELAYED             # <<<<<<<<<<<<<<
 * XL_ERR_ETH_UNSUPPORTED_FEATURE   = _XL_ERR_ETH_UNSUPPORTED_FEATURE
 * XL_ERR_ETH_MAC_ACTIVATION_FAILED = _XL_ERR_ETH_MAC_ACTIVATION_FAILED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_ETH_SET_CONFIG_DELAYED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_ETH_SET_CONFIG_DELAYED, __pyx_t_2) < 0) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1434
 * XL_ERR_ETH_RESET_FAILED          = _XL_ERR_ETH_RESET_FAILED
 * XL_ERR_ETH_SET_CONFIG_DELAYED    = _XL_ERR_ETH_SET_CONFIG_DELAYED
 * XL_ERR_ETH_UNSUPPORTED_FEATURE   = _XL_ERR_ETH_UNSUPPORTED_FEATURE             # <<<<<<<<<<<<<<
 * XL_ERR_ETH_MAC_ACTIVATION_FAILED = _XL_ERR_ETH_MAC_ACTIVATION_FAILED
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_ETH_UNSUPPORTED_FEATURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_ETH_UNSUPPORTED_FEATURE, __pyx_t_2) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1435
 * XL_ERR_ETH_SET_CONFIG_DELAYED    = _XL_ERR_ETH_SET_CONFIG_DELAYED
 * XL_ERR_ETH_UNSUPPORTED_FEATURE   = _XL_ERR_ETH_UNSUPPORTED_FEATURE
 * XL_ERR_ETH_MAC_ACTIVATION_FAILED = _XL_ERR_ETH_MAC_ACTIVATION_FAILED             # <<<<<<<<<<<<<<
 * 
 * XL_ACTIVATE_NONE        = _XL_ACTIVATE_NONE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ERR_ETH_MAC_ACTIVATION_FAILED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ERR_ETH_MAC_ACTIVATION_FAILED, __pyx_t_2) < 0) __PYX_ERR(0, 1435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1437
 * XL_ERR_ETH_MAC_ACTIVATION_FAILED = _XL_ERR_ETH_MAC_ACTIVATION_FAILED
 * 
 * XL_ACTIVATE_NONE        = _XL_ACTIVATE_NONE             # <<<<<<<<<<<<<<
 * XL_ACTIVATE_RESET_CLOCK = _XL_ACTIVATE_RESET_CLOCK
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ACTIVATE_NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ACTIVATE_NONE, __pyx_t_2) < 0) __PYX_ERR(0, 1437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1438
 * 
 * XL_ACTIVATE_NONE        = _XL_ACTIVATE_NONE
 * XL_ACTIVATE_RESET_CLOCK = _XL_ACTIVATE_RESET_CLOCK             # <<<<<<<<<<<<<<
 * 
 * XL_CAN_EXT_MSG_ID            = _XL_CAN_EXT_MSG_ID
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_ACTIVATE_RESET_CLOCK); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_ACTIVATE_RESET_CLOCK, __pyx_t_2) < 0) __PYX_ERR(0, 1438, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1440
 * XL_ACTIVATE_RESET_CLOCK = _XL_ACTIVATE_RESET_CLOCK
 * 
 * XL_CAN_EXT_MSG_ID            = _XL_CAN_EXT_MSG_ID             # <<<<<<<<<<<<<<
 * XL_CAN_MSG_FLAG_ERROR_FRAME  = _XL_CAN_MSG_FLAG_ERROR_FRAME
 * XL_CAN_MSG_FLAG_OVERRUN      = _XL_CAN_MSG_FLAG_OVERRUN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_EXT_MSG_ID); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_EXT_MSG_ID, __pyx_t_2) < 0) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1441
 * 
 * XL_CAN_EXT_MSG_ID            = _XL_CAN_EXT_MSG_ID
 * XL_CAN_MSG_FLAG_ERROR_FRAME  = _XL_CAN_MSG_FLAG_ERROR_FRAME             # <<<<<<<<<<<<<<
 * XL_CAN_MSG_FLAG_OVERRUN      = _XL_CAN_MSG_FLAG_OVERRUN
 * XL_CAN_MSG_FLAG_NERR         = _XL_CAN_MSG_FLAG_NERR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_MSG_FLAG_ERROR_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_MSG_FLAG_ERROR_FRAME, __pyx_t_2) < 0) __PYX_ERR(0, 1441, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1442
 * XL_CAN_EXT_MSG_ID            = _XL_CAN_EXT_MSG_ID
 * XL_CAN_MSG_FLAG_ERROR_FRAME  = _XL_CAN_MSG_FLAG_ERROR_FRAME
 * XL_CAN_MSG_FLAG_OVERRUN      = _XL_CAN_MSG_FLAG_OVERRUN             # <<<<<<<<<<<<<<
 * XL_CAN_MSG_FLAG_NERR         = _XL_CAN_MSG_FLAG_NERR
 * XL_CAN_MSG_FLAG_WAKEUP       = _XL_CAN_MSG_FLAG_WAKEUP
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_MSG_FLAG_OVERRUN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_MSG_FLAG_OVERRUN, __pyx_t_2) < 0) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1443
 * XL_CAN_MSG_FLAG_ERROR_FRAME  = _XL_CAN_MSG_FLAG_ERROR_FRAME
 * XL_CAN_MSG_FLAG_OVERRUN      = _XL_CAN_MSG_FLAG_OVERRUN
 * XL_CAN_MSG_FLAG_NERR         = _XL_CAN_MSG_FLAG_NERR             # <<<<<<<<<<<<<<
 * XL_CAN_MSG_FLAG_WAKEUP       = _XL_CAN_MSG_FLAG_WAKEUP
 * XL_CAN_MSG_FLAG_REMOTE_FRAME = _XL_CAN_MSG_FLAG_REMOTE_FRAME
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_MSG_FLAG_NERR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_MSG_FLAG_NERR, __pyx_t_2) < 0) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1444
 * XL_CAN_MSG_FLAG_OVERRUN      = _XL_CAN_MSG_FLAG_OVERRUN
 * XL_CAN_MSG_FLAG_NERR         = _XL_CAN_MSG_FLAG_NERR
 * XL_CAN_MSG_FLAG_WAKEUP       = _XL_CAN_MSG_FLAG_WAKEUP             # <<<<<<<<<<<<<<
 * XL_CAN_MSG_FLAG_REMOTE_FRAME = _XL_CAN_MSG_FLAG_REMOTE_FRAME
 * XL_CAN_MSG_FLAG_RESERVED_1   = _XL_CAN_MSG_FLAG_RESERVED_1
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_MSG_FLAG_WAKEUP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_MSG_FLAG_WAKEUP, __pyx_t_2) < 0) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1445
 * XL_CAN_MSG_FLAG_NERR         = _XL_CAN_MSG_FLAG_NERR
 * XL_CAN_MSG_FLAG_WAKEUP       = _XL_CAN_MSG_FLAG_WAKEUP
 * XL_CAN_MSG_FLAG_REMOTE_FRAME = _XL_CAN_MSG_FLAG_REMOTE_FRAME             # <<<<<<<<<<<<<<
 * XL_CAN_MSG_FLAG_RESERVED_1   = _XL_CAN_MSG_FLAG_RESERVED_1
 * XL_CAN_MSG_FLAG_TX_COMPLETED = _XL_CAN_MSG_FLAG_TX_COMPLETED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_MSG_FLAG_REMOTE_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_MSG_FLAG_REMOTE_FRAME, __pyx_t_2) < 0) __PYX_ERR(0, 1445, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1446
 * XL_CAN_MSG_FLAG_WAKEUP       = _XL_CAN_MSG_FLAG_WAKEUP
 * XL_CAN_MSG_FLAG_REMOTE_FRAME = _XL_CAN_MSG_FLAG_REMOTE_FRAME
 * XL_CAN_MSG_FLAG_RESERVED_1   = _XL_CAN_MSG_FLAG_RESERVED_1             # <<<<<<<<<<<<<<
 * XL_CAN_MSG_FLAG_TX_COMPLETED = _XL_CAN_MSG_FLAG_TX_COMPLETED
 * XL_CAN_MSG_FLAG_TX_REQUEST   = _XL_CAN_MSG_FLAG_TX_REQUEST
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_MSG_FLAG_RESERVED_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_MSG_FLAG_RESERVED_1, __pyx_t_2) < 0) __PYX_ERR(0, 1446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1447
 * XL_CAN_MSG_FLAG_REMOTE_FRAME = _XL_CAN_MSG_FLAG_REMOTE_FRAME
 * XL_CAN_MSG_FLAG_RESERVED_1   = _XL_CAN_MSG_FLAG_RESERVED_1
 * XL_CAN_MSG_FLAG_TX_COMPLETED = _XL_CAN_MSG_FLAG_TX_COMPLETED             # <<<<<<<<<<<<<<
 * XL_CAN_MSG_FLAG_TX_REQUEST   = _XL_CAN_MSG_FLAG_TX_REQUEST
 * XL_CAN_MSG_FLAG_SRR_BIT_DOM  = _XL_CAN_MSG_FLAG_SRR_BIT_DOM
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_MSG_FLAG_TX_COMPLETED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_MSG_FLAG_TX_COMPLETED, __pyx_t_2) < 0) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1448
 * XL_CAN_MSG_FLAG_RESERVED_1   = _XL_CAN_MSG_FLAG_RESERVED_1
 * XL_CAN_MSG_FLAG_TX_COMPLETED = _XL_CAN_MSG_FLAG_TX_COMPLETED
 * XL_CAN_MSG_FLAG_TX_REQUEST   = _XL_CAN_MSG_FLAG_TX_REQUEST             # <<<<<<<<<<<<<<
 * XL_CAN_MSG_FLAG_SRR_BIT_DOM  = _XL_CAN_MSG_FLAG_SRR_BIT_DOM
 * XL_EVENT_FLAG_OVERRUN        = _XL_EVENT_FLAG_OVERRUN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_MSG_FLAG_TX_REQUEST); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_MSG_FLAG_TX_REQUEST, __pyx_t_2) < 0) __PYX_ERR(0, 1448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1449
 * XL_CAN_MSG_FLAG_TX_COMPLETED = _XL_CAN_MSG_FLAG_TX_COMPLETED
 * XL_CAN_MSG_FLAG_TX_REQUEST   = _XL_CAN_MSG_FLAG_TX_REQUEST
 * XL_CAN_MSG_FLAG_SRR_BIT_DOM  = _XL_CAN_MSG_FLAG_SRR_BIT_DOM             # <<<<<<<<<<<<<<
 * XL_EVENT_FLAG_OVERRUN        = _XL_EVENT_FLAG_OVERRUN
 * XL_LIN_MSGFLAG_TX            = _XL_LIN_MSGFLAG_TX
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_MSG_FLAG_SRR_BIT_DOM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_MSG_FLAG_SRR_BIT_DOM, __pyx_t_2) < 0) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1450
 * XL_CAN_MSG_FLAG_TX_REQUEST   = _XL_CAN_MSG_FLAG_TX_REQUEST
 * XL_CAN_MSG_FLAG_SRR_BIT_DOM  = _XL_CAN_MSG_FLAG_SRR_BIT_DOM
 * XL_EVENT_FLAG_OVERRUN        = _XL_EVENT_FLAG_OVERRUN             # <<<<<<<<<<<<<<
 * XL_LIN_MSGFLAG_TX            = _XL_LIN_MSGFLAG_TX
 * XL_LIN_MSGFLAG_CRCERROR      = _XL_LIN_MSGFLAG_CRCERROR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_EVENT_FLAG_OVERRUN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_EVENT_FLAG_OVERRUN, __pyx_t_2) < 0) __PYX_ERR(0, 1450, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1451
 * XL_CAN_MSG_FLAG_SRR_BIT_DOM  = _XL_CAN_MSG_FLAG_SRR_BIT_DOM
 * XL_EVENT_FLAG_OVERRUN        = _XL_EVENT_FLAG_OVERRUN
 * XL_LIN_MSGFLAG_TX            = _XL_LIN_MSGFLAG_TX             # <<<<<<<<<<<<<<
 * XL_LIN_MSGFLAG_CRCERROR      = _XL_LIN_MSGFLAG_CRCERROR
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_LIN_MSGFLAG_TX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_LIN_MSGFLAG_TX, __pyx_t_2) < 0) __PYX_ERR(0, 1451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1452
 * XL_EVENT_FLAG_OVERRUN        = _XL_EVENT_FLAG_OVERRUN
 * XL_LIN_MSGFLAG_TX            = _XL_LIN_MSGFLAG_TX
 * XL_LIN_MSGFLAG_CRCERROR      = _XL_LIN_MSGFLAG_CRCERROR             # <<<<<<<<<<<<<<
 * 
 * XL_SET_TIMESYNC_NO_CHANGE   = _XL_SET_TIMESYNC_NO_CHANGE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_LIN_MSGFLAG_CRCERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_LIN_MSGFLAG_CRCERROR, __pyx_t_2) < 0) __PYX_ERR(0, 1452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1454
 * XL_LIN_MSGFLAG_CRCERROR      = _XL_LIN_MSGFLAG_CRCERROR
 * 
 * XL_SET_TIMESYNC_NO_CHANGE   = _XL_SET_TIMESYNC_NO_CHANGE             # <<<<<<<<<<<<<<
 * XL_SET_TIMESYNC_ON          = _XL_SET_TIMESYNC_ON
 * XL_SET_TIMESYNC_OFF         = _XL_SET_TIMESYNC_OFF
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(XL_SET_TIMESYNC_NO_CHANGE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_SET_TIMESYNC_NO_CHANGE, __pyx_t_2) < 0) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1455
 * 
 * XL_SET_TIMESYNC_NO_CHANGE   = _XL_SET_TIMESYNC_NO_CHANGE
 * XL_SET_TIMESYNC_ON          = _XL_SET_TIMESYNC_ON             # <<<<<<<<<<<<<<
 * XL_SET_TIMESYNC_OFF         = _XL_SET_TIMESYNC_OFF
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(XL_SET_TIMESYNC_ON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_SET_TIMESYNC_ON, __pyx_t_2) < 0) __PYX_ERR(0, 1455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1456
 * XL_SET_TIMESYNC_NO_CHANGE   = _XL_SET_TIMESYNC_NO_CHANGE
 * XL_SET_TIMESYNC_ON          = _XL_SET_TIMESYNC_ON
 * XL_SET_TIMESYNC_OFF         = _XL_SET_TIMESYNC_OFF             # <<<<<<<<<<<<<<
 * 
 * XL_CAN_TXMSG_FLAG_EDL       = _XL_CAN_TXMSG_FLAG_EDL
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(XL_SET_TIMESYNC_OFF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_SET_TIMESYNC_OFF, __pyx_t_2) < 0) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1458
 * XL_SET_TIMESYNC_OFF         = _XL_SET_TIMESYNC_OFF
 * 
 * XL_CAN_TXMSG_FLAG_EDL       = _XL_CAN_TXMSG_FLAG_EDL             # <<<<<<<<<<<<<<
 * XL_CAN_TXMSG_FLAG_BRS       = _XL_CAN_TXMSG_FLAG_BRS
 * XL_CAN_TXMSG_FLAG_RTR       = _XL_CAN_TXMSG_FLAG_RTR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_TXMSG_FLAG_EDL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_TXMSG_FLAG_EDL, __pyx_t_2) < 0) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1459
 * 
 * XL_CAN_TXMSG_FLAG_EDL       = _XL_CAN_TXMSG_FLAG_EDL
 * XL_CAN_TXMSG_FLAG_BRS       = _XL_CAN_TXMSG_FLAG_BRS             # <<<<<<<<<<<<<<
 * XL_CAN_TXMSG_FLAG_RTR       = _XL_CAN_TXMSG_FLAG_RTR
 * XL_CAN_TXMSG_FLAG_HIGHPRIO  = _XL_CAN_TXMSG_FLAG_HIGHPRIO
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_TXMSG_FLAG_BRS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_TXMSG_FLAG_BRS, __pyx_t_2) < 0) __PYX_ERR(0, 1459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1460
 * XL_CAN_TXMSG_FLAG_EDL       = _XL_CAN_TXMSG_FLAG_EDL
 * XL_CAN_TXMSG_FLAG_BRS       = _XL_CAN_TXMSG_FLAG_BRS
 * XL_CAN_TXMSG_FLAG_RTR       = _XL_CAN_TXMSG_FLAG_RTR             # <<<<<<<<<<<<<<
 * XL_CAN_TXMSG_FLAG_HIGHPRIO  = _XL_CAN_TXMSG_FLAG_HIGHPRIO
 * XL_CAN_TXMSG_FLAG_WAKEUP    = _XL_CAN_TXMSG_FLAG_WAKEUP
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_TXMSG_FLAG_RTR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_TXMSG_FLAG_RTR, __pyx_t_2) < 0) __PYX_ERR(0, 1460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1461
 * XL_CAN_TXMSG_FLAG_BRS       = _XL_CAN_TXMSG_FLAG_BRS
 * XL_CAN_TXMSG_FLAG_RTR       = _XL_CAN_TXMSG_FLAG_RTR
 * XL_CAN_TXMSG_FLAG_HIGHPRIO  = _XL_CAN_TXMSG_FLAG_HIGHPRIO             # <<<<<<<<<<<<<<
 * XL_CAN_TXMSG_FLAG_WAKEUP    = _XL_CAN_TXMSG_FLAG_WAKEUP
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_TXMSG_FLAG_HIGHPRIO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_TXMSG_FLAG_HIGHPRIO, __pyx_t_2) < 0) __PYX_ERR(0, 1461, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1462
 * XL_CAN_TXMSG_FLAG_RTR       = _XL_CAN_TXMSG_FLAG_RTR
 * XL_CAN_TXMSG_FLAG_HIGHPRIO  = _XL_CAN_TXMSG_FLAG_HIGHPRIO
 * XL_CAN_TXMSG_FLAG_WAKEUP    = _XL_CAN_TXMSG_FLAG_WAKEUP             # <<<<<<<<<<<<<<
 * 
 * XL_CAN_EV_TAG_TX_MSG = _XL_CAN_EV_TAG_TX_MSG
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_CAN_TXMSG_FLAG_WAKEUP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_TXMSG_FLAG_WAKEUP, __pyx_t_2) < 0) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1464
 * XL_CAN_TXMSG_FLAG_WAKEUP    = _XL_CAN_TXMSG_FLAG_WAKEUP
 * 
 * XL_CAN_EV_TAG_TX_MSG = _XL_CAN_EV_TAG_TX_MSG             # <<<<<<<<<<<<<<
 * 
 * XL_FR_MODE_NORMAL                           = _XL_FR_MODE_NORMAL
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_short(XL_CAN_EV_TAG_TX_MSG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_CAN_EV_TAG_TX_MSG, __pyx_t_2) < 0) __PYX_ERR(0, 1464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1466
 * XL_CAN_EV_TAG_TX_MSG = _XL_CAN_EV_TAG_TX_MSG
 * 
 * XL_FR_MODE_NORMAL                           = _XL_FR_MODE_NORMAL             # <<<<<<<<<<<<<<
 * XL_FR_MODE_COLD_NORMAL                      = _XL_FR_MODE_COLD_NORMAL # only paid version
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_MODE_NORMAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_MODE_NORMAL, __pyx_t_2) < 0) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1467
 * 
 * XL_FR_MODE_NORMAL                           = _XL_FR_MODE_NORMAL
 * XL_FR_MODE_COLD_NORMAL                      = _XL_FR_MODE_COLD_NORMAL # only paid version             # <<<<<<<<<<<<<<
 * 
 * XL_FR_MODE_NONE                             = _XL_FR_MODE_NONE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_MODE_COLD_NORMAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_MODE_COLD_NORMAL, __pyx_t_2) < 0) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1469
 * XL_FR_MODE_COLD_NORMAL                      = _XL_FR_MODE_COLD_NORMAL # only paid version
 * 
 * XL_FR_MODE_NONE                             = _XL_FR_MODE_NONE             # <<<<<<<<<<<<<<
 * XL_FR_MODE_WAKEUP                           = _XL_FR_MODE_WAKEUP
 * XL_FR_MODE_COLDSTART_LEADING                = _XL_FR_MODE_COLDSTART_LEADING
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_MODE_NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_MODE_NONE, __pyx_t_2) < 0) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1470
 * 
 * XL_FR_MODE_NONE                             = _XL_FR_MODE_NONE
 * XL_FR_MODE_WAKEUP                           = _XL_FR_MODE_WAKEUP             # <<<<<<<<<<<<<<
 * XL_FR_MODE_COLDSTART_LEADING                = _XL_FR_MODE_COLDSTART_LEADING
 * XL_FR_MODE_COLDSTART_FOLLOWING              = _XL_FR_MODE_COLDSTART_FOLLOWING
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_MODE_WAKEUP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_MODE_WAKEUP, __pyx_t_2) < 0) __PYX_ERR(0, 1470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1471
 * XL_FR_MODE_NONE                             = _XL_FR_MODE_NONE
 * XL_FR_MODE_WAKEUP                           = _XL_FR_MODE_WAKEUP
 * XL_FR_MODE_COLDSTART_LEADING                = _XL_FR_MODE_COLDSTART_LEADING             # <<<<<<<<<<<<<<
 * XL_FR_MODE_COLDSTART_FOLLOWING              = _XL_FR_MODE_COLDSTART_FOLLOWING
 * XL_FR_MODE_WAKEUP_AND_COLDSTART_LEADING     = _XL_FR_MODE_WAKEUP_AND_COLDSTART_LEADING
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_MODE_COLDSTART_LEADING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_MODE_COLDSTART_LEADING, __pyx_t_2) < 0) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1472
 * XL_FR_MODE_WAKEUP                           = _XL_FR_MODE_WAKEUP
 * XL_FR_MODE_COLDSTART_LEADING                = _XL_FR_MODE_COLDSTART_LEADING
 * XL_FR_MODE_COLDSTART_FOLLOWING              = _XL_FR_MODE_COLDSTART_FOLLOWING             # <<<<<<<<<<<<<<
 * XL_FR_MODE_WAKEUP_AND_COLDSTART_LEADING     = _XL_FR_MODE_WAKEUP_AND_COLDSTART_LEADING
 * XL_FR_MODE_WAKEUP_AND_COLDSTART_FOLLOWING   = _XL_FR_MODE_WAKEUP_AND_COLDSTART_FOLLOWING
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_MODE_COLDSTART_FOLLOWING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_MODE_COLDSTART_FOLLOWING, __pyx_t_2) < 0) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1473
 * XL_FR_MODE_COLDSTART_LEADING                = _XL_FR_MODE_COLDSTART_LEADING
 * XL_FR_MODE_COLDSTART_FOLLOWING              = _XL_FR_MODE_COLDSTART_FOLLOWING
 * XL_FR_MODE_WAKEUP_AND_COLDSTART_LEADING     = _XL_FR_MODE_WAKEUP_AND_COLDSTART_LEADING             # <<<<<<<<<<<<<<
 * XL_FR_MODE_WAKEUP_AND_COLDSTART_FOLLOWING   = _XL_FR_MODE_WAKEUP_AND_COLDSTART_FOLLOWING
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_MODE_WAKEUP_AND_COLDSTART_LEADING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART, __pyx_t_2) < 0) __PYX_ERR(0, 1473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1474
 * XL_FR_MODE_COLDSTART_FOLLOWING              = _XL_FR_MODE_COLDSTART_FOLLOWING
 * XL_FR_MODE_WAKEUP_AND_COLDSTART_LEADING     = _XL_FR_MODE_WAKEUP_AND_COLDSTART_LEADING
 * XL_FR_MODE_WAKEUP_AND_COLDSTART_FOLLOWING   = _XL_FR_MODE_WAKEUP_AND_COLDSTART_FOLLOWING             # <<<<<<<<<<<<<<
 * 
 * XL_FR_CHANNEL_CFG_STATUS_INIT_APP_PRESENT   = _XL_FR_CHANNEL_CFG_STATUS_INIT_APP_PRESENT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_MODE_WAKEUP_AND_COLDSTART_FOLLOWING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_MODE_WAKEUP_AND_COLDSTART_2, __pyx_t_2) < 0) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1476
 * XL_FR_MODE_WAKEUP_AND_COLDSTART_FOLLOWING   = _XL_FR_MODE_WAKEUP_AND_COLDSTART_FOLLOWING
 * 
 * XL_FR_CHANNEL_CFG_STATUS_INIT_APP_PRESENT   = _XL_FR_CHANNEL_CFG_STATUS_INIT_APP_PRESENT             # <<<<<<<<<<<<<<
 * XL_FR_CHANNEL_CFG_STATUS_CHANNEL_ACTIVATED  = _XL_FR_CHANNEL_CFG_STATUS_CHANNEL_ACTIVATED
 * XL_FR_CHANNEL_CFG_STATUS_VALID_CFG_MODE     = _XL_FR_CHANNEL_CFG_STATUS_VALID_CFG_MODE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_CHANNEL_CFG_STATUS_INIT_APP_PRESENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_INIT_AP, __pyx_t_2) < 0) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1477
 * 
 * XL_FR_CHANNEL_CFG_STATUS_INIT_APP_PRESENT   = _XL_FR_CHANNEL_CFG_STATUS_INIT_APP_PRESENT
 * XL_FR_CHANNEL_CFG_STATUS_CHANNEL_ACTIVATED  = _XL_FR_CHANNEL_CFG_STATUS_CHANNEL_ACTIVATED             # <<<<<<<<<<<<<<
 * XL_FR_CHANNEL_CFG_STATUS_VALID_CFG_MODE     = _XL_FR_CHANNEL_CFG_STATUS_VALID_CFG_MODE
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_CHANNEL_CFG_STATUS_CHANNEL_ACTIVATED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_CHANNEL, __pyx_t_2) < 0) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1478
 * XL_FR_CHANNEL_CFG_STATUS_INIT_APP_PRESENT   = _XL_FR_CHANNEL_CFG_STATUS_INIT_APP_PRESENT
 * XL_FR_CHANNEL_CFG_STATUS_CHANNEL_ACTIVATED  = _XL_FR_CHANNEL_CFG_STATUS_CHANNEL_ACTIVATED
 * XL_FR_CHANNEL_CFG_STATUS_VALID_CFG_MODE     = _XL_FR_CHANNEL_CFG_STATUS_VALID_CFG_MODE             # <<<<<<<<<<<<<<
 * 
 * XL_FR_CHANNEL_CFG_MODE_SYNCHRONOUS          = _XL_FR_CHANNEL_CFG_MODE_SYNCHRONOUS
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_CHANNEL_CFG_STATUS_VALID_CFG_MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_CHANNEL_CFG_STATUS_VALID_C, __pyx_t_2) < 0) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1480
 * XL_FR_CHANNEL_CFG_STATUS_VALID_CFG_MODE     = _XL_FR_CHANNEL_CFG_STATUS_VALID_CFG_MODE
 * 
 * XL_FR_CHANNEL_CFG_MODE_SYNCHRONOUS          = _XL_FR_CHANNEL_CFG_MODE_SYNCHRONOUS             # <<<<<<<<<<<<<<
 * XL_FR_CHANNEL_CFG_MODE_COMBINED             = _XL_FR_CHANNEL_CFG_MODE_COMBINED
 * XL_FR_CHANNEL_CFG_MODE_ASYNCHRONOUS         = _XL_FR_CHANNEL_CFG_MODE_ASYNCHRONOUS
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_CHANNEL_CFG_MODE_SYNCHRONOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_CHANNEL_CFG_MODE_SYNCHRONO, __pyx_t_2) < 0) __PYX_ERR(0, 1480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1481
 * 
 * XL_FR_CHANNEL_CFG_MODE_SYNCHRONOUS          = _XL_FR_CHANNEL_CFG_MODE_SYNCHRONOUS
 * XL_FR_CHANNEL_CFG_MODE_COMBINED             = _XL_FR_CHANNEL_CFG_MODE_COMBINED             # <<<<<<<<<<<<<<
 * XL_FR_CHANNEL_CFG_MODE_ASYNCHRONOUS         = _XL_FR_CHANNEL_CFG_MODE_ASYNCHRONOUS
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_CHANNEL_CFG_MODE_COMBINED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_CHANNEL_CFG_MODE_COMBINED, __pyx_t_2) < 0) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1482
 * XL_FR_CHANNEL_CFG_MODE_SYNCHRONOUS          = _XL_FR_CHANNEL_CFG_MODE_SYNCHRONOUS
 * XL_FR_CHANNEL_CFG_MODE_COMBINED             = _XL_FR_CHANNEL_CFG_MODE_COMBINED
 * XL_FR_CHANNEL_CFG_MODE_ASYNCHRONOUS         = _XL_FR_CHANNEL_CFG_MODE_ASYNCHRONOUS             # <<<<<<<<<<<<<<
 * 
 * XL_FR_FILTER_PASS                           = _XL_FR_FILTER_PASS
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_CHANNEL_CFG_MODE_ASYNCHRONOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_CHANNEL_CFG_MODE_ASYNCHRON, __pyx_t_2) < 0) __PYX_ERR(0, 1482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1484
 * XL_FR_CHANNEL_CFG_MODE_ASYNCHRONOUS         = _XL_FR_CHANNEL_CFG_MODE_ASYNCHRONOUS
 * 
 * XL_FR_FILTER_PASS                           = _XL_FR_FILTER_PASS             # <<<<<<<<<<<<<<
 * XL_FR_FILTER_BLOCK                          = _XL_FR_FILTER_BLOCK
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FILTER_PASS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FILTER_PASS, __pyx_t_2) < 0) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1485
 * 
 * XL_FR_FILTER_PASS                           = _XL_FR_FILTER_PASS
 * XL_FR_FILTER_BLOCK                          = _XL_FR_FILTER_BLOCK             # <<<<<<<<<<<<<<
 * 
 * XL_FR_FILTER_TYPE_DATA                      = _XL_FR_FILTER_TYPE_DATA
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FILTER_BLOCK); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FILTER_BLOCK, __pyx_t_2) < 0) __PYX_ERR(0, 1485, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1487
 * XL_FR_FILTER_BLOCK                          = _XL_FR_FILTER_BLOCK
 * 
 * XL_FR_FILTER_TYPE_DATA                      = _XL_FR_FILTER_TYPE_DATA             # <<<<<<<<<<<<<<
 * XL_FR_FILTER_TYPE_NF                        = _XL_FR_FILTER_TYPE_NF
 * XL_FR_FILTER_TYPE_FILLUP_NF                 = _XL_FR_FILTER_TYPE_FILLUP_NF
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FILTER_TYPE_DATA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FILTER_TYPE_DATA, __pyx_t_2) < 0) __PYX_ERR(0, 1487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1488
 * 
 * XL_FR_FILTER_TYPE_DATA                      = _XL_FR_FILTER_TYPE_DATA
 * XL_FR_FILTER_TYPE_NF                        = _XL_FR_FILTER_TYPE_NF             # <<<<<<<<<<<<<<
 * XL_FR_FILTER_TYPE_FILLUP_NF                 = _XL_FR_FILTER_TYPE_FILLUP_NF
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FILTER_TYPE_NF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FILTER_TYPE_NF, __pyx_t_2) < 0) __PYX_ERR(0, 1488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1489
 * XL_FR_FILTER_TYPE_DATA                      = _XL_FR_FILTER_TYPE_DATA
 * XL_FR_FILTER_TYPE_NF                        = _XL_FR_FILTER_TYPE_NF
 * XL_FR_FILTER_TYPE_FILLUP_NF                 = _XL_FR_FILTER_TYPE_FILLUP_NF             # <<<<<<<<<<<<<<
 * 
 * XL_FR_FILTER_CHANNEL_A                      = _XL_FR_FILTER_CHANNEL_A
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FILTER_TYPE_FILLUP_NF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FILTER_TYPE_FILLUP_NF, __pyx_t_2) < 0) __PYX_ERR(0, 1489, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1491
 * XL_FR_FILTER_TYPE_FILLUP_NF                 = _XL_FR_FILTER_TYPE_FILLUP_NF
 * 
 * XL_FR_FILTER_CHANNEL_A                      = _XL_FR_FILTER_CHANNEL_A             # <<<<<<<<<<<<<<
 * XL_FR_FILTER_CHANNEL_B                      = _XL_FR_FILTER_CHANNEL_B
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FILTER_CHANNEL_A); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FILTER_CHANNEL_A, __pyx_t_2) < 0) __PYX_ERR(0, 1491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1492
 * 
 * XL_FR_FILTER_CHANNEL_A                      = _XL_FR_FILTER_CHANNEL_A
 * XL_FR_FILTER_CHANNEL_B                      = _XL_FR_FILTER_CHANNEL_B             # <<<<<<<<<<<<<<
 * 
 * XL_FR_START_CYCLE                           = _XL_FR_START_CYCLE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FILTER_CHANNEL_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FILTER_CHANNEL_B, __pyx_t_2) < 0) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1494
 * XL_FR_FILTER_CHANNEL_B                      = _XL_FR_FILTER_CHANNEL_B
 * 
 * XL_FR_START_CYCLE                           = _XL_FR_START_CYCLE             # <<<<<<<<<<<<<<
 * XL_FR_RX_FRAME                              = _XL_FR_RX_FRAME
 * XL_FR_TX_FRAME                              = _XL_FR_TX_FRAME
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_START_CYCLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_START_CYCLE, __pyx_t_2) < 0) __PYX_ERR(0, 1494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1495
 * 
 * XL_FR_START_CYCLE                           = _XL_FR_START_CYCLE
 * XL_FR_RX_FRAME                              = _XL_FR_RX_FRAME             # <<<<<<<<<<<<<<
 * XL_FR_TX_FRAME                              = _XL_FR_TX_FRAME
 * #XL_FR_TXACK_FRAME                           = _XL_FR_TXACK_FRAME
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_RX_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_RX_FRAME, __pyx_t_2) < 0) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1496
 * XL_FR_START_CYCLE                           = _XL_FR_START_CYCLE
 * XL_FR_RX_FRAME                              = _XL_FR_RX_FRAME
 * XL_FR_TX_FRAME                              = _XL_FR_TX_FRAME             # <<<<<<<<<<<<<<
 * #XL_FR_TXACK_FRAME                           = _XL_FR_TXACK_FRAME
 * #XL_FR_INVALID_FRAME                         = _XL_FR_INVALID_FRAME
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_TX_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_TX_FRAME, __pyx_t_2) < 0) __PYX_ERR(0, 1496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1499
 * #XL_FR_TXACK_FRAME                           = _XL_FR_TXACK_FRAME
 * #XL_FR_INVALID_FRAME                         = _XL_FR_INVALID_FRAME
 * XL_FR_WAKEUP                                = _XL_FR_WAKEUP             # <<<<<<<<<<<<<<
 * XL_FR_SYMBOL_WINDOW                         = _XL_FR_SYMBOL_WINDOW
 * XL_FR_ERROR                                 = _XL_FR_ERROR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_WAKEUP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_WAKEUP, __pyx_t_2) < 0) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1500
 * #XL_FR_INVALID_FRAME                         = _XL_FR_INVALID_FRAME
 * XL_FR_WAKEUP                                = _XL_FR_WAKEUP
 * XL_FR_SYMBOL_WINDOW                         = _XL_FR_SYMBOL_WINDOW             # <<<<<<<<<<<<<<
 * XL_FR_ERROR                                 = _XL_FR_ERROR
 * XL_FR_STATUS                                = _XL_FR_STATUS
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SYMBOL_WINDOW); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SYMBOL_WINDOW, __pyx_t_2) < 0) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1501
 * XL_FR_WAKEUP                                = _XL_FR_WAKEUP
 * XL_FR_SYMBOL_WINDOW                         = _XL_FR_SYMBOL_WINDOW
 * XL_FR_ERROR                                 = _XL_FR_ERROR             # <<<<<<<<<<<<<<
 * XL_FR_STATUS                                = _XL_FR_STATUS
 * XL_FR_NM_VECTOR                             = _XL_FR_NM_VECTOR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR, __pyx_t_2) < 0) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1502
 * XL_FR_SYMBOL_WINDOW                         = _XL_FR_SYMBOL_WINDOW
 * XL_FR_ERROR                                 = _XL_FR_ERROR
 * XL_FR_STATUS                                = _XL_FR_STATUS             # <<<<<<<<<<<<<<
 * XL_FR_NM_VECTOR                             = _XL_FR_NM_VECTOR
 * XL_FR_TRANCEIVER_STATUS                     = _XL_FR_TRANCEIVER_STATUS
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS, __pyx_t_2) < 0) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1503
 * XL_FR_ERROR                                 = _XL_FR_ERROR
 * XL_FR_STATUS                                = _XL_FR_STATUS
 * XL_FR_NM_VECTOR                             = _XL_FR_NM_VECTOR             # <<<<<<<<<<<<<<
 * XL_FR_TRANCEIVER_STATUS                     = _XL_FR_TRANCEIVER_STATUS
 * XL_FR_SPY_FRAME                             = _XL_FR_SPY_FRAME
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_NM_VECTOR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_NM_VECTOR, __pyx_t_2) < 0) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1504
 * XL_FR_STATUS                                = _XL_FR_STATUS
 * XL_FR_NM_VECTOR                             = _XL_FR_NM_VECTOR
 * XL_FR_TRANCEIVER_STATUS                     = _XL_FR_TRANCEIVER_STATUS             # <<<<<<<<<<<<<<
 * XL_FR_SPY_FRAME                             = _XL_FR_SPY_FRAME
 * XL_FR_SPY_SYMBOL                            = _XL_FR_SPY_SYMBOL
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_TRANCEIVER_STATUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_TRANCEIVER_STATUS, __pyx_t_2) < 0) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1505
 * XL_FR_NM_VECTOR                             = _XL_FR_NM_VECTOR
 * XL_FR_TRANCEIVER_STATUS                     = _XL_FR_TRANCEIVER_STATUS
 * XL_FR_SPY_FRAME                             = _XL_FR_SPY_FRAME             # <<<<<<<<<<<<<<
 * XL_FR_SPY_SYMBOL                            = _XL_FR_SPY_SYMBOL
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SPY_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SPY_FRAME, __pyx_t_2) < 0) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1506
 * XL_FR_TRANCEIVER_STATUS                     = _XL_FR_TRANCEIVER_STATUS
 * XL_FR_SPY_FRAME                             = _XL_FR_SPY_FRAME
 * XL_FR_SPY_SYMBOL                            = _XL_FR_SPY_SYMBOL             # <<<<<<<<<<<<<<
 * 
 * XL_FR_CHANNEL_A                             = _XL_FR_CHANNEL_A
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SPY_SYMBOL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SPY_SYMBOL, __pyx_t_2) < 0) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1508
 * XL_FR_SPY_SYMBOL                            = _XL_FR_SPY_SYMBOL
 * 
 * XL_FR_CHANNEL_A                             = _XL_FR_CHANNEL_A             # <<<<<<<<<<<<<<
 * XL_FR_CHANNEL_B                             = _XL_FR_CHANNEL_B
 * XL_FR_CHANNEL_AB                            = _XL_FR_CHANNEL_AB
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_CHANNEL_A); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_CHANNEL_A, __pyx_t_2) < 0) __PYX_ERR(0, 1508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1509
 * 
 * XL_FR_CHANNEL_A                             = _XL_FR_CHANNEL_A
 * XL_FR_CHANNEL_B                             = _XL_FR_CHANNEL_B             # <<<<<<<<<<<<<<
 * XL_FR_CHANNEL_AB                            = _XL_FR_CHANNEL_AB
 * XL_FR_SPY_CHANNEL_A                         = _XL_FR_SPY_CHANNEL_A
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_CHANNEL_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_CHANNEL_B, __pyx_t_2) < 0) __PYX_ERR(0, 1509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1510
 * XL_FR_CHANNEL_A                             = _XL_FR_CHANNEL_A
 * XL_FR_CHANNEL_B                             = _XL_FR_CHANNEL_B
 * XL_FR_CHANNEL_AB                            = _XL_FR_CHANNEL_AB             # <<<<<<<<<<<<<<
 * XL_FR_SPY_CHANNEL_A                         = _XL_FR_SPY_CHANNEL_A
 * XL_FR_SPY_CHANNEL_B                         = _XL_FR_SPY_CHANNEL_B
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_CHANNEL_AB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_CHANNEL_AB, __pyx_t_2) < 0) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1511
 * XL_FR_CHANNEL_B                             = _XL_FR_CHANNEL_B
 * XL_FR_CHANNEL_AB                            = _XL_FR_CHANNEL_AB
 * XL_FR_SPY_CHANNEL_A                         = _XL_FR_SPY_CHANNEL_A             # <<<<<<<<<<<<<<
 * XL_FR_SPY_CHANNEL_B                         = _XL_FR_SPY_CHANNEL_B
 * XL_FR_CC_COLD_A                             = _XL_FR_CC_COLD_A
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SPY_CHANNEL_A); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SPY_CHANNEL_A, __pyx_t_2) < 0) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1512
 * XL_FR_CHANNEL_AB                            = _XL_FR_CHANNEL_AB
 * XL_FR_SPY_CHANNEL_A                         = _XL_FR_SPY_CHANNEL_A
 * XL_FR_SPY_CHANNEL_B                         = _XL_FR_SPY_CHANNEL_B             # <<<<<<<<<<<<<<
 * XL_FR_CC_COLD_A                             = _XL_FR_CC_COLD_A
 * XL_FR_CC_COLD_B                             = _XL_FR_CC_COLD_B
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SPY_CHANNEL_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SPY_CHANNEL_B, __pyx_t_2) < 0) __PYX_ERR(0, 1512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1513
 * XL_FR_SPY_CHANNEL_A                         = _XL_FR_SPY_CHANNEL_A
 * XL_FR_SPY_CHANNEL_B                         = _XL_FR_SPY_CHANNEL_B
 * XL_FR_CC_COLD_A                             = _XL_FR_CC_COLD_A             # <<<<<<<<<<<<<<
 * XL_FR_CC_COLD_B                             = _XL_FR_CC_COLD_B
 * XL_FR_QUEUE_OVERFLOW                        = _XL_FR_QUEUE_OVERFLOW
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_CC_COLD_A); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_CC_COLD_A, __pyx_t_2) < 0) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1514
 * XL_FR_SPY_CHANNEL_B                         = _XL_FR_SPY_CHANNEL_B
 * XL_FR_CC_COLD_A                             = _XL_FR_CC_COLD_A
 * XL_FR_CC_COLD_B                             = _XL_FR_CC_COLD_B             # <<<<<<<<<<<<<<
 * XL_FR_QUEUE_OVERFLOW                        = _XL_FR_QUEUE_OVERFLOW
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_CC_COLD_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_CC_COLD_B, __pyx_t_2) < 0) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1515
 * XL_FR_CC_COLD_A                             = _XL_FR_CC_COLD_A
 * XL_FR_CC_COLD_B                             = _XL_FR_CC_COLD_B
 * XL_FR_QUEUE_OVERFLOW                        = _XL_FR_QUEUE_OVERFLOW             # <<<<<<<<<<<<<<
 * 
 * XL_FR_FRAMEFLAG_STARTUP                     = _XL_FR_FRAMEFLAG_STARTUP
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_QUEUE_OVERFLOW); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_QUEUE_OVERFLOW, __pyx_t_2) < 0) __PYX_ERR(0, 1515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1517
 * XL_FR_QUEUE_OVERFLOW                        = _XL_FR_QUEUE_OVERFLOW
 * 
 * XL_FR_FRAMEFLAG_STARTUP                     = _XL_FR_FRAMEFLAG_STARTUP             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_SYNC                        = _XL_FR_FRAMEFLAG_SYNC
 * XL_FR_FRAMEFLAG_NULLFRAME                   = _XL_FR_FRAMEFLAG_NULLFRAME
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_STARTUP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_STARTUP, __pyx_t_2) < 0) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1518
 * 
 * XL_FR_FRAMEFLAG_STARTUP                     = _XL_FR_FRAMEFLAG_STARTUP
 * XL_FR_FRAMEFLAG_SYNC                        = _XL_FR_FRAMEFLAG_SYNC             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_NULLFRAME                   = _XL_FR_FRAMEFLAG_NULLFRAME
 * XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE            = _XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_SYNC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_SYNC, __pyx_t_2) < 0) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1519
 * XL_FR_FRAMEFLAG_STARTUP                     = _XL_FR_FRAMEFLAG_STARTUP
 * XL_FR_FRAMEFLAG_SYNC                        = _XL_FR_FRAMEFLAG_SYNC
 * XL_FR_FRAMEFLAG_NULLFRAME                   = _XL_FR_FRAMEFLAG_NULLFRAME             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE            = _XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE
 * XL_FR_FRAMEFLAG_FR_RESERVED                 = _XL_FR_FRAMEFLAG_FR_RESERVED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_NULLFRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_NULLFRAME, __pyx_t_2) < 0) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1520
 * XL_FR_FRAMEFLAG_SYNC                        = _XL_FR_FRAMEFLAG_SYNC
 * XL_FR_FRAMEFLAG_NULLFRAME                   = _XL_FR_FRAMEFLAG_NULLFRAME
 * XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE            = _XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_FR_RESERVED                 = _XL_FR_FRAMEFLAG_FR_RESERVED
 * XL_FR_FRAMEFLAG_REQ_TXACK                   = _XL_FR_FRAMEFLAG_REQ_TXACK
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE, __pyx_t_2) < 0) __PYX_ERR(0, 1520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1521
 * XL_FR_FRAMEFLAG_NULLFRAME                   = _XL_FR_FRAMEFLAG_NULLFRAME
 * XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE            = _XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE
 * XL_FR_FRAMEFLAG_FR_RESERVED                 = _XL_FR_FRAMEFLAG_FR_RESERVED             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_REQ_TXACK                   = _XL_FR_FRAMEFLAG_REQ_TXACK
 * XL_FR_FRAMEFLAG_TXACK_SS                    = _XL_FR_FRAMEFLAG_TXACK_SS
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_FR_RESERVED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_FR_RESERVED, __pyx_t_2) < 0) __PYX_ERR(0, 1521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1522
 * XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE            = _XL_FR_FRAMEFLAG_PAYLOAD_PREAMBLE
 * XL_FR_FRAMEFLAG_FR_RESERVED                 = _XL_FR_FRAMEFLAG_FR_RESERVED
 * XL_FR_FRAMEFLAG_REQ_TXACK                   = _XL_FR_FRAMEFLAG_REQ_TXACK             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_TXACK_SS                    = _XL_FR_FRAMEFLAG_TXACK_SS
 * XL_FR_FRAMEFLAG_RX_UNEXPECTED               = _XL_FR_FRAMEFLAG_RX_UNEXPECTED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_REQ_TXACK); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_REQ_TXACK, __pyx_t_2) < 0) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1523
 * XL_FR_FRAMEFLAG_FR_RESERVED                 = _XL_FR_FRAMEFLAG_FR_RESERVED
 * XL_FR_FRAMEFLAG_REQ_TXACK                   = _XL_FR_FRAMEFLAG_REQ_TXACK
 * XL_FR_FRAMEFLAG_TXACK_SS                    = _XL_FR_FRAMEFLAG_TXACK_SS             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_RX_UNEXPECTED               = _XL_FR_FRAMEFLAG_RX_UNEXPECTED
 * XL_FR_FRAMEFLAG_NEW_DATA_TX                 = _XL_FR_FRAMEFLAG_NEW_DATA_TX
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_TXACK_SS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_TXACK_SS, __pyx_t_2) < 0) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1524
 * XL_FR_FRAMEFLAG_REQ_TXACK                   = _XL_FR_FRAMEFLAG_REQ_TXACK
 * XL_FR_FRAMEFLAG_TXACK_SS                    = _XL_FR_FRAMEFLAG_TXACK_SS
 * XL_FR_FRAMEFLAG_RX_UNEXPECTED               = _XL_FR_FRAMEFLAG_RX_UNEXPECTED             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_NEW_DATA_TX                 = _XL_FR_FRAMEFLAG_NEW_DATA_TX
 * XL_FR_FRAMEFLAG_DATA_UPDATE_LOST            = _XL_FR_FRAMEFLAG_DATA_UPDATE_LOST
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_RX_UNEXPECTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_RX_UNEXPECTED, __pyx_t_2) < 0) __PYX_ERR(0, 1524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1525
 * XL_FR_FRAMEFLAG_TXACK_SS                    = _XL_FR_FRAMEFLAG_TXACK_SS
 * XL_FR_FRAMEFLAG_RX_UNEXPECTED               = _XL_FR_FRAMEFLAG_RX_UNEXPECTED
 * XL_FR_FRAMEFLAG_NEW_DATA_TX                 = _XL_FR_FRAMEFLAG_NEW_DATA_TX             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_DATA_UPDATE_LOST            = _XL_FR_FRAMEFLAG_DATA_UPDATE_LOST
 * XL_FR_FRAMEFLAG_SYNTAX_ERROR                = _XL_FR_FRAMEFLAG_SYNTAX_ERROR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_NEW_DATA_TX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_NEW_DATA_TX, __pyx_t_2) < 0) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1526
 * XL_FR_FRAMEFLAG_RX_UNEXPECTED               = _XL_FR_FRAMEFLAG_RX_UNEXPECTED
 * XL_FR_FRAMEFLAG_NEW_DATA_TX                 = _XL_FR_FRAMEFLAG_NEW_DATA_TX
 * XL_FR_FRAMEFLAG_DATA_UPDATE_LOST            = _XL_FR_FRAMEFLAG_DATA_UPDATE_LOST             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_SYNTAX_ERROR                = _XL_FR_FRAMEFLAG_SYNTAX_ERROR
 * XL_FR_FRAMEFLAG_CONTENT_ERROR               = _XL_FR_FRAMEFLAG_CONTENT_ERROR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_DATA_UPDATE_LOST); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_DATA_UPDATE_LOST, __pyx_t_2) < 0) __PYX_ERR(0, 1526, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1527
 * XL_FR_FRAMEFLAG_NEW_DATA_TX                 = _XL_FR_FRAMEFLAG_NEW_DATA_TX
 * XL_FR_FRAMEFLAG_DATA_UPDATE_LOST            = _XL_FR_FRAMEFLAG_DATA_UPDATE_LOST
 * XL_FR_FRAMEFLAG_SYNTAX_ERROR                = _XL_FR_FRAMEFLAG_SYNTAX_ERROR             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_CONTENT_ERROR               = _XL_FR_FRAMEFLAG_CONTENT_ERROR
 * XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION     = _XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_SYNTAX_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_SYNTAX_ERROR, __pyx_t_2) < 0) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1528
 * XL_FR_FRAMEFLAG_DATA_UPDATE_LOST            = _XL_FR_FRAMEFLAG_DATA_UPDATE_LOST
 * XL_FR_FRAMEFLAG_SYNTAX_ERROR                = _XL_FR_FRAMEFLAG_SYNTAX_ERROR
 * XL_FR_FRAMEFLAG_CONTENT_ERROR               = _XL_FR_FRAMEFLAG_CONTENT_ERROR             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION     = _XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION
 * XL_FR_FRAMEFLAG_TX_CONFLICT                 = _XL_FR_FRAMEFLAG_TX_CONFLICT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_CONTENT_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_CONTENT_ERROR, __pyx_t_2) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1529
 * XL_FR_FRAMEFLAG_SYNTAX_ERROR                = _XL_FR_FRAMEFLAG_SYNTAX_ERROR
 * XL_FR_FRAMEFLAG_CONTENT_ERROR               = _XL_FR_FRAMEFLAG_CONTENT_ERROR
 * XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION     = _XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_TX_CONFLICT                 = _XL_FR_FRAMEFLAG_TX_CONFLICT
 * XL_FR_FRAMEFLAG_EMPTY_SLOT                  = _XL_FR_FRAMEFLAG_EMPTY_SLOT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VI, __pyx_t_2) < 0) __PYX_ERR(0, 1529, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1530
 * XL_FR_FRAMEFLAG_CONTENT_ERROR               = _XL_FR_FRAMEFLAG_CONTENT_ERROR
 * XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION     = _XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION
 * XL_FR_FRAMEFLAG_TX_CONFLICT                 = _XL_FR_FRAMEFLAG_TX_CONFLICT             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_EMPTY_SLOT                  = _XL_FR_FRAMEFLAG_EMPTY_SLOT
 * XL_FR_FRAMEFLAG_FRAME_TRANSMITTED           = _XL_FR_FRAMEFLAG_FRAME_TRANSMITTED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_TX_CONFLICT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_TX_CONFLICT, __pyx_t_2) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1531
 * XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION     = _XL_FR_FRAMEFLAG_SLOT_BOUNDARY_VIOLATION
 * XL_FR_FRAMEFLAG_TX_CONFLICT                 = _XL_FR_FRAMEFLAG_TX_CONFLICT
 * XL_FR_FRAMEFLAG_EMPTY_SLOT                  = _XL_FR_FRAMEFLAG_EMPTY_SLOT             # <<<<<<<<<<<<<<
 * XL_FR_FRAMEFLAG_FRAME_TRANSMITTED           = _XL_FR_FRAMEFLAG_FRAME_TRANSMITTED
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_EMPTY_SLOT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_EMPTY_SLOT, __pyx_t_2) < 0) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1532
 * XL_FR_FRAMEFLAG_TX_CONFLICT                 = _XL_FR_FRAMEFLAG_TX_CONFLICT
 * XL_FR_FRAMEFLAG_EMPTY_SLOT                  = _XL_FR_FRAMEFLAG_EMPTY_SLOT
 * XL_FR_FRAMEFLAG_FRAME_TRANSMITTED           = _XL_FR_FRAMEFLAG_FRAME_TRANSMITTED             # <<<<<<<<<<<<<<
 * 
 * XL_FR_SPY_FRAMEFLAG_FRAMING_ERROR           = _XL_FR_SPY_FRAMEFLAG_FRAMING_ERROR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_FRAMEFLAG_FRAME_TRANSMITTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_FRAMEFLAG_FRAME_TRANSMITTE, __pyx_t_2) < 0) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1534
 * XL_FR_FRAMEFLAG_FRAME_TRANSMITTED           = _XL_FR_FRAMEFLAG_FRAME_TRANSMITTED
 * 
 * XL_FR_SPY_FRAMEFLAG_FRAMING_ERROR           = _XL_FR_SPY_FRAMEFLAG_FRAMING_ERROR             # <<<<<<<<<<<<<<
 * XL_FR_SPY_FRAMEFLAG_HEADER_CRC_ERROR        = _XL_FR_SPY_FRAMEFLAG_HEADER_CRC_ERROR
 * XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ERROR         = _XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ERROR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SPY_FRAMEFLAG_FRAMING_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAMING_ERRO, __pyx_t_2) < 0) __PYX_ERR(0, 1534, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1535
 * 
 * XL_FR_SPY_FRAMEFLAG_FRAMING_ERROR           = _XL_FR_SPY_FRAMEFLAG_FRAMING_ERROR
 * XL_FR_SPY_FRAMEFLAG_HEADER_CRC_ERROR        = _XL_FR_SPY_FRAMEFLAG_HEADER_CRC_ERROR             # <<<<<<<<<<<<<<
 * XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ERROR         = _XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ERROR
 * XL_FR_SPY_FRAMEFLAG_BUS_ERROR               = _XL_FR_SPY_FRAMEFLAG_BUS_ERROR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SPY_FRAMEFLAG_HEADER_CRC_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SPY_FRAMEFLAG_HEADER_CRC_E, __pyx_t_2) < 0) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1536
 * XL_FR_SPY_FRAMEFLAG_FRAMING_ERROR           = _XL_FR_SPY_FRAMEFLAG_FRAMING_ERROR
 * XL_FR_SPY_FRAMEFLAG_HEADER_CRC_ERROR        = _XL_FR_SPY_FRAMEFLAG_HEADER_CRC_ERROR
 * XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ERROR         = _XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ERROR             # <<<<<<<<<<<<<<
 * XL_FR_SPY_FRAMEFLAG_BUS_ERROR               = _XL_FR_SPY_FRAMEFLAG_BUS_ERROR
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ER, __pyx_t_2) < 0) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1537
 * XL_FR_SPY_FRAMEFLAG_HEADER_CRC_ERROR        = _XL_FR_SPY_FRAMEFLAG_HEADER_CRC_ERROR
 * XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ERROR         = _XL_FR_SPY_FRAMEFLAG_FRAME_CRC_ERROR
 * XL_FR_SPY_FRAMEFLAG_BUS_ERROR               = _XL_FR_SPY_FRAMEFLAG_BUS_ERROR             # <<<<<<<<<<<<<<
 * 
 * XL_FR_TX_MODE_CYCLIC                        = _XL_FR_TX_MODE_CYCLIC
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SPY_FRAMEFLAG_BUS_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SPY_FRAMEFLAG_BUS_ERROR, __pyx_t_2) < 0) __PYX_ERR(0, 1537, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1539
 * XL_FR_SPY_FRAMEFLAG_BUS_ERROR               = _XL_FR_SPY_FRAMEFLAG_BUS_ERROR
 * 
 * XL_FR_TX_MODE_CYCLIC                        = _XL_FR_TX_MODE_CYCLIC             # <<<<<<<<<<<<<<
 * XL_FR_TX_MODE_SINGLE_SHOT                   = _XL_FR_TX_MODE_SINGLE_SHOT
 * XL_FR_TX_MODE_NONE                          = _XL_FR_TX_MODE_NONE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_TX_MODE_CYCLIC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_TX_MODE_CYCLIC, __pyx_t_2) < 0) __PYX_ERR(0, 1539, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1540
 * 
 * XL_FR_TX_MODE_CYCLIC                        = _XL_FR_TX_MODE_CYCLIC
 * XL_FR_TX_MODE_SINGLE_SHOT                   = _XL_FR_TX_MODE_SINGLE_SHOT             # <<<<<<<<<<<<<<
 * XL_FR_TX_MODE_NONE                          = _XL_FR_TX_MODE_NONE
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_TX_MODE_SINGLE_SHOT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_TX_MODE_SINGLE_SHOT, __pyx_t_2) < 0) __PYX_ERR(0, 1540, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1541
 * XL_FR_TX_MODE_CYCLIC                        = _XL_FR_TX_MODE_CYCLIC
 * XL_FR_TX_MODE_SINGLE_SHOT                   = _XL_FR_TX_MODE_SINGLE_SHOT
 * XL_FR_TX_MODE_NONE                          = _XL_FR_TX_MODE_NONE             # <<<<<<<<<<<<<<
 * 
 * XL_FR_PAYLOAD_INCREMENT_8BIT                = _XL_FR_PAYLOAD_INCREMENT_8BIT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_TX_MODE_NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_TX_MODE_NONE, __pyx_t_2) < 0) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1543
 * XL_FR_TX_MODE_NONE                          = _XL_FR_TX_MODE_NONE
 * 
 * XL_FR_PAYLOAD_INCREMENT_8BIT                = _XL_FR_PAYLOAD_INCREMENT_8BIT             # <<<<<<<<<<<<<<
 * XL_FR_PAYLOAD_INCREMENT_16BIT               = _XL_FR_PAYLOAD_INCREMENT_16BIT
 * XL_FR_PAYLOAD_INCREMENT_32BIT               = _XL_FR_PAYLOAD_INCREMENT_32BIT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_PAYLOAD_INCREMENT_8BIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_PAYLOAD_INCREMENT_8BIT, __pyx_t_2) < 0) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1544
 * 
 * XL_FR_PAYLOAD_INCREMENT_8BIT                = _XL_FR_PAYLOAD_INCREMENT_8BIT
 * XL_FR_PAYLOAD_INCREMENT_16BIT               = _XL_FR_PAYLOAD_INCREMENT_16BIT             # <<<<<<<<<<<<<<
 * XL_FR_PAYLOAD_INCREMENT_32BIT               = _XL_FR_PAYLOAD_INCREMENT_32BIT
 * XL_FR_PAYLOAD_INCREMENT_NONE                = _XL_FR_PAYLOAD_INCREMENT_NONE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_PAYLOAD_INCREMENT_16BIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_PAYLOAD_INCREMENT_16BIT, __pyx_t_2) < 0) __PYX_ERR(0, 1544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1545
 * XL_FR_PAYLOAD_INCREMENT_8BIT                = _XL_FR_PAYLOAD_INCREMENT_8BIT
 * XL_FR_PAYLOAD_INCREMENT_16BIT               = _XL_FR_PAYLOAD_INCREMENT_16BIT
 * XL_FR_PAYLOAD_INCREMENT_32BIT               = _XL_FR_PAYLOAD_INCREMENT_32BIT             # <<<<<<<<<<<<<<
 * XL_FR_PAYLOAD_INCREMENT_NONE                = _XL_FR_PAYLOAD_INCREMENT_NONE
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_PAYLOAD_INCREMENT_32BIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_PAYLOAD_INCREMENT_32BIT, __pyx_t_2) < 0) __PYX_ERR(0, 1545, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1546
 * XL_FR_PAYLOAD_INCREMENT_16BIT               = _XL_FR_PAYLOAD_INCREMENT_16BIT
 * XL_FR_PAYLOAD_INCREMENT_32BIT               = _XL_FR_PAYLOAD_INCREMENT_32BIT
 * XL_FR_PAYLOAD_INCREMENT_NONE                = _XL_FR_PAYLOAD_INCREMENT_NONE             # <<<<<<<<<<<<<<
 * 
 * XL_FR_WAKEUP_UNDEFINED                      = _XL_FR_WAKEUP_UNDEFINED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_PAYLOAD_INCREMENT_NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_PAYLOAD_INCREMENT_NONE, __pyx_t_2) < 0) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1548
 * XL_FR_PAYLOAD_INCREMENT_NONE                = _XL_FR_PAYLOAD_INCREMENT_NONE
 * 
 * XL_FR_WAKEUP_UNDEFINED                      = _XL_FR_WAKEUP_UNDEFINED             # <<<<<<<<<<<<<<
 * XL_FR_WAKEUP_RECEIVED_HEADER                = _XL_FR_WAKEUP_RECEIVED_HEADER
 * XL_FR_WAKEUP_RECEIVED_WUP                   = _XL_FR_WAKEUP_RECEIVED_WUP
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_WAKEUP_UNDEFINED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_WAKEUP_UNDEFINED, __pyx_t_2) < 0) __PYX_ERR(0, 1548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1549
 * 
 * XL_FR_WAKEUP_UNDEFINED                      = _XL_FR_WAKEUP_UNDEFINED
 * XL_FR_WAKEUP_RECEIVED_HEADER                = _XL_FR_WAKEUP_RECEIVED_HEADER             # <<<<<<<<<<<<<<
 * XL_FR_WAKEUP_RECEIVED_WUP                   = _XL_FR_WAKEUP_RECEIVED_WUP
 * XL_FR_WAKEUP_COLLISION_HEADER               = _XL_FR_WAKEUP_COLLISION_HEADER
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_WAKEUP_RECEIVED_HEADER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_WAKEUP_RECEIVED_HEADER, __pyx_t_2) < 0) __PYX_ERR(0, 1549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1550
 * XL_FR_WAKEUP_UNDEFINED                      = _XL_FR_WAKEUP_UNDEFINED
 * XL_FR_WAKEUP_RECEIVED_HEADER                = _XL_FR_WAKEUP_RECEIVED_HEADER
 * XL_FR_WAKEUP_RECEIVED_WUP                   = _XL_FR_WAKEUP_RECEIVED_WUP             # <<<<<<<<<<<<<<
 * XL_FR_WAKEUP_COLLISION_HEADER               = _XL_FR_WAKEUP_COLLISION_HEADER
 * XL_FR_WAKEUP_COLLISION_WUP                  = _XL_FR_WAKEUP_COLLISION_WUP
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_WAKEUP_RECEIVED_WUP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_WAKEUP_RECEIVED_WUP, __pyx_t_2) < 0) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1551
 * XL_FR_WAKEUP_RECEIVED_HEADER                = _XL_FR_WAKEUP_RECEIVED_HEADER
 * XL_FR_WAKEUP_RECEIVED_WUP                   = _XL_FR_WAKEUP_RECEIVED_WUP
 * XL_FR_WAKEUP_COLLISION_HEADER               = _XL_FR_WAKEUP_COLLISION_HEADER             # <<<<<<<<<<<<<<
 * XL_FR_WAKEUP_COLLISION_WUP                  = _XL_FR_WAKEUP_COLLISION_WUP
 * XL_FR_WAKEUP_COLLISION_UNKNOWN              = _XL_FR_WAKEUP_COLLISION_UNKNOWN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_WAKEUP_COLLISION_HEADER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_WAKEUP_COLLISION_HEADER, __pyx_t_2) < 0) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1552
 * XL_FR_WAKEUP_RECEIVED_WUP                   = _XL_FR_WAKEUP_RECEIVED_WUP
 * XL_FR_WAKEUP_COLLISION_HEADER               = _XL_FR_WAKEUP_COLLISION_HEADER
 * XL_FR_WAKEUP_COLLISION_WUP                  = _XL_FR_WAKEUP_COLLISION_WUP             # <<<<<<<<<<<<<<
 * XL_FR_WAKEUP_COLLISION_UNKNOWN              = _XL_FR_WAKEUP_COLLISION_UNKNOWN
 * XL_FR_WAKEUP_TRANSMITTED                    = _XL_FR_WAKEUP_TRANSMITTED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_WAKEUP_COLLISION_WUP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_WAKEUP_COLLISION_WUP, __pyx_t_2) < 0) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1553
 * XL_FR_WAKEUP_COLLISION_HEADER               = _XL_FR_WAKEUP_COLLISION_HEADER
 * XL_FR_WAKEUP_COLLISION_WUP                  = _XL_FR_WAKEUP_COLLISION_WUP
 * XL_FR_WAKEUP_COLLISION_UNKNOWN              = _XL_FR_WAKEUP_COLLISION_UNKNOWN             # <<<<<<<<<<<<<<
 * XL_FR_WAKEUP_TRANSMITTED                    = _XL_FR_WAKEUP_TRANSMITTED
 * XL_FR_WAKEUP_RESERVED                       = _XL_FR_WAKEUP_RESERVED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_WAKEUP_COLLISION_UNKNOWN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_WAKEUP_COLLISION_UNKNOWN, __pyx_t_2) < 0) __PYX_ERR(0, 1553, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1554
 * XL_FR_WAKEUP_COLLISION_WUP                  = _XL_FR_WAKEUP_COLLISION_WUP
 * XL_FR_WAKEUP_COLLISION_UNKNOWN              = _XL_FR_WAKEUP_COLLISION_UNKNOWN
 * XL_FR_WAKEUP_TRANSMITTED                    = _XL_FR_WAKEUP_TRANSMITTED             # <<<<<<<<<<<<<<
 * XL_FR_WAKEUP_RESERVED                       = _XL_FR_WAKEUP_RESERVED
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_WAKEUP_TRANSMITTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_WAKEUP_TRANSMITTED, __pyx_t_2) < 0) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1555
 * XL_FR_WAKEUP_COLLISION_UNKNOWN              = _XL_FR_WAKEUP_COLLISION_UNKNOWN
 * XL_FR_WAKEUP_TRANSMITTED                    = _XL_FR_WAKEUP_TRANSMITTED
 * XL_FR_WAKEUP_RESERVED                       = _XL_FR_WAKEUP_RESERVED             # <<<<<<<<<<<<<<
 * 
 * XL_FR_SYMBOL_MTS                            = _XL_FR_SYMBOL_MTS
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_WAKEUP_RESERVED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_WAKEUP_RESERVED, __pyx_t_2) < 0) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1557
 * XL_FR_WAKEUP_RESERVED                       = _XL_FR_WAKEUP_RESERVED
 * 
 * XL_FR_SYMBOL_MTS                            = _XL_FR_SYMBOL_MTS             # <<<<<<<<<<<<<<
 * XL_FR_SYMBOL_CAS                            = _XL_FR_SYMBOL_CAS
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SYMBOL_MTS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SYMBOL_MTS, __pyx_t_2) < 0) __PYX_ERR(0, 1557, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1558
 * 
 * XL_FR_SYMBOL_MTS                            = _XL_FR_SYMBOL_MTS
 * XL_FR_SYMBOL_CAS                            = _XL_FR_SYMBOL_CAS             # <<<<<<<<<<<<<<
 * 
 * XL_FR_SYMBOL_STATUS_SESA                    = _XL_FR_SYMBOL_STATUS_SESA
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SYMBOL_CAS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SYMBOL_CAS, __pyx_t_2) < 0) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1560
 * XL_FR_SYMBOL_CAS                            = _XL_FR_SYMBOL_CAS
 * 
 * XL_FR_SYMBOL_STATUS_SESA                    = _XL_FR_SYMBOL_STATUS_SESA             # <<<<<<<<<<<<<<
 * XL_FR_SYMBOL_STATUS_SBSA                    = _XL_FR_SYMBOL_STATUS_SBSA
 * XL_FR_SYMBOL_STATUS_TCSA                    = _XL_FR_SYMBOL_STATUS_TCSA
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SYMBOL_STATUS_SESA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SYMBOL_STATUS_SESA, __pyx_t_2) < 0) __PYX_ERR(0, 1560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1561
 * 
 * XL_FR_SYMBOL_STATUS_SESA                    = _XL_FR_SYMBOL_STATUS_SESA
 * XL_FR_SYMBOL_STATUS_SBSA                    = _XL_FR_SYMBOL_STATUS_SBSA             # <<<<<<<<<<<<<<
 * XL_FR_SYMBOL_STATUS_TCSA                    = _XL_FR_SYMBOL_STATUS_TCSA
 * XL_FR_SYMBOL_STATUS_SESB                    = _XL_FR_SYMBOL_STATUS_SESB
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SYMBOL_STATUS_SBSA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SYMBOL_STATUS_SBSA, __pyx_t_2) < 0) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1562
 * XL_FR_SYMBOL_STATUS_SESA                    = _XL_FR_SYMBOL_STATUS_SESA
 * XL_FR_SYMBOL_STATUS_SBSA                    = _XL_FR_SYMBOL_STATUS_SBSA
 * XL_FR_SYMBOL_STATUS_TCSA                    = _XL_FR_SYMBOL_STATUS_TCSA             # <<<<<<<<<<<<<<
 * XL_FR_SYMBOL_STATUS_SESB                    = _XL_FR_SYMBOL_STATUS_SESB
 * XL_FR_SYMBOL_STATUS_SBSB                    = _XL_FR_SYMBOL_STATUS_SBSB
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SYMBOL_STATUS_TCSA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SYMBOL_STATUS_TCSA, __pyx_t_2) < 0) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1563
 * XL_FR_SYMBOL_STATUS_SBSA                    = _XL_FR_SYMBOL_STATUS_SBSA
 * XL_FR_SYMBOL_STATUS_TCSA                    = _XL_FR_SYMBOL_STATUS_TCSA
 * XL_FR_SYMBOL_STATUS_SESB                    = _XL_FR_SYMBOL_STATUS_SESB             # <<<<<<<<<<<<<<
 * XL_FR_SYMBOL_STATUS_SBSB                    = _XL_FR_SYMBOL_STATUS_SBSB
 * XL_FR_SYMBOL_STATUS_TCSB                    = _XL_FR_SYMBOL_STATUS_TCSB
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SYMBOL_STATUS_SESB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SYMBOL_STATUS_SESB, __pyx_t_2) < 0) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1564
 * XL_FR_SYMBOL_STATUS_TCSA                    = _XL_FR_SYMBOL_STATUS_TCSA
 * XL_FR_SYMBOL_STATUS_SESB                    = _XL_FR_SYMBOL_STATUS_SESB
 * XL_FR_SYMBOL_STATUS_SBSB                    = _XL_FR_SYMBOL_STATUS_SBSB             # <<<<<<<<<<<<<<
 * XL_FR_SYMBOL_STATUS_TCSB                    = _XL_FR_SYMBOL_STATUS_TCSB
 * XL_FR_SYMBOL_STATUS_MTSA                    = _XL_FR_SYMBOL_STATUS_MTSA
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SYMBOL_STATUS_SBSB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SYMBOL_STATUS_SBSB, __pyx_t_2) < 0) __PYX_ERR(0, 1564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1565
 * XL_FR_SYMBOL_STATUS_SESB                    = _XL_FR_SYMBOL_STATUS_SESB
 * XL_FR_SYMBOL_STATUS_SBSB                    = _XL_FR_SYMBOL_STATUS_SBSB
 * XL_FR_SYMBOL_STATUS_TCSB                    = _XL_FR_SYMBOL_STATUS_TCSB             # <<<<<<<<<<<<<<
 * XL_FR_SYMBOL_STATUS_MTSA                    = _XL_FR_SYMBOL_STATUS_MTSA
 * XL_FR_SYMBOL_STATUS_MTSB                    = _XL_FR_SYMBOL_STATUS_MTSB
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SYMBOL_STATUS_TCSB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SYMBOL_STATUS_TCSB, __pyx_t_2) < 0) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1566
 * XL_FR_SYMBOL_STATUS_SBSB                    = _XL_FR_SYMBOL_STATUS_SBSB
 * XL_FR_SYMBOL_STATUS_TCSB                    = _XL_FR_SYMBOL_STATUS_TCSB
 * XL_FR_SYMBOL_STATUS_MTSA                    = _XL_FR_SYMBOL_STATUS_MTSA             # <<<<<<<<<<<<<<
 * XL_FR_SYMBOL_STATUS_MTSB                    = _XL_FR_SYMBOL_STATUS_MTSB
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SYMBOL_STATUS_MTSA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SYMBOL_STATUS_MTSA, __pyx_t_2) < 0) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1567
 * XL_FR_SYMBOL_STATUS_TCSB                    = _XL_FR_SYMBOL_STATUS_TCSB
 * XL_FR_SYMBOL_STATUS_MTSA                    = _XL_FR_SYMBOL_STATUS_MTSA
 * XL_FR_SYMBOL_STATUS_MTSB                    = _XL_FR_SYMBOL_STATUS_MTSB             # <<<<<<<<<<<<<<
 * 
 * XL_FR_ERROR_POC_MODE                        = _XL_FR_ERROR_POC_MODE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_SYMBOL_STATUS_MTSB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_SYMBOL_STATUS_MTSB, __pyx_t_2) < 0) __PYX_ERR(0, 1567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1569
 * XL_FR_SYMBOL_STATUS_MTSB                    = _XL_FR_SYMBOL_STATUS_MTSB
 * 
 * XL_FR_ERROR_POC_MODE                        = _XL_FR_ERROR_POC_MODE             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_SYNC_FRAMES_BELOWMIN            = _XL_FR_ERROR_SYNC_FRAMES_BELOWMIN
 * XL_FR_ERROR_SYNC_FRAMES_OVERLOAD            = _XL_FR_ERROR_SYNC_FRAMES_OVERLOAD
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_POC_MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_POC_MODE, __pyx_t_2) < 0) __PYX_ERR(0, 1569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1570
 * 
 * XL_FR_ERROR_POC_MODE                        = _XL_FR_ERROR_POC_MODE
 * XL_FR_ERROR_SYNC_FRAMES_BELOWMIN            = _XL_FR_ERROR_SYNC_FRAMES_BELOWMIN             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_SYNC_FRAMES_OVERLOAD            = _XL_FR_ERROR_SYNC_FRAMES_OVERLOAD
 * XL_FR_ERROR_CLOCK_CORR_FAILURE              = _XL_FR_ERROR_CLOCK_CORR_FAILURE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_SYNC_FRAMES_BELOWMIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_BELOWMIN, __pyx_t_2) < 0) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1571
 * XL_FR_ERROR_POC_MODE                        = _XL_FR_ERROR_POC_MODE
 * XL_FR_ERROR_SYNC_FRAMES_BELOWMIN            = _XL_FR_ERROR_SYNC_FRAMES_BELOWMIN
 * XL_FR_ERROR_SYNC_FRAMES_OVERLOAD            = _XL_FR_ERROR_SYNC_FRAMES_OVERLOAD             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_CLOCK_CORR_FAILURE              = _XL_FR_ERROR_CLOCK_CORR_FAILURE
 * XL_FR_ERROR_NIT_FAILURE                     = _XL_FR_ERROR_NIT_FAILURE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_SYNC_FRAMES_OVERLOAD); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_SYNC_FRAMES_OVERLOAD, __pyx_t_2) < 0) __PYX_ERR(0, 1571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1572
 * XL_FR_ERROR_SYNC_FRAMES_BELOWMIN            = _XL_FR_ERROR_SYNC_FRAMES_BELOWMIN
 * XL_FR_ERROR_SYNC_FRAMES_OVERLOAD            = _XL_FR_ERROR_SYNC_FRAMES_OVERLOAD
 * XL_FR_ERROR_CLOCK_CORR_FAILURE              = _XL_FR_ERROR_CLOCK_CORR_FAILURE             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_NIT_FAILURE                     = _XL_FR_ERROR_NIT_FAILURE
 * XL_FR_ERROR_CC_ERROR                        = _XL_FR_ERROR_CC_ERROR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CLOCK_CORR_FAILURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CLOCK_CORR_FAILURE, __pyx_t_2) < 0) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1573
 * XL_FR_ERROR_SYNC_FRAMES_OVERLOAD            = _XL_FR_ERROR_SYNC_FRAMES_OVERLOAD
 * XL_FR_ERROR_CLOCK_CORR_FAILURE              = _XL_FR_ERROR_CLOCK_CORR_FAILURE
 * XL_FR_ERROR_NIT_FAILURE                     = _XL_FR_ERROR_NIT_FAILURE             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_CC_ERROR                        = _XL_FR_ERROR_CC_ERROR
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_NIT_FAILURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_NIT_FAILURE, __pyx_t_2) < 0) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1574
 * XL_FR_ERROR_CLOCK_CORR_FAILURE              = _XL_FR_ERROR_CLOCK_CORR_FAILURE
 * XL_FR_ERROR_NIT_FAILURE                     = _XL_FR_ERROR_NIT_FAILURE
 * XL_FR_ERROR_CC_ERROR                        = _XL_FR_ERROR_CC_ERROR             # <<<<<<<<<<<<<<
 * 
 * XL_FR_ERROR_POC_ACTIVE                      = _XL_FR_ERROR_POC_ACTIVE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CC_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CC_ERROR, __pyx_t_2) < 0) __PYX_ERR(0, 1574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1576
 * XL_FR_ERROR_CC_ERROR                        = _XL_FR_ERROR_CC_ERROR
 * 
 * XL_FR_ERROR_POC_ACTIVE                      = _XL_FR_ERROR_POC_ACTIVE             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_POC_PASSIVE                     = _XL_FR_ERROR_POC_PASSIVE
 * XL_FR_ERROR_POC_COMM_HALT                   = _XL_FR_ERROR_POC_COMM_HALT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_POC_ACTIVE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_POC_ACTIVE, __pyx_t_2) < 0) __PYX_ERR(0, 1576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1577
 * 
 * XL_FR_ERROR_POC_ACTIVE                      = _XL_FR_ERROR_POC_ACTIVE
 * XL_FR_ERROR_POC_PASSIVE                     = _XL_FR_ERROR_POC_PASSIVE             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_POC_COMM_HALT                   = _XL_FR_ERROR_POC_COMM_HALT
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_POC_PASSIVE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_POC_PASSIVE, __pyx_t_2) < 0) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1578
 * XL_FR_ERROR_POC_ACTIVE                      = _XL_FR_ERROR_POC_ACTIVE
 * XL_FR_ERROR_POC_PASSIVE                     = _XL_FR_ERROR_POC_PASSIVE
 * XL_FR_ERROR_POC_COMM_HALT                   = _XL_FR_ERROR_POC_COMM_HALT             # <<<<<<<<<<<<<<
 * 
 * XL_FR_ERROR_MISSING_OFFSET_CORRECTION       = _XL_FR_ERROR_MISSING_OFFSET_CORRECTION
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_POC_COMM_HALT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_POC_COMM_HALT, __pyx_t_2) < 0) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1580
 * XL_FR_ERROR_POC_COMM_HALT                   = _XL_FR_ERROR_POC_COMM_HALT
 * 
 * XL_FR_ERROR_MISSING_OFFSET_CORRECTION       = _XL_FR_ERROR_MISSING_OFFSET_CORRECTION             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_MAX_OFFSET_CORRECTION_REACHED   = _XL_FR_ERROR_MAX_OFFSET_CORRECTION_REACHED
 * XL_FR_ERROR_MISSING_RATE_CORRECTION         = _XL_FR_ERROR_MISSING_RATE_CORRECTION
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_MISSING_OFFSET_CORRECTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_MISSING_OFFSET_CORRE, __pyx_t_2) < 0) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1581
 * 
 * XL_FR_ERROR_MISSING_OFFSET_CORRECTION       = _XL_FR_ERROR_MISSING_OFFSET_CORRECTION
 * XL_FR_ERROR_MAX_OFFSET_CORRECTION_REACHED   = _XL_FR_ERROR_MAX_OFFSET_CORRECTION_REACHED             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_MISSING_RATE_CORRECTION         = _XL_FR_ERROR_MISSING_RATE_CORRECTION
 * XL_FR_ERROR_MAX_RATE_CORRECTION_REACHED     = _XL_FR_ERROR_MAX_RATE_CORRECTION_REACHED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_MAX_OFFSET_CORRECTION_REACHED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_MAX_OFFSET_CORRECTIO, __pyx_t_2) < 0) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1582
 * XL_FR_ERROR_MISSING_OFFSET_CORRECTION       = _XL_FR_ERROR_MISSING_OFFSET_CORRECTION
 * XL_FR_ERROR_MAX_OFFSET_CORRECTION_REACHED   = _XL_FR_ERROR_MAX_OFFSET_CORRECTION_REACHED
 * XL_FR_ERROR_MISSING_RATE_CORRECTION         = _XL_FR_ERROR_MISSING_RATE_CORRECTION             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_MAX_RATE_CORRECTION_REACHED     = _XL_FR_ERROR_MAX_RATE_CORRECTION_REACHED
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_MISSING_RATE_CORRECTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_MISSING_RATE_CORRECT, __pyx_t_2) < 0) __PYX_ERR(0, 1582, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1583
 * XL_FR_ERROR_MAX_OFFSET_CORRECTION_REACHED   = _XL_FR_ERROR_MAX_OFFSET_CORRECTION_REACHED
 * XL_FR_ERROR_MISSING_RATE_CORRECTION         = _XL_FR_ERROR_MISSING_RATE_CORRECTION
 * XL_FR_ERROR_MAX_RATE_CORRECTION_REACHED     = _XL_FR_ERROR_MAX_RATE_CORRECTION_REACHED             # <<<<<<<<<<<<<<
 * 
 * XL_FR_ERROR_NIT_SENA                        = _XL_FR_ERROR_NIT_SENA
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_MAX_RATE_CORRECTION_REACHED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_MAX_RATE_CORRECTION, __pyx_t_2) < 0) __PYX_ERR(0, 1583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1585
 * XL_FR_ERROR_MAX_RATE_CORRECTION_REACHED     = _XL_FR_ERROR_MAX_RATE_CORRECTION_REACHED
 * 
 * XL_FR_ERROR_NIT_SENA                        = _XL_FR_ERROR_NIT_SENA             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_NIT_SBNA                        = _XL_FR_ERROR_NIT_SBNA
 * XL_FR_ERROR_NIT_SENB                        = _XL_FR_ERROR_NIT_SENB
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_NIT_SENA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_NIT_SENA, __pyx_t_2) < 0) __PYX_ERR(0, 1585, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1586
 * 
 * XL_FR_ERROR_NIT_SENA                        = _XL_FR_ERROR_NIT_SENA
 * XL_FR_ERROR_NIT_SBNA                        = _XL_FR_ERROR_NIT_SBNA             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_NIT_SENB                        = _XL_FR_ERROR_NIT_SENB
 * XL_FR_ERROR_NIT_SBNB                        = _XL_FR_ERROR_NIT_SBNB
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_NIT_SBNA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_NIT_SBNA, __pyx_t_2) < 0) __PYX_ERR(0, 1586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1587
 * XL_FR_ERROR_NIT_SENA                        = _XL_FR_ERROR_NIT_SENA
 * XL_FR_ERROR_NIT_SBNA                        = _XL_FR_ERROR_NIT_SBNA
 * XL_FR_ERROR_NIT_SENB                        = _XL_FR_ERROR_NIT_SENB             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_NIT_SBNB                        = _XL_FR_ERROR_NIT_SBNB
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_NIT_SENB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_NIT_SENB, __pyx_t_2) < 0) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1588
 * XL_FR_ERROR_NIT_SBNA                        = _XL_FR_ERROR_NIT_SBNA
 * XL_FR_ERROR_NIT_SENB                        = _XL_FR_ERROR_NIT_SENB
 * XL_FR_ERROR_NIT_SBNB                        = _XL_FR_ERROR_NIT_SBNB             # <<<<<<<<<<<<<<
 * 
 * XL_FR_ERROR_CC_PERR                         = _XL_FR_ERROR_CC_PERR
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_NIT_SBNB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_NIT_SBNB, __pyx_t_2) < 0) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1590
 * XL_FR_ERROR_NIT_SBNB                        = _XL_FR_ERROR_NIT_SBNB
 * 
 * XL_FR_ERROR_CC_PERR                         = _XL_FR_ERROR_CC_PERR             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_CC_IIBA                         = _XL_FR_ERROR_CC_IIBA
 * XL_FR_ERROR_CC_IOBA                         = _XL_FR_ERROR_CC_IOBA
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CC_PERR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CC_PERR, __pyx_t_2) < 0) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1591
 * 
 * XL_FR_ERROR_CC_PERR                         = _XL_FR_ERROR_CC_PERR
 * XL_FR_ERROR_CC_IIBA                         = _XL_FR_ERROR_CC_IIBA             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_CC_IOBA                         = _XL_FR_ERROR_CC_IOBA
 * XL_FR_ERROR_CC_MHF                          = _XL_FR_ERROR_CC_MHF
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CC_IIBA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CC_IIBA, __pyx_t_2) < 0) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1592
 * XL_FR_ERROR_CC_PERR                         = _XL_FR_ERROR_CC_PERR
 * XL_FR_ERROR_CC_IIBA                         = _XL_FR_ERROR_CC_IIBA
 * XL_FR_ERROR_CC_IOBA                         = _XL_FR_ERROR_CC_IOBA             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_CC_MHF                          = _XL_FR_ERROR_CC_MHF
 * XL_FR_ERROR_CC_EDA                          = _XL_FR_ERROR_CC_EDA
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CC_IOBA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CC_IOBA, __pyx_t_2) < 0) __PYX_ERR(0, 1592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1593
 * XL_FR_ERROR_CC_IIBA                         = _XL_FR_ERROR_CC_IIBA
 * XL_FR_ERROR_CC_IOBA                         = _XL_FR_ERROR_CC_IOBA
 * XL_FR_ERROR_CC_MHF                          = _XL_FR_ERROR_CC_MHF             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_CC_EDA                          = _XL_FR_ERROR_CC_EDA
 * XL_FR_ERROR_CC_LTVA                         = _XL_FR_ERROR_CC_LTVA
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CC_MHF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CC_MHF, __pyx_t_2) < 0) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1594
 * XL_FR_ERROR_CC_IOBA                         = _XL_FR_ERROR_CC_IOBA
 * XL_FR_ERROR_CC_MHF                          = _XL_FR_ERROR_CC_MHF
 * XL_FR_ERROR_CC_EDA                          = _XL_FR_ERROR_CC_EDA             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_CC_LTVA                         = _XL_FR_ERROR_CC_LTVA
 * XL_FR_ERROR_CC_TABA                         = _XL_FR_ERROR_CC_TABA
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CC_EDA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CC_EDA, __pyx_t_2) < 0) __PYX_ERR(0, 1594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1595
 * XL_FR_ERROR_CC_MHF                          = _XL_FR_ERROR_CC_MHF
 * XL_FR_ERROR_CC_EDA                          = _XL_FR_ERROR_CC_EDA
 * XL_FR_ERROR_CC_LTVA                         = _XL_FR_ERROR_CC_LTVA             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_CC_TABA                         = _XL_FR_ERROR_CC_TABA
 * XL_FR_ERROR_CC_EDB                          = _XL_FR_ERROR_CC_EDB
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CC_LTVA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CC_LTVA, __pyx_t_2) < 0) __PYX_ERR(0, 1595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1596
 * XL_FR_ERROR_CC_EDA                          = _XL_FR_ERROR_CC_EDA
 * XL_FR_ERROR_CC_LTVA                         = _XL_FR_ERROR_CC_LTVA
 * XL_FR_ERROR_CC_TABA                         = _XL_FR_ERROR_CC_TABA             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_CC_EDB                          = _XL_FR_ERROR_CC_EDB
 * XL_FR_ERROR_CC_LTVB                         = _XL_FR_ERROR_CC_LTVB
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CC_TABA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CC_TABA, __pyx_t_2) < 0) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1597
 * XL_FR_ERROR_CC_LTVA                         = _XL_FR_ERROR_CC_LTVA
 * XL_FR_ERROR_CC_TABA                         = _XL_FR_ERROR_CC_TABA
 * XL_FR_ERROR_CC_EDB                          = _XL_FR_ERROR_CC_EDB             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_CC_LTVB                         = _XL_FR_ERROR_CC_LTVB
 * XL_FR_ERROR_CC_TABB                         = _XL_FR_ERROR_CC_TABB
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CC_EDB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CC_EDB, __pyx_t_2) < 0) __PYX_ERR(0, 1597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1598
 * XL_FR_ERROR_CC_TABA                         = _XL_FR_ERROR_CC_TABA
 * XL_FR_ERROR_CC_EDB                          = _XL_FR_ERROR_CC_EDB
 * XL_FR_ERROR_CC_LTVB                         = _XL_FR_ERROR_CC_LTVB             # <<<<<<<<<<<<<<
 * XL_FR_ERROR_CC_TABB                         = _XL_FR_ERROR_CC_TABB
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CC_LTVB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CC_LTVB, __pyx_t_2) < 0) __PYX_ERR(0, 1598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1599
 * XL_FR_ERROR_CC_EDB                          = _XL_FR_ERROR_CC_EDB
 * XL_FR_ERROR_CC_LTVB                         = _XL_FR_ERROR_CC_LTVB
 * XL_FR_ERROR_CC_TABB                         = _XL_FR_ERROR_CC_TABB             # <<<<<<<<<<<<<<
 * 
 * XL_FR_STATUS_DEFAULT_CONFIG                 = _XL_FR_STATUS_DEFAULT_CONFIG
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_ERROR_CC_TABB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_ERROR_CC_TABB, __pyx_t_2) < 0) __PYX_ERR(0, 1599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1601
 * XL_FR_ERROR_CC_TABB                         = _XL_FR_ERROR_CC_TABB
 * 
 * XL_FR_STATUS_DEFAULT_CONFIG                 = _XL_FR_STATUS_DEFAULT_CONFIG             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_READY                          = _XL_FR_STATUS_READY
 * XL_FR_STATUS_NORMAL_ACTIVE                  = _XL_FR_STATUS_NORMAL_ACTIVE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_DEFAULT_CONFIG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_DEFAULT_CONFIG, __pyx_t_2) < 0) __PYX_ERR(0, 1601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1602
 * 
 * XL_FR_STATUS_DEFAULT_CONFIG                 = _XL_FR_STATUS_DEFAULT_CONFIG
 * XL_FR_STATUS_READY                          = _XL_FR_STATUS_READY             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_NORMAL_ACTIVE                  = _XL_FR_STATUS_NORMAL_ACTIVE
 * XL_FR_STATUS_NORMAL_PASSIVE                 = _XL_FR_STATUS_NORMAL_PASSIVE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_READY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_READY, __pyx_t_2) < 0) __PYX_ERR(0, 1602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1603
 * XL_FR_STATUS_DEFAULT_CONFIG                 = _XL_FR_STATUS_DEFAULT_CONFIG
 * XL_FR_STATUS_READY                          = _XL_FR_STATUS_READY
 * XL_FR_STATUS_NORMAL_ACTIVE                  = _XL_FR_STATUS_NORMAL_ACTIVE             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_NORMAL_PASSIVE                 = _XL_FR_STATUS_NORMAL_PASSIVE
 * XL_FR_STATUS_HALT                           = _XL_FR_STATUS_HALT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_NORMAL_ACTIVE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_NORMAL_ACTIVE, __pyx_t_2) < 0) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1604
 * XL_FR_STATUS_READY                          = _XL_FR_STATUS_READY
 * XL_FR_STATUS_NORMAL_ACTIVE                  = _XL_FR_STATUS_NORMAL_ACTIVE
 * XL_FR_STATUS_NORMAL_PASSIVE                 = _XL_FR_STATUS_NORMAL_PASSIVE             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_HALT                           = _XL_FR_STATUS_HALT
 * XL_FR_STATUS_MONITOR_MODE                   = _XL_FR_STATUS_MONITOR_MODE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_NORMAL_PASSIVE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_NORMAL_PASSIVE, __pyx_t_2) < 0) __PYX_ERR(0, 1604, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1605
 * XL_FR_STATUS_NORMAL_ACTIVE                  = _XL_FR_STATUS_NORMAL_ACTIVE
 * XL_FR_STATUS_NORMAL_PASSIVE                 = _XL_FR_STATUS_NORMAL_PASSIVE
 * XL_FR_STATUS_HALT                           = _XL_FR_STATUS_HALT             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_MONITOR_MODE                   = _XL_FR_STATUS_MONITOR_MODE
 * XL_FR_STATUS_CONFIG                         = _XL_FR_STATUS_CONFIG
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_HALT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_HALT, __pyx_t_2) < 0) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1606
 * XL_FR_STATUS_NORMAL_PASSIVE                 = _XL_FR_STATUS_NORMAL_PASSIVE
 * XL_FR_STATUS_HALT                           = _XL_FR_STATUS_HALT
 * XL_FR_STATUS_MONITOR_MODE                   = _XL_FR_STATUS_MONITOR_MODE             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_CONFIG                         = _XL_FR_STATUS_CONFIG
 * XL_FR_STATUS_WAKEUP_STANDBY                 = _XL_FR_STATUS_WAKEUP_STANDBY
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_MONITOR_MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_MONITOR_MODE, __pyx_t_2) < 0) __PYX_ERR(0, 1606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1607
 * XL_FR_STATUS_HALT                           = _XL_FR_STATUS_HALT
 * XL_FR_STATUS_MONITOR_MODE                   = _XL_FR_STATUS_MONITOR_MODE
 * XL_FR_STATUS_CONFIG                         = _XL_FR_STATUS_CONFIG             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_WAKEUP_STANDBY                 = _XL_FR_STATUS_WAKEUP_STANDBY
 * XL_FR_STATUS_WAKEUP_LISTEN                  = _XL_FR_STATUS_WAKEUP_LISTEN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_CONFIG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_CONFIG, __pyx_t_2) < 0) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1608
 * XL_FR_STATUS_MONITOR_MODE                   = _XL_FR_STATUS_MONITOR_MODE
 * XL_FR_STATUS_CONFIG                         = _XL_FR_STATUS_CONFIG
 * XL_FR_STATUS_WAKEUP_STANDBY                 = _XL_FR_STATUS_WAKEUP_STANDBY             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_WAKEUP_LISTEN                  = _XL_FR_STATUS_WAKEUP_LISTEN
 * XL_FR_STATUS_WAKEUP_SEND                    = _XL_FR_STATUS_WAKEUP_SEND
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_WAKEUP_STANDBY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_WAKEUP_STANDBY, __pyx_t_2) < 0) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1609
 * XL_FR_STATUS_CONFIG                         = _XL_FR_STATUS_CONFIG
 * XL_FR_STATUS_WAKEUP_STANDBY                 = _XL_FR_STATUS_WAKEUP_STANDBY
 * XL_FR_STATUS_WAKEUP_LISTEN                  = _XL_FR_STATUS_WAKEUP_LISTEN             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_WAKEUP_SEND                    = _XL_FR_STATUS_WAKEUP_SEND
 * XL_FR_STATUS_WAKEUP_DETECT                  = _XL_FR_STATUS_WAKEUP_DETECT
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_WAKEUP_LISTEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_WAKEUP_LISTEN, __pyx_t_2) < 0) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1610
 * XL_FR_STATUS_WAKEUP_STANDBY                 = _XL_FR_STATUS_WAKEUP_STANDBY
 * XL_FR_STATUS_WAKEUP_LISTEN                  = _XL_FR_STATUS_WAKEUP_LISTEN
 * XL_FR_STATUS_WAKEUP_SEND                    = _XL_FR_STATUS_WAKEUP_SEND             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_WAKEUP_DETECT                  = _XL_FR_STATUS_WAKEUP_DETECT
 * XL_FR_STATUS_STARTUP_PREPARE                = _XL_FR_STATUS_STARTUP_PREPARE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_WAKEUP_SEND); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_WAKEUP_SEND, __pyx_t_2) < 0) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1611
 * XL_FR_STATUS_WAKEUP_LISTEN                  = _XL_FR_STATUS_WAKEUP_LISTEN
 * XL_FR_STATUS_WAKEUP_SEND                    = _XL_FR_STATUS_WAKEUP_SEND
 * XL_FR_STATUS_WAKEUP_DETECT                  = _XL_FR_STATUS_WAKEUP_DETECT             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_STARTUP_PREPARE                = _XL_FR_STATUS_STARTUP_PREPARE
 * XL_FR_STATUS_COLDSTART_LISTEN               = _XL_FR_STATUS_COLDSTART_LISTEN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_WAKEUP_DETECT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_WAKEUP_DETECT, __pyx_t_2) < 0) __PYX_ERR(0, 1611, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1612
 * XL_FR_STATUS_WAKEUP_SEND                    = _XL_FR_STATUS_WAKEUP_SEND
 * XL_FR_STATUS_WAKEUP_DETECT                  = _XL_FR_STATUS_WAKEUP_DETECT
 * XL_FR_STATUS_STARTUP_PREPARE                = _XL_FR_STATUS_STARTUP_PREPARE             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_COLDSTART_LISTEN               = _XL_FR_STATUS_COLDSTART_LISTEN
 * XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION = _XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_STARTUP_PREPARE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_STARTUP_PREPARE, __pyx_t_2) < 0) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1613
 * XL_FR_STATUS_WAKEUP_DETECT                  = _XL_FR_STATUS_WAKEUP_DETECT
 * XL_FR_STATUS_STARTUP_PREPARE                = _XL_FR_STATUS_STARTUP_PREPARE
 * XL_FR_STATUS_COLDSTART_LISTEN               = _XL_FR_STATUS_COLDSTART_LISTEN             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION = _XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION
 * XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK    = _XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_COLDSTART_LISTEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_COLDSTART_LISTEN, __pyx_t_2) < 0) __PYX_ERR(0, 1613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1614
 * XL_FR_STATUS_STARTUP_PREPARE                = _XL_FR_STATUS_STARTUP_PREPARE
 * XL_FR_STATUS_COLDSTART_LISTEN               = _XL_FR_STATUS_COLDSTART_LISTEN
 * XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION = _XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK    = _XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK
 * XL_FR_STATUS_COLDSTART_GAP                  = _XL_FR_STATUS_COLDSTART_GAP
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_COLDSTART_COLLISION, __pyx_t_2) < 0) __PYX_ERR(0, 1614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1615
 * XL_FR_STATUS_COLDSTART_LISTEN               = _XL_FR_STATUS_COLDSTART_LISTEN
 * XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION = _XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION
 * XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK    = _XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_COLDSTART_GAP                  = _XL_FR_STATUS_COLDSTART_GAP
 * XL_FR_STATUS_COLDSTART_JOIN                 = _XL_FR_STATUS_COLDSTART_JOIN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_COLDSTART_CONSISTEN, __pyx_t_2) < 0) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1616
 * XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION = _XL_FR_STATUS_COLDSTART_COLLISION_RESOLUTION
 * XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK    = _XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK
 * XL_FR_STATUS_COLDSTART_GAP                  = _XL_FR_STATUS_COLDSTART_GAP             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_COLDSTART_JOIN                 = _XL_FR_STATUS_COLDSTART_JOIN
 * XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK    = _XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_COLDSTART_GAP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_COLDSTART_GAP, __pyx_t_2) < 0) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1617
 * XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK    = _XL_FR_STATUS_COLDSTART_CONSISTENCY_CHECK
 * XL_FR_STATUS_COLDSTART_GAP                  = _XL_FR_STATUS_COLDSTART_GAP
 * XL_FR_STATUS_COLDSTART_JOIN                 = _XL_FR_STATUS_COLDSTART_JOIN             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK    = _XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK
 * XL_FR_STATUS_INTEGRATION_LISTEN             = _XL_FR_STATUS_INTEGRATION_LISTEN
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_COLDSTART_JOIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_COLDSTART_JOIN, __pyx_t_2) < 0) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1618
 * XL_FR_STATUS_COLDSTART_GAP                  = _XL_FR_STATUS_COLDSTART_GAP
 * XL_FR_STATUS_COLDSTART_JOIN                 = _XL_FR_STATUS_COLDSTART_JOIN
 * XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK    = _XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_INTEGRATION_LISTEN             = _XL_FR_STATUS_INTEGRATION_LISTEN
 * XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK  = _XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_INTEGRATION_COLDSTA, __pyx_t_2) < 0) __PYX_ERR(0, 1618, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1619
 * XL_FR_STATUS_COLDSTART_JOIN                 = _XL_FR_STATUS_COLDSTART_JOIN
 * XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK    = _XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK
 * XL_FR_STATUS_INTEGRATION_LISTEN             = _XL_FR_STATUS_INTEGRATION_LISTEN             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK  = _XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK
 * XL_FR_STATUS_INITIALIZE_SCHEDULE            = _XL_FR_STATUS_INITIALIZE_SCHEDULE
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_INTEGRATION_LISTEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_INTEGRATION_LISTEN, __pyx_t_2) < 0) __PYX_ERR(0, 1619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1620
 * XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK    = _XL_FR_STATUS_INTEGRATION_COLDSTART_CHECK
 * XL_FR_STATUS_INTEGRATION_LISTEN             = _XL_FR_STATUS_INTEGRATION_LISTEN
 * XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK  = _XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_INITIALIZE_SCHEDULE            = _XL_FR_STATUS_INITIALIZE_SCHEDULE
 * XL_FR_STATUS_ABORT_STARTUP                  = _XL_FR_STATUS_ABORT_STARTUP
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_INTEGRATION_CONSIST, __pyx_t_2) < 0) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1621
 * XL_FR_STATUS_INTEGRATION_LISTEN             = _XL_FR_STATUS_INTEGRATION_LISTEN
 * XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK  = _XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK
 * XL_FR_STATUS_INITIALIZE_SCHEDULE            = _XL_FR_STATUS_INITIALIZE_SCHEDULE             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_ABORT_STARTUP                  = _XL_FR_STATUS_ABORT_STARTUP
 * XL_FR_STATUS_STARTUP_SUCCESS                = _XL_FR_STATUS_STARTUP_SUCCESS
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_INITIALIZE_SCHEDULE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_INITIALIZE_SCHEDULE, __pyx_t_2) < 0) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1622
 * XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK  = _XL_FR_STATUS_INTEGRATION_CONSISTENCY_CHECK
 * XL_FR_STATUS_INITIALIZE_SCHEDULE            = _XL_FR_STATUS_INITIALIZE_SCHEDULE
 * XL_FR_STATUS_ABORT_STARTUP                  = _XL_FR_STATUS_ABORT_STARTUP             # <<<<<<<<<<<<<<
 * XL_FR_STATUS_STARTUP_SUCCESS                = _XL_FR_STATUS_STARTUP_SUCCESS
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_ABORT_STARTUP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_ABORT_STARTUP, __pyx_t_2) < 0) __PYX_ERR(0, 1622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1623
 * XL_FR_STATUS_INITIALIZE_SCHEDULE            = _XL_FR_STATUS_INITIALIZE_SCHEDULE
 * XL_FR_STATUS_ABORT_STARTUP                  = _XL_FR_STATUS_ABORT_STARTUP
 * XL_FR_STATUS_STARTUP_SUCCESS                = _XL_FR_STATUS_STARTUP_SUCCESS             # <<<<<<<<<<<<<<
 * 
 * XL_NOTIFY_REASON_CHANNEL_ACTIVATION         = _XL_NOTIFY_REASON_CHANNEL_ACTIVATION
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_STATUS_STARTUP_SUCCESS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_STATUS_STARTUP_SUCCESS, __pyx_t_2) < 0) __PYX_ERR(0, 1623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1625
 * XL_FR_STATUS_STARTUP_SUCCESS                = _XL_FR_STATUS_STARTUP_SUCCESS
 * 
 * XL_NOTIFY_REASON_CHANNEL_ACTIVATION         = _XL_NOTIFY_REASON_CHANNEL_ACTIVATION             # <<<<<<<<<<<<<<
 * XL_NOTIFY_REASON_CHANNEL_DEACTIVATION       = _XL_NOTIFY_REASON_CHANNEL_DEACTIVATION
 * XL_NOTIFY_REASON_PORT_CLOSED                = _XL_NOTIFY_REASON_PORT_CLOSED
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_NOTIFY_REASON_CHANNEL_ACTIVATION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_NOTIFY_REASON_CHANNEL_ACTIVAT, __pyx_t_2) < 0) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1626
 * 
 * XL_NOTIFY_REASON_CHANNEL_ACTIVATION         = _XL_NOTIFY_REASON_CHANNEL_ACTIVATION
 * XL_NOTIFY_REASON_CHANNEL_DEACTIVATION       = _XL_NOTIFY_REASON_CHANNEL_DEACTIVATION             # <<<<<<<<<<<<<<
 * XL_NOTIFY_REASON_PORT_CLOSED                = _XL_NOTIFY_REASON_PORT_CLOSED
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_NOTIFY_REASON_CHANNEL_DEACTIVATION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_NOTIFY_REASON_CHANNEL_DEACTIV, __pyx_t_2) < 0) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1627
 * XL_NOTIFY_REASON_CHANNEL_ACTIVATION         = _XL_NOTIFY_REASON_CHANNEL_ACTIVATION
 * XL_NOTIFY_REASON_CHANNEL_DEACTIVATION       = _XL_NOTIFY_REASON_CHANNEL_DEACTIVATION
 * XL_NOTIFY_REASON_PORT_CLOSED                = _XL_NOTIFY_REASON_PORT_CLOSED             # <<<<<<<<<<<<<<
 * 
 * XL_FR_TRANSCEIVER_MODE_SLEEP                = _XL_FR_TRANSCEIVER_MODE_SLEEP
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_NOTIFY_REASON_PORT_CLOSED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_NOTIFY_REASON_PORT_CLOSED, __pyx_t_2) < 0) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1629
 * XL_NOTIFY_REASON_PORT_CLOSED                = _XL_NOTIFY_REASON_PORT_CLOSED
 * 
 * XL_FR_TRANSCEIVER_MODE_SLEEP                = _XL_FR_TRANSCEIVER_MODE_SLEEP             # <<<<<<<<<<<<<<
 * XL_FR_TRANSCEIVER_MODE_NORMAL               = _XL_FR_TRANSCEIVER_MODE_NORMAL
 * XL_FR_TRANSCEIVER_MODE_RECEIVE_ONLY         = _XL_FR_TRANSCEIVER_MODE_RECEIVE_ONLY
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_TRANSCEIVER_MODE_SLEEP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_TRANSCEIVER_MODE_SLEEP, __pyx_t_2) < 0) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1630
 * 
 * XL_FR_TRANSCEIVER_MODE_SLEEP                = _XL_FR_TRANSCEIVER_MODE_SLEEP
 * XL_FR_TRANSCEIVER_MODE_NORMAL               = _XL_FR_TRANSCEIVER_MODE_NORMAL             # <<<<<<<<<<<<<<
 * XL_FR_TRANSCEIVER_MODE_RECEIVE_ONLY         = _XL_FR_TRANSCEIVER_MODE_RECEIVE_ONLY
 * XL_FR_TRANSCEIVER_MODE_STANDBY              = _XL_FR_TRANSCEIVER_MODE_STANDBY
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_TRANSCEIVER_MODE_NORMAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_TRANSCEIVER_MODE_NORMAL, __pyx_t_2) < 0) __PYX_ERR(0, 1630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1631
 * XL_FR_TRANSCEIVER_MODE_SLEEP                = _XL_FR_TRANSCEIVER_MODE_SLEEP
 * XL_FR_TRANSCEIVER_MODE_NORMAL               = _XL_FR_TRANSCEIVER_MODE_NORMAL
 * XL_FR_TRANSCEIVER_MODE_RECEIVE_ONLY         = _XL_FR_TRANSCEIVER_MODE_RECEIVE_ONLY             # <<<<<<<<<<<<<<
 * XL_FR_TRANSCEIVER_MODE_STANDBY              = _XL_FR_TRANSCEIVER_MODE_STANDBY
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_TRANSCEIVER_MODE_RECEIVE_ONLY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_TRANSCEIVER_MODE_RECEIVE_O, __pyx_t_2) < 0) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1632
 * XL_FR_TRANSCEIVER_MODE_NORMAL               = _XL_FR_TRANSCEIVER_MODE_NORMAL
 * XL_FR_TRANSCEIVER_MODE_RECEIVE_ONLY         = _XL_FR_TRANSCEIVER_MODE_RECEIVE_ONLY
 * XL_FR_TRANSCEIVER_MODE_STANDBY              = _XL_FR_TRANSCEIVER_MODE_STANDBY             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(XL_FR_TRANSCEIVER_MODE_STANDBY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XL_FR_TRANSCEIVER_MODE_STANDBY, __pyx_t_2) < 0) __PYX_ERR(0, 1632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vxlapi.pyx":1
 * # *-* encoding: utf-8 *-*             # <<<<<<<<<<<<<<
 * 
 * from libc.string cimport memset
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init vxlapi", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init vxlapi");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value); // transfer ownership of value to values
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;  // ownership transferred to values
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL; // ownership transferred to values
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (unlikely(!j)) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_ass_subscript) {
            int r;
            PyObject *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return -1;
            r = mm->mp_ass_subscript(o, key, v);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return sm->sq_ass_item(o, i, v);
        }
    }
#else
    if (is_list || !PyMapping_Check(o))
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + (unsigned long)b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long b = PyInt_AS_LONG(op2);
        
#ifdef HAVE_LONG_LONG
            if (sizeof(PY_LONG_LONG) > sizeof(long)) {
                PY_LONG_LONG result = (PY_LONG_LONG)a * (PY_LONG_LONG)b;
                return (result >= LONG_MIN && result <= LONG_MAX) ?
                    PyInt_FromLong((long)result) : PyLong_FromLongLong(result);
            }
#endif
#if CYTHON_USE_TYPE_SLOTS
            return PyInt_Type.tp_as_number->nb_multiply(op1, op2);
#else
            return PyNumber_Multiply(op1, op2);
#endif
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op2))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op2))) {
            b = __Pyx_PyLong_CompactValue(op2);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op2);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            }
        }
                CYTHON_UNUSED_VAR(a);
                CYTHON_UNUSED_VAR(b);
                #ifdef HAVE_LONG_LONG
                llb = b;
                goto long_long;
                #else
                return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
                #endif
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double b = __pyx_PyFloat_AsDouble(op2);
#else
        double b = PyFloat_AS_DOUBLE(op2);
#endif
            double result;
            
            PyFPE_START_PROTECT("multiply", return NULL)
            result = ((double)a) * (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#endif

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is unsliceable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return NULL;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

static PyObject* __pyx_convert__to_py_XLcanFdConf(XLcanFdConf s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(12); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.arbitrationBitRate); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_arbitrationBitRate, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.sjwAbr); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_sjwAbr, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.tseg1Abr); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_tseg1Abr, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.tseg2Abr); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_tseg2Abr, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.dataBitRate); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_dataBitRate, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.sjwDbr); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_sjwDbr, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.tseg1Dbr); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_tseg1Dbr, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.tseg2Dbr); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_tseg2Dbr, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.options); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_options, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyObject_FromCString(s.reserved1); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved1, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.reserved2); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved2, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_XLfrClusterConfig(XLfrClusterConfig s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(64); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.busGuardianEnable); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_busGuardianEnable, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.baudrate); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_baudrate, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.busGuardianTick); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_busGuardianTick, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.externalClockCorrectionMode); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_externalClockCorrectionMode, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gColdStartAttempts); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gColdStartAttempts, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gListenNoise); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gListenNoise, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gMacroPerCycle); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gMacroPerCycle, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gMaxWithoutClockCorrectionFatal); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gMaxWithoutClockCorrectionFatal, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gMaxWithoutClockCorrectionPassive); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gMaxWithoutClockCorrectionPassiv, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gNetworkManagementVectorLength); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gNetworkManagementVectorLength, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gNumberOfMinislots); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gNumberOfMinislots, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gNumberOfStaticSlots); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gNumberOfStaticSlots, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gOffsetCorrectionStart); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gOffsetCorrectionStart, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gPayloadLengthStatic); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gPayloadLengthStatic, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gSyncNodeMax); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gSyncNodeMax, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdActionPointOffset); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdActionPointOffset, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdDynamicSlotIdlePhase); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdDynamicSlotIdlePhase, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdMacrotick); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdMacrotick, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdMinislot); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdMinislot, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdMiniSlotActionPointOffset); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdMiniSlotActionPointOffset, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdNIT); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdNIT, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdStaticSlot); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdStaticSlot, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdSymbolWindow); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdSymbolWindow, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdTSSTransmitter); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdTSSTransmitter, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdWakeupSymbolRxIdle); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdWakeupSymbolRxIdle, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdWakeupSymbolRxLow); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdWakeupSymbolRxLow, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdWakeupSymbolRxWindow); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdWakeupSymbolRxWindow, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdWakeupSymbolTxIdle); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdWakeupSymbolTxIdle, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdWakeupSymbolTxLow); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdWakeupSymbolTxLow, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pAllowHaltDueToClock); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pAllowHaltDueToClock, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pAllowPassiveToActive); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pAllowPassiveToActive, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pChannels); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pChannels, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pClusterDriftDamping); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pClusterDriftDamping, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pDecodingCorrection); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pDecodingCorrection, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pDelayCompensationA); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pDelayCompensationA, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pDelayCompensationB); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pDelayCompensationB, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pExternOffsetCorrection); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pExternOffsetCorrection, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pExternRateCorrection); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pExternRateCorrection, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pKeySlotUsedForStartup); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pKeySlotUsedForStartup, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pKeySlotUsedForSync); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pKeySlotUsedForSync, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pLatestTx); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pLatestTx, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pMacroInitialOffsetA); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pMacroInitialOffsetA, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pMacroInitialOffsetB); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pMacroInitialOffsetB, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pMaxPayloadLengthDynamic); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pMaxPayloadLengthDynamic, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pMicroInitialOffsetA); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pMicroInitialOffsetA, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pMicroInitialOffsetB); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pMicroInitialOffsetB, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pMicroPerCycle); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pMicroPerCycle, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pMicroPerMacroNom); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pMicroPerMacroNom, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pOffsetCorrectionOut); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pOffsetCorrectionOut, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pRateCorrectionOut); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pRateCorrectionOut, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pSamplesPerMicrotick); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pSamplesPerMicrotick, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pSingleSlotEnabled); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pSingleSlotEnabled, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pWakeupChannel); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pWakeupChannel, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pWakeupPattern); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pWakeupPattern, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pdAcceptedStartupRange); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pdAcceptedStartupRange, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pdListenTimeout); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pdListenTimeout, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pdMaxDrift); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pdMaxDrift, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pdMicrotick); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pdMicrotick, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gdCASRxLowMax); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gdCASRxLowMax, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.gChannels); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_gChannels, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.vExternOffsetControl); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_vExternOffsetControl, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.vExternRateControl); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_vExternRateControl, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.pChannelsMTS); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_pChannelsMTS, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_carray_to_py_unsigned_int(s.reserved, 16); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_XLfrChannelConfig(XLfrChannelConfig s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(4); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.status); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_status, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.cfgMode); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_cfgMode, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_carray_to_py_unsigned_int(s.reserved, 6); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_XLfrClusterConfig(s.xlFrClusterConfig); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_xlFrClusterConfig, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_XLfrMode(XLfrMode s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(3); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.frMode); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frMode, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.frStartupAttributes); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frStartupAttributes, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_carray_to_py_unsigned_int(s.reserved, 30); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_start_cycle(struct s_xl_fr_start_cycle s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(6); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.cycleCount); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_cycleCount, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_int(s.vRateCorrection); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_vRateCorrection, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_int(s.vOffsetCorrection); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_vOffsetCorrection, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.vClockCorrectionFailed); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_vClockCorrectionFailed, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.vAllowPassivToActive); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_vAllowPassivToActive, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_carray_to_py_unsigned_int(s.reserved, 3); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_rx_frame(struct s_xl_fr_rx_frame s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(6); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_short(s.flags); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_flags, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.headerCRC); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_headerCRC, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.slotID); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_slotID, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.cycleCount); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_cycleCount, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.payloadLength); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_payloadLength, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyObject_FromCString(s.data); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_data, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_tx_frame(struct s_xl_fr_tx_frame s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(11); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_short(s.flags); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_flags, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.slotID); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_slotID, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.offset); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_offset, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.repetition); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_repetition, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.payloadLength); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_payloadLength, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.txMode); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_txMode, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.incrementSize); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_incrementSize, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.incrementOffset); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_incrementOffset, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.reserved0); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved0, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.reserved1); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved1, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyObject_FromCString(s.data); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_data, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_wakeup(struct s_xl_fr_wakeup s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(3); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_char(s.cycleCount); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_cycleCount, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.wakeupStatus); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_wakeupStatus, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyObject_FromCString(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_symbol_window(struct s_xl_fr_symbol_window s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(4); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.symbol); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_symbol, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.flags); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_flags, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.cycleCount); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_cycleCount, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyObject_FromCString(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error_poc_mode(struct s_xl_fr_error_poc_mode s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(2); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_char(s.errorMode); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_errorMode, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyObject_FromCString(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error_sync_frames(struct s_xl_fr_error_sync_frames s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(5); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_short(s.evenSyncFramesA); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_evenSyncFramesA, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.oddSyncFramesA); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_oddSyncFramesA, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.evenSyncFramesB); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_evenSyncFramesB, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.oddSyncFramesB); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_oddSyncFramesB, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error_clock_corr_failure(struct s_xl_fr_error_clock_corr_failure s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(7); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_short(s.evenSyncFramesA); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_evenSyncFramesA, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.oddSyncFramesA); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_oddSyncFramesA, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.evenSyncFramesB); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_evenSyncFramesB, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.oddSyncFramesB); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_oddSyncFramesB, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.flags); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_flags, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.clockCorrFailedCounter); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_clockCorrFailedCounter, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error_nit_failure(struct s_xl_fr_error_nit_failure s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(2); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.flags); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_flags, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error_cc_error(struct s_xl_fr_error_cc_error s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(2); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.ccError); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_ccError, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_union__s_xl_fr_error_info(union s_xl_fr_error_info s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(6); if (unlikely(!res)) return NULL;
  member = __pyx_convert__to_py_struct__s_xl_fr_error_poc_mode(s.frPocMode); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frPocMode, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_error_sync_frames(s.frSyncFramesBelowMin); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frSyncFramesBelowMin, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_error_sync_frames(s.frSyncFramesOverload); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frSyncFramesOverload, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_error_clock_corr_failure(s.frClockCorrectionFailure); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frClockCorrectionFailure, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_error_nit_failure(s.frNitFailure); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frNitFailure, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_error_cc_error(s.frCCError); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frCCError, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_error(struct s_xl_fr_error s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(4); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_char(s.tag); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_tag, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.cycleCount); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_cycleCount, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyObject_FromCString(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_union__s_xl_fr_error_info(s.errorInfo); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_errorInfo, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_status(struct s_xl_fr_status s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(2); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.statusType); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_statusType, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_nm_vector(struct s_xl_fr_nm_vector s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(3); if (unlikely(!res)) return NULL;
  member = __Pyx_PyObject_FromCString(s.nmVector); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_nmVector, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.cycleCount); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_cycleCount, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyObject_FromCString(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_sync_pulse_ev(struct s_xl_sync_pulse_ev s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(3); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.triggerSource); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_triggerSource, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_XLuint64(s.time); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_time, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_spy_frame(struct s_xl_fr_spy_frame s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(10); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.frameLength); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frameLength, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.frameError); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frameError, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.tssLength); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_tssLength, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.headerFlags); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_headerFlags, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.headerCRC); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_headerCRC, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.payloadLength); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_payloadLength, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_char(s.cycleCount); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_cycleCount, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.frameCRC); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frameCRC, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyObject_FromCString(s.data); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_data, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_spy_symbol(struct s_xl_fr_spy_symbol s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(2); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_short(s.lowLength); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_lowLength, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_application_notification(struct s_xl_application_notification s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(2); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.notifyReason); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_notifyReason, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_carray_to_py_unsigned_int(s.reserved, 7); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_union__s_xl_fr_tag_data(union s_xl_fr_tag_data s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(13); if (unlikely(!res)) return NULL;
  member = __pyx_convert__to_py_struct__s_xl_fr_start_cycle(s.frStartCycle); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frStartCycle, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_rx_frame(s.frRxFrame); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frRxFrame, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_tx_frame(s.frTxFrame); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frTxFrame, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_wakeup(s.frWakeup); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frWakeup, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_symbol_window(s.frSymbolWindow); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frSymbolWindow, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_error(s.frError); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frError, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_status(s.frStatus); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frStatus, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_nm_vector(s.frNmVector); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frNmVector, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_sync_pulse_ev(s.frSyncPulse); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frSyncPulse, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_spy_frame(s.frSpyFrame); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frSpyFrame, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_fr_spy_symbol(s.frSpySymbol); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_frSpySymbol, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_struct__s_xl_application_notification(s.applicationNotification); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_applicationNotification, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyObject_FromCString(s.raw); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_raw, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_struct__s_xl_fr_event(struct s_xl_fr_event s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(9); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.size); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_size, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_XLfrEventTag(s.tag); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_tag, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.channelIndex); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_channelIndex, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.userHandle); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_userHandle, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.flagsChip); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_flagsChip, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_short(s.reserved); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_reserved, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_XLuint64(s.timeStamp); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_timeStamp, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_XLuint64(s.timeStampSync); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_timeStampSync, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert__to_py_union__s_xl_fr_tag_data(s.tagData); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_tagData, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
static PyObject* __pyx_convert__to_py_XLfrAcceptanceFilter(XLfrAcceptanceFilter s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(5); if (unlikely(!res)) return NULL;
  member = __Pyx_PyInt_From_unsigned_int(s.filterStatus); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_filterStatus, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.filterTypeMask); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_filterTypeMask, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.filterFirstSlot); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_filterFirstSlot, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.filterLastSlot); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_filterLastSlot, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __Pyx_PyInt_From_unsigned_int(s.filterChannelMask); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_filterChannelMask, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE XLuint64 __Pyx_PyInt_As_XLuint64(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const XLuint64 neg_one = (XLuint64) -1, const_zero = (XLuint64) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(XLuint64) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(XLuint64, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (XLuint64) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(XLuint64, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(XLuint64) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLuint64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLuint64) >= 2 * PyLong_SHIFT)) {
                                return (XLuint64) (((((XLuint64)digits[1]) << PyLong_SHIFT) | (XLuint64)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(XLuint64) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLuint64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLuint64) >= 3 * PyLong_SHIFT)) {
                                return (XLuint64) (((((((XLuint64)digits[2]) << PyLong_SHIFT) | (XLuint64)digits[1]) << PyLong_SHIFT) | (XLuint64)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(XLuint64) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLuint64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLuint64) >= 4 * PyLong_SHIFT)) {
                                return (XLuint64) (((((((((XLuint64)digits[3]) << PyLong_SHIFT) | (XLuint64)digits[2]) << PyLong_SHIFT) | (XLuint64)digits[1]) << PyLong_SHIFT) | (XLuint64)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (XLuint64) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(XLuint64) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLuint64, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(XLuint64) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLuint64, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(XLuint64, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(XLuint64) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLuint64, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLuint64) - 1 > 2 * PyLong_SHIFT)) {
                                return (XLuint64) (((XLuint64)-1)*(((((XLuint64)digits[1]) << PyLong_SHIFT) | (XLuint64)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(XLuint64) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLuint64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLuint64) - 1 > 2 * PyLong_SHIFT)) {
                                return (XLuint64) ((((((XLuint64)digits[1]) << PyLong_SHIFT) | (XLuint64)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(XLuint64) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLuint64, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLuint64) - 1 > 3 * PyLong_SHIFT)) {
                                return (XLuint64) (((XLuint64)-1)*(((((((XLuint64)digits[2]) << PyLong_SHIFT) | (XLuint64)digits[1]) << PyLong_SHIFT) | (XLuint64)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(XLuint64) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLuint64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLuint64) - 1 > 3 * PyLong_SHIFT)) {
                                return (XLuint64) ((((((((XLuint64)digits[2]) << PyLong_SHIFT) | (XLuint64)digits[1]) << PyLong_SHIFT) | (XLuint64)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(XLuint64) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLuint64, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLuint64) - 1 > 4 * PyLong_SHIFT)) {
                                return (XLuint64) (((XLuint64)-1)*(((((((((XLuint64)digits[3]) << PyLong_SHIFT) | (XLuint64)digits[2]) << PyLong_SHIFT) | (XLuint64)digits[1]) << PyLong_SHIFT) | (XLuint64)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(XLuint64) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLuint64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLuint64) - 1 > 4 * PyLong_SHIFT)) {
                                return (XLuint64) ((((((((((XLuint64)digits[3]) << PyLong_SHIFT) | (XLuint64)digits[2]) << PyLong_SHIFT) | (XLuint64)digits[1]) << PyLong_SHIFT) | (XLuint64)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(XLuint64) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLuint64, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(XLuint64) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLuint64, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            XLuint64 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (XLuint64) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (XLuint64) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (XLuint64) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (XLuint64) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (XLuint64) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(XLuint64) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((XLuint64) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(XLuint64) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((XLuint64) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((XLuint64) 1) << (sizeof(XLuint64) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (XLuint64) -1;
        }
    } else {
        XLuint64 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (XLuint64) -1;
        val = __Pyx_PyInt_As_XLuint64(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to XLuint64");
    return (XLuint64) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to XLuint64");
    return (XLuint64) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT)) {
                                return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT)) {
                                return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT)) {
                                return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned int) 1) << (sizeof(unsigned int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE XLportHandle __Pyx_PyInt_As_XLportHandle(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const XLportHandle neg_one = (XLportHandle) -1, const_zero = (XLportHandle) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(XLportHandle) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(XLportHandle, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (XLportHandle) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(XLportHandle, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(XLportHandle) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLportHandle, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLportHandle) >= 2 * PyLong_SHIFT)) {
                                return (XLportHandle) (((((XLportHandle)digits[1]) << PyLong_SHIFT) | (XLportHandle)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(XLportHandle) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLportHandle, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLportHandle) >= 3 * PyLong_SHIFT)) {
                                return (XLportHandle) (((((((XLportHandle)digits[2]) << PyLong_SHIFT) | (XLportHandle)digits[1]) << PyLong_SHIFT) | (XLportHandle)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(XLportHandle) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLportHandle, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLportHandle) >= 4 * PyLong_SHIFT)) {
                                return (XLportHandle) (((((((((XLportHandle)digits[3]) << PyLong_SHIFT) | (XLportHandle)digits[2]) << PyLong_SHIFT) | (XLportHandle)digits[1]) << PyLong_SHIFT) | (XLportHandle)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (XLportHandle) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(XLportHandle) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLportHandle, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(XLportHandle) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLportHandle, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(XLportHandle, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(XLportHandle) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLportHandle, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLportHandle) - 1 > 2 * PyLong_SHIFT)) {
                                return (XLportHandle) (((XLportHandle)-1)*(((((XLportHandle)digits[1]) << PyLong_SHIFT) | (XLportHandle)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(XLportHandle) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLportHandle, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLportHandle) - 1 > 2 * PyLong_SHIFT)) {
                                return (XLportHandle) ((((((XLportHandle)digits[1]) << PyLong_SHIFT) | (XLportHandle)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(XLportHandle) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLportHandle, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLportHandle) - 1 > 3 * PyLong_SHIFT)) {
                                return (XLportHandle) (((XLportHandle)-1)*(((((((XLportHandle)digits[2]) << PyLong_SHIFT) | (XLportHandle)digits[1]) << PyLong_SHIFT) | (XLportHandle)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(XLportHandle) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLportHandle, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLportHandle) - 1 > 3 * PyLong_SHIFT)) {
                                return (XLportHandle) ((((((((XLportHandle)digits[2]) << PyLong_SHIFT) | (XLportHandle)digits[1]) << PyLong_SHIFT) | (XLportHandle)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(XLportHandle) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLportHandle, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLportHandle) - 1 > 4 * PyLong_SHIFT)) {
                                return (XLportHandle) (((XLportHandle)-1)*(((((((((XLportHandle)digits[3]) << PyLong_SHIFT) | (XLportHandle)digits[2]) << PyLong_SHIFT) | (XLportHandle)digits[1]) << PyLong_SHIFT) | (XLportHandle)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(XLportHandle) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLportHandle, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLportHandle) - 1 > 4 * PyLong_SHIFT)) {
                                return (XLportHandle) ((((((((((XLportHandle)digits[3]) << PyLong_SHIFT) | (XLportHandle)digits[2]) << PyLong_SHIFT) | (XLportHandle)digits[1]) << PyLong_SHIFT) | (XLportHandle)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(XLportHandle) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLportHandle, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(XLportHandle) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLportHandle, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            XLportHandle val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (XLportHandle) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (XLportHandle) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (XLportHandle) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (XLportHandle) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (XLportHandle) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(XLportHandle) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((XLportHandle) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(XLportHandle) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((XLportHandle) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((XLportHandle) 1) << (sizeof(XLportHandle) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (XLportHandle) -1;
        }
    } else {
        XLportHandle val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (XLportHandle) -1;
        val = __Pyx_PyInt_As_XLportHandle(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to XLportHandle");
    return (XLportHandle) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to XLportHandle");
    return (XLportHandle) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) >= 2 * PyLong_SHIFT)) {
                                return (unsigned long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) >= 3 * PyLong_SHIFT)) {
                                return (unsigned long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) >= 4 * PyLong_SHIFT)) {
                                return (unsigned long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned long) (((unsigned long)-1)*(((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned long) ((((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned long) (((unsigned long)-1)*(((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned long) ((((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned long) (((unsigned long)-1)*(((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned long) ((((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned long) 1) << (sizeof(unsigned long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned long) -1;
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned long) -1;
        val = __Pyx_PyInt_As_unsigned_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned long");
    return (unsigned long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned long");
    return (unsigned long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned char) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned char, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned char) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) >= 2 * PyLong_SHIFT)) {
                                return (unsigned char) (((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned char) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) >= 3 * PyLong_SHIFT)) {
                                return (unsigned char) (((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned char) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) >= 4 * PyLong_SHIFT)) {
                                return (unsigned char) (((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned char) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned char, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned char) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned char) (((unsigned char)-1)*(((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned char) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned char) ((((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned char) (((unsigned char)-1)*(((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned char) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned char) ((((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned char) (((unsigned char)-1)*(((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned char) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned char) ((((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned char) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned char) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned char) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned char) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned char) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned char) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned char) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned char) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned char) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned char) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned char) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned char) 1) << (sizeof(unsigned char) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned char) -1;
        }
    } else {
        unsigned char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned char) -1;
        val = __Pyx_PyInt_As_unsigned_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned char");
    return (unsigned char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned char");
    return (unsigned char) -1;
}

/* CIntFromPy */
static CYTHON_INLINE XLstatus __Pyx_PyInt_As_XLstatus(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const XLstatus neg_one = (XLstatus) -1, const_zero = (XLstatus) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(XLstatus) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(XLstatus, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (XLstatus) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(XLstatus, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(XLstatus) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLstatus, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLstatus) >= 2 * PyLong_SHIFT)) {
                                return (XLstatus) (((((XLstatus)digits[1]) << PyLong_SHIFT) | (XLstatus)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(XLstatus) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLstatus, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLstatus) >= 3 * PyLong_SHIFT)) {
                                return (XLstatus) (((((((XLstatus)digits[2]) << PyLong_SHIFT) | (XLstatus)digits[1]) << PyLong_SHIFT) | (XLstatus)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(XLstatus) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLstatus, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLstatus) >= 4 * PyLong_SHIFT)) {
                                return (XLstatus) (((((((((XLstatus)digits[3]) << PyLong_SHIFT) | (XLstatus)digits[2]) << PyLong_SHIFT) | (XLstatus)digits[1]) << PyLong_SHIFT) | (XLstatus)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (XLstatus) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(XLstatus) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLstatus, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(XLstatus) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLstatus, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(XLstatus, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(XLstatus) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLstatus, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLstatus) - 1 > 2 * PyLong_SHIFT)) {
                                return (XLstatus) (((XLstatus)-1)*(((((XLstatus)digits[1]) << PyLong_SHIFT) | (XLstatus)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(XLstatus) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLstatus, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLstatus) - 1 > 2 * PyLong_SHIFT)) {
                                return (XLstatus) ((((((XLstatus)digits[1]) << PyLong_SHIFT) | (XLstatus)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(XLstatus) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLstatus, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLstatus) - 1 > 3 * PyLong_SHIFT)) {
                                return (XLstatus) (((XLstatus)-1)*(((((((XLstatus)digits[2]) << PyLong_SHIFT) | (XLstatus)digits[1]) << PyLong_SHIFT) | (XLstatus)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(XLstatus) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLstatus, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLstatus) - 1 > 3 * PyLong_SHIFT)) {
                                return (XLstatus) ((((((((XLstatus)digits[2]) << PyLong_SHIFT) | (XLstatus)digits[1]) << PyLong_SHIFT) | (XLstatus)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(XLstatus) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLstatus, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLstatus) - 1 > 4 * PyLong_SHIFT)) {
                                return (XLstatus) (((XLstatus)-1)*(((((((((XLstatus)digits[3]) << PyLong_SHIFT) | (XLstatus)digits[2]) << PyLong_SHIFT) | (XLstatus)digits[1]) << PyLong_SHIFT) | (XLstatus)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(XLstatus) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLstatus, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLstatus) - 1 > 4 * PyLong_SHIFT)) {
                                return (XLstatus) ((((((((((XLstatus)digits[3]) << PyLong_SHIFT) | (XLstatus)digits[2]) << PyLong_SHIFT) | (XLstatus)digits[1]) << PyLong_SHIFT) | (XLstatus)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(XLstatus) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLstatus, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(XLstatus) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLstatus, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            XLstatus val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (XLstatus) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (XLstatus) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (XLstatus) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (XLstatus) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (XLstatus) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(XLstatus) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((XLstatus) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(XLstatus) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((XLstatus) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((XLstatus) 1) << (sizeof(XLstatus) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (XLstatus) -1;
        }
    } else {
        XLstatus val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (XLstatus) -1;
        val = __Pyx_PyInt_As_XLstatus(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to XLstatus");
    return (XLstatus) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to XLstatus");
    return (XLstatus) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned short) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned short) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(unsigned short),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned short));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XLstatus(XLstatus value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const XLstatus neg_one = (XLstatus) -1, const_zero = (XLstatus) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(XLstatus) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(XLstatus) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(XLstatus) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(XLstatus) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(XLstatus) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(XLstatus),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(XLstatus));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XLuint64(XLuint64 value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const XLuint64 neg_one = (XLuint64) -1, const_zero = (XLuint64) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(XLuint64) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(XLuint64) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(XLuint64) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(XLuint64) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(XLuint64) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(XLuint64),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(XLuint64));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XLportHandle(XLportHandle value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const XLportHandle neg_one = (XLportHandle) -1, const_zero = (XLportHandle) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(XLportHandle) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(XLportHandle) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(XLportHandle) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(XLportHandle) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(XLportHandle) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(XLportHandle),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(XLportHandle));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE unsigned short __Pyx_PyInt_As_unsigned_short(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned short) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned short, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned short, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned short) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) >= 2 * PyLong_SHIFT)) {
                                return (unsigned short) (((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned short) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) >= 3 * PyLong_SHIFT)) {
                                return (unsigned short) (((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned short) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) >= 4 * PyLong_SHIFT)) {
                                return (unsigned short) (((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned short) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned short) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned short) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned short, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned short) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned short) (((unsigned short)-1)*(((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned short) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned short) ((((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned short) (((unsigned short)-1)*(((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned short) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned short) ((((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned short) (((unsigned short)-1)*(((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned short) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned short) ((((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned short) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned short) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned short val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned short) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned short) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned short) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned short) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned short) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned short) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned short) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned short) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned short) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned short) 1) << (sizeof(unsigned short) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned short) -1;
        }
    } else {
        unsigned short val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned short) -1;
        val = __Pyx_PyInt_As_unsigned_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned short");
    return (unsigned short) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned short");
    return (unsigned short) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XLeventTag(XLeventTag value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const XLeventTag neg_one = (XLeventTag) -1, const_zero = (XLeventTag) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(XLeventTag) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(XLeventTag) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(XLeventTag) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(XLeventTag) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(XLeventTag) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(XLeventTag),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(XLeventTag));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(unsigned char),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned char));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(char));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE XLfrEventTag __Pyx_PyInt_As_XLfrEventTag(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const XLfrEventTag neg_one = (XLfrEventTag) -1, const_zero = (XLfrEventTag) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(XLfrEventTag) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(XLfrEventTag, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (XLfrEventTag) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(XLfrEventTag, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(XLfrEventTag) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLfrEventTag, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLfrEventTag) >= 2 * PyLong_SHIFT)) {
                                return (XLfrEventTag) (((((XLfrEventTag)digits[1]) << PyLong_SHIFT) | (XLfrEventTag)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(XLfrEventTag) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLfrEventTag, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLfrEventTag) >= 3 * PyLong_SHIFT)) {
                                return (XLfrEventTag) (((((((XLfrEventTag)digits[2]) << PyLong_SHIFT) | (XLfrEventTag)digits[1]) << PyLong_SHIFT) | (XLfrEventTag)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(XLfrEventTag) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLfrEventTag, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLfrEventTag) >= 4 * PyLong_SHIFT)) {
                                return (XLfrEventTag) (((((((((XLfrEventTag)digits[3]) << PyLong_SHIFT) | (XLfrEventTag)digits[2]) << PyLong_SHIFT) | (XLfrEventTag)digits[1]) << PyLong_SHIFT) | (XLfrEventTag)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (XLfrEventTag) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(XLfrEventTag) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLfrEventTag, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(XLfrEventTag) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLfrEventTag, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(XLfrEventTag, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(XLfrEventTag) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLfrEventTag, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLfrEventTag) - 1 > 2 * PyLong_SHIFT)) {
                                return (XLfrEventTag) (((XLfrEventTag)-1)*(((((XLfrEventTag)digits[1]) << PyLong_SHIFT) | (XLfrEventTag)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(XLfrEventTag) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLfrEventTag, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLfrEventTag) - 1 > 2 * PyLong_SHIFT)) {
                                return (XLfrEventTag) ((((((XLfrEventTag)digits[1]) << PyLong_SHIFT) | (XLfrEventTag)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(XLfrEventTag) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLfrEventTag, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLfrEventTag) - 1 > 3 * PyLong_SHIFT)) {
                                return (XLfrEventTag) (((XLfrEventTag)-1)*(((((((XLfrEventTag)digits[2]) << PyLong_SHIFT) | (XLfrEventTag)digits[1]) << PyLong_SHIFT) | (XLfrEventTag)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(XLfrEventTag) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLfrEventTag, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLfrEventTag) - 1 > 3 * PyLong_SHIFT)) {
                                return (XLfrEventTag) ((((((((XLfrEventTag)digits[2]) << PyLong_SHIFT) | (XLfrEventTag)digits[1]) << PyLong_SHIFT) | (XLfrEventTag)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(XLfrEventTag) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLfrEventTag, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLfrEventTag) - 1 > 4 * PyLong_SHIFT)) {
                                return (XLfrEventTag) (((XLfrEventTag)-1)*(((((((((XLfrEventTag)digits[3]) << PyLong_SHIFT) | (XLfrEventTag)digits[2]) << PyLong_SHIFT) | (XLfrEventTag)digits[1]) << PyLong_SHIFT) | (XLfrEventTag)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(XLfrEventTag) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(XLfrEventTag, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(XLfrEventTag) - 1 > 4 * PyLong_SHIFT)) {
                                return (XLfrEventTag) ((((((((((XLfrEventTag)digits[3]) << PyLong_SHIFT) | (XLfrEventTag)digits[2]) << PyLong_SHIFT) | (XLfrEventTag)digits[1]) << PyLong_SHIFT) | (XLfrEventTag)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(XLfrEventTag) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLfrEventTag, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(XLfrEventTag) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(XLfrEventTag, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            XLfrEventTag val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (XLfrEventTag) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (XLfrEventTag) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (XLfrEventTag) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (XLfrEventTag) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (XLfrEventTag) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(XLfrEventTag) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((XLfrEventTag) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(XLfrEventTag) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((XLfrEventTag) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((XLfrEventTag) 1) << (sizeof(XLfrEventTag) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (XLfrEventTag) -1;
        }
    } else {
        XLfrEventTag val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (XLfrEventTag) -1;
        val = __Pyx_PyInt_As_XLfrEventTag(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to XLfrEventTag");
    return (XLfrEventTag) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to XLfrEventTag");
    return (XLfrEventTag) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XLfrEventTag(XLfrEventTag value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const XLfrEventTag neg_one = (XLfrEventTag) -1, const_zero = (XLfrEventTag) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(XLfrEventTag) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(XLfrEventTag) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(XLfrEventTag) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(XLfrEventTag) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(XLfrEventTag) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(XLfrEventTag),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(XLfrEventTag));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name_2);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__104);
    }
    return name;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
